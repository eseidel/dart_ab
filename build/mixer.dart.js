// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
(function($) {
function dart() {}var A = new dart;
delete A.x;
var B = new dart;
delete B.x;
var C = new dart;
delete C.x;
var D = new dart;
delete D.x;
var E = new dart;
delete E.x;
var F = new dart;
delete F.x;
var G = new dart;
delete G.x;
var H = new dart;
delete H.x;
var J = new dart;
delete J.x;
var K = new dart;
delete K.x;
var L = new dart;
delete L.x;
var M = new dart;
delete M.x;
var N = new dart;
delete N.x;
var O = new dart;
delete O.x;
var P = new dart;
delete P.x;
var Q = new dart;
delete Q.x;
var R = new dart;
delete R.x;
var S = new dart;
delete S.x;
var T = new dart;
delete T.x;
var U = new dart;
delete U.x;
var V = new dart;
delete V.x;
var W = new dart;
delete W.x;
var X = new dart;
delete X.x;
var Y = new dart;
delete Y.x;
var Z = new dart;
delete Z.x;
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
(function (reflectionData) {
  "use strict";
  function map(x){x={x:x};delete x.x;return x}
    function processStatics(descriptor) {
      for (var property in descriptor) {
        if (!hasOwnProperty.call(descriptor, property)) continue;
        if (property === "") continue;
        var element = descriptor[property];
        var firstChar = property.substring(0, 1);
        var previousProperty;
        if (firstChar === "+") {
          mangledGlobalNames[previousProperty] = property.substring(1);
          if (descriptor[property] == 1) descriptor[previousProperty].$reflectable = 1;
          if (element && element.length) init.typeInformation[previousProperty] = element;
        } else if (firstChar === "@") {
          property = property.substring(1);
          $[property]["@"] = element;
        } else if (firstChar === "*") {
          globalObject[previousProperty].$defaultValues = element;
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods) {
            descriptor.$methodsWithOptionalArguments = optionalMethods = {}
          }
          optionalMethods[property] = previousProperty;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
          init.globalFunctions[property] = element;
        } else if (element.constructor === Array) {
          addStubs(globalObject, element, property, true, descriptor, functions);
        } else {
          previousProperty = property;
          var newDesc = {};
          var previousProp;
          for (var prop in element) {
            if (!hasOwnProperty.call(element, prop)) continue;
            firstChar = prop.substring(0, 1);
            if (prop === "static") {
              processStatics(init.statics[property] = element[prop]);
            } else if (firstChar === "+") {
              mangledNames[previousProp] = prop.substring(1);
              if (element[prop] == 1) element[previousProp].$reflectable = 1;
            } else if (firstChar === "@" && prop !== "@") {
              newDesc[prop.substring(1)]["@"] = element[prop];
            } else if (firstChar === "*") {
              newDesc[previousProp].$defaultValues = element[prop];
              var optionalMethods = newDesc.$methodsWithOptionalArguments;
              if (!optionalMethods) {
                newDesc.$methodsWithOptionalArguments = optionalMethods={}
              }
              optionalMethods[prop] = previousProp;
            } else {
              var elem = element[prop];
              if (prop && elem != null && elem.constructor === Array && prop !== "<>") {
                addStubs(newDesc, elem, prop, false, element, []);
              } else {
                newDesc[previousProp = prop] = elem;
              }
            }
          }
          $$[property] = [globalObject, newDesc];
          classes.push(property);
        }
      }
    }
  function addStubs(descriptor, array, name, isStatic, originalDescriptor, functions) {
    var f, funcs = [originalDescriptor[name] = descriptor[name] = f = (function() {
  var result = array[0];
  if (result != null && typeof result != "function") {
    throw new Error(
        name + ": expected value of type 'function' at index " + (0) +
        " but got " + (typeof result));
  }
  return result;
})()];
    f.$stubName = name;
    functions.push(name);
    for (var index = 0; index < array.length; index += 2) {
      f = array[index + 1];
      if (typeof f != "function") break;
      f.$stubName = (function() {
  var result = array[index + 2];
  if (result != null && typeof result != "string") {
    throw new Error(
        name + ": expected value of type 'string' at index " + (index + 2) +
        " but got " + (typeof result));
  }
  return result;
})();
      funcs.push(f);
      if (f.$stubName) {
        originalDescriptor[f.$stubName] = descriptor[f.$stubName] = f;
        functions.push(f.$stubName);
      }
    }
    for (var i = 0; i < funcs.length; index++, i++) {
      funcs[i].$callName = (function() {
  var result = array[index + 1];
  if (result != null && typeof result != "string") {
    throw new Error(
        name + ": expected value of type 'string' at index " + (index + 1) +
        " but got " + (typeof result));
  }
  return result;
})();
    }
    var getterStubName = (function() {
  var result = array[++index];
  if (result != null && typeof result != "string") {
    throw new Error(
        name + ": expected value of type 'string' at index " + (++index) +
        " but got " + (typeof result));
  }
  return result;
})();
    array = array.slice(++index);
    var requiredParameterInfo = (function() {
  var result = array[0];
  if (result != null && (typeof result != "number" || (result|0) !== result)) {
    throw new Error(
        name + ": expected value of type 'int' at index " + (0) +
        " but got " + (typeof result));
  }
  return result;
})();
    var requiredParameterCount = requiredParameterInfo >> 1;
    var isAccessor = (requiredParameterInfo & 1) === 1;
    var isSetter = requiredParameterInfo === 3;
    var isGetter = requiredParameterInfo === 1;
    var optionalParameterInfo = (function() {
  var result = array[1];
  if (result != null && (typeof result != "number" || (result|0) !== result)) {
    throw new Error(
        name + ": expected value of type 'int' at index " + (1) +
        " but got " + (typeof result));
  }
  return result;
})();
    var optionalParameterCount = optionalParameterInfo >> 1;
    var optionalParametersAreNamed = (optionalParameterInfo & 1) === 1;
    var isIntercepted = requiredParameterCount + optionalParameterCount != funcs[0].length;
    var functionTypeIndex = (function() {
  var result = array[2];
  if (result != null && (typeof result != "number" || (result|0) !== result) && typeof result != "function") {
    throw new Error(
        name + ": expected value of type 'function or int' at index " + (2) +
        " but got " + (typeof result));
  }
  return result;
})();
    var isReflectable = array.length > requiredParameterCount + optionalParameterCount + 3;
    if (getterStubName) {
      f = tearOff(funcs, array, isStatic, name, isIntercepted);
      if (isStatic) init.globalFunctions[name] = f;
      originalDescriptor[getterStubName] = descriptor[getterStubName] = f;
      funcs.push(f);
      if (getterStubName) functions.push(getterStubName);
      f.$stubName = getterStubName;
      f.$callName = null;
    }
    if (isReflectable) {
      for (var i = 0; i < funcs.length; i++) {
        funcs[i].$reflectable = 1;
        funcs[i].$reflectionInfo = array;
      }
    }
    if (isReflectable) {
      var unmangledNameIndex = optionalParameterCount * 2 + requiredParameterCount + 3;
      var unmangledName = (function() {
  var result = array[unmangledNameIndex];
  if (result != null && typeof result != "string") {
    throw new Error(
        name + ": expected value of type 'string' at index " + (unmangledNameIndex) +
        " but got " + (typeof result));
  }
  return result;
})();
      var reflectionName = unmangledName + ":" + requiredParameterCount + ":" + optionalParameterCount;
      if (isGetter) {
        reflectionName = unmangledName;
      } else if (isSetter) {
        reflectionName = unmangledName + "=";
      }
      if (isStatic) {
        init.mangledGlobalNames[name] = reflectionName;
      } else {
        init.mangledNames[name] = reflectionName;
      }
      funcs[0].$reflectionName = reflectionName;
      funcs[0].$metadataIndex = unmangledNameIndex + 1;
      if (optionalParameterCount) descriptor[unmangledName + "*"] = funcs[0];
    }
  }
  function tearOffGetterNoCsp(funcs, reflectionInfo, name, isIntercepted) {
    return isIntercepted
        ? new Function("funcs", "reflectionInfo", "name", "H", "c",
            "return function tearOff_" + name + (functionCounter++)+ "(x) {" +
              "if (c === null) c = H.closureFromTearOff(" +
                  "this, funcs, reflectionInfo, false, [x], name);" +
              "return new c(this, funcs[0], x, name);" +
            "}")(funcs, reflectionInfo, name, H, null)
        : new Function("funcs", "reflectionInfo", "name", "H", "c",
            "return function tearOff_" + name + (functionCounter++)+ "() {" +
              "if (c === null) c = H.closureFromTearOff(" +
                  "this, funcs, reflectionInfo, false, [], name);" +
              "return new c(this, funcs[0], null, name);" +
            "}")(funcs, reflectionInfo, name, H, null)
  }
  function tearOffGetterCsp(funcs, reflectionInfo, name, isIntercepted) {
    var cache = null;
    return isIntercepted
        ? function(x) {
            if (cache === null) cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [x], name);
            return new cache(this, funcs[0], x, name)
          }
        : function() {
            if (cache === null) cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [], name);
            return new cache(this, funcs[0], null, name)
          }
  }
  function tearOff(funcs, reflectionInfo, isStatic, name, isIntercepted) {
    var cache;
    return isStatic
        ? function() {
            if (cache === void 0) cache = H.closureFromTearOff(this, funcs, reflectionInfo, true, [], name).prototype;
            return cache;
          }
        : tearOffGetter(funcs, reflectionInfo, name, isIntercepted);
  }
  var functionCounter = 0;
  var tearOffGetter = (typeof dart_precompiled == "function")
      ? tearOffGetterCsp : tearOffGetterNoCsp;
  if (!init.libraries) init.libraries = [];
  if (!init.mangledNames) init.mangledNames = map();
  if (!init.mangledGlobalNames) init.mangledGlobalNames = map();
  if (!init.statics) init.statics = map();
  if (!init.typeInformation) init.typeInformation = map();
  if (!init.globalFunctions) init.globalFunctions = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor[""];
    var classes = [];
    var functions = [];
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot,
                    globalObject]);
  }
})
([
["MixerDemo", "file:///Users/kevmoo/source/github/dart_ab/web/mixer.dart", , A, {
  "": "",
  main: [function() {
    var psd, ballFixtureDef, t1, t2, t3, t4, t5;
    psd = new V.CircleShape(new T.Vector2(new Float32Array(2)), 0, 0);
    psd.radius = 1;
    ballFixtureDef = V.FixtureDef$();
    ballFixtureDef.shape = psd;
    ballFixtureDef.density = 10;
    ballFixtureDef.friction = 0.9;
    ballFixtureDef.restitution = 0.95;
    t1 = H.setRuntimeTypeInfo([], [V.Body]);
    t2 = J.JSNumber;
    t3 = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [t2]);
    t3.ListQueue$1(null, t2);
    t2 = new Float32Array(2);
    t2[0] = 0;
    t2[1] = -30;
    t4 = H.setRuntimeTypeInfo([], [V.Body]);
    t5 = new V.DefaultWorldPool(null, null, null);
    t5.DefaultWorldPool$0();
    t5 = V.World$(new T.Vector2(t2), true, t5);
    t2 = new P.Stopwatch(null, null);
    t2.start$0(0);
    t2 = new A.MixerTest(ballFixtureDef, C.C__JSRandom, 0, 0, t1, t3, 0, t4, t5, t2, 5, null, null, null, null, null, null, null, null);
    t2.initialize$0(0);
    t2.initializeAnimation$0();
    t5 = window;
    t2 = t2.get$step(t2);
    C.Window_methods._ensureRequestAnimationFrame$0(t5);
    C.Window_methods._requestAnimationFrame$1(t5, W._wrapZone(t2));
  }, "call$0", "main$closure", 0, 0, 0],
  MixerTest: {
    "": "Demo;_ballFixture,_rnd,_fastFrameCount,_lastUpdate,_bouncers,_frameQueue,_runningAverage,bodies,world,_stopwatch,_viewportScale,canvas,ctx,viewport,debugDraw,frameCount,fpsCounter,elapsedUs,worldStepTime",
    initialize$0: function(_) {
      var t1, bd, body, i, angle, t2, t3, cd, t4, fd, groundBody, rjd;
      V.PolygonShape$().setAsBox$2(50, 0.4);
      t1 = V.BodyDef$().position.storage;
      t1[0] = 0;
      t1[1] = 0;
      bd = V.BodyDef$();
      bd.type = 2;
      t1 = this.world;
      body = t1.createBody$1(bd);
      for (i = 0; i < 6; ++i) {
        angle = 6.283185307179586 * (i / 6);
        t2 = Math.cos(angle);
        t3 = Math.sin(angle);
        cd = V.PolygonShape$();
        t4 = new Float32Array(2);
        t4[0] = 50 * t2;
        t4[1] = 50 * t3;
        cd.setAsBoxWithCenterAndAngle$4(1, 30, new T.Vector2(t4), angle);
        fd = V.FixtureDef$();
        fd.shape = cd;
        fd.density = 10;
        fd.friction = 0;
        fd.restitution = 0;
        body.createFixture$1(fd);
      }
      body.toString;
      t2 = body.flags;
      if (typeof t2 !== "number")
        return t2.$and();
      body.flags = t2 & 4294967287;
      groundBody = t1.createBody$1(V.BodyDef$());
      t2 = new Float32Array(2);
      t3 = new T.Vector2(t2);
      t2[0] = 0;
      t2[1] = 0;
      t2 = new Float32Array(2);
      t4 = new T.Vector2(t2);
      t2[0] = 0;
      t2[1] = 0;
      rjd = new V.RevoluteJointDef(t3, t4, 0, false, 0, 0, false, 0, 0, 0, null, null, null, false);
      rjd.RevoluteJointDef$0();
      t2 = body.originTransform.position;
      rjd.bodyA = body;
      rjd.bodyB = groundBody;
      body.getLocalPointToOut$2(t2, t3);
      rjd.bodyB.getLocalPointToOut$2(t2, t4);
      rjd.referenceAngle = rjd.bodyA.get$angle() - rjd.bodyB.get$angle();
      rjd.motorSpeed = 0.8;
      rjd.maxMotorTorque = 100000000;
      rjd.enableMotor = true;
      t1.createJoint$1(rjd);
    },
    step$1: [function(_, timeStamp) {
      var delta, t1, t2, t3, bd2, ball;
      delta = J.$sub$n(timeStamp, this._lastUpdate);
      this._lastUpdate = timeStamp;
      t1 = this._frameQueue;
      if (t1.get$length(t1) >= 60) {
        t2 = this._runningAverage;
        t3 = t1.removeFirst$0();
        if (typeof t3 !== "number")
          return H.iae(t3);
        this._runningAverage = t2 - t3;
      }
      if (t1.get$length(t1) < 60) {
        t1._add$1(delta);
        t2 = this._runningAverage;
        if (typeof delta !== "number")
          return H.iae(delta);
        this._runningAverage = t2 + delta;
      }
      delta = t1.get$length(t1) === 60 ? this._runningAverage / 60 : null;
      t1 = this.elapsedUs;
      if (t1 != null && delta != null) {
        if (typeof t1 !== "number")
          return t1.$le();
        if (t1 <= 6000)
          this._fastFrameCount = this._fastFrameCount + 1;
        if (!(t1 >= 7000)) {
          if (typeof delta !== "number")
            return delta.$gt();
          t2 = delta > 20;
        } else
          t2 = true;
        if (t2) {
          P.print("Boo!\tStep time: " + H.S(t1) + "\tFrame time: " + H.S(delta));
          this._fastFrameCount = 0;
          t1 = this._bouncers;
          if (t1.length > 10)
            this.world.destroyBody$1(t1.pop());
        } else if (this._fastFrameCount >= 5) {
          this._fastFrameCount = 0;
          bd2 = V.BodyDef$();
          bd2.type = 2;
          t1 = new Float32Array(2);
          t1[0] = 0;
          t1[1] = 40;
          bd2.position = new T.Vector2(t1);
          t1 = new Float32Array(2);
          t1[0] = 35;
          t1[1] = 0;
          bd2.linearVelocity = new T.Vector2(t1);
          ball = this.world.createBody$1(bd2);
          ball.createFixture$1(this._ballFixture);
          this._bouncers.push(ball);
        }
      }
      Q.Demo.prototype.step$1.call(this, this, timeStamp);
      J.set$fillStyle$x(this.ctx, "black");
      J.set$font$x(this.ctx, "30px Arial");
      J.set$textAlign$x(this.ctx, "right");
      J.fillText$3$x(this.ctx, "" + this._bouncers.length + " items", 150, 30);
    }, "call$1", "get$step", 2, 0, 10],
    static: {"": "MixerTest__QUEUE_SIZE"}
  }
},
1],
["_foreign_helper", "dart:_foreign_helper", , H, {
  "": "",
  JS_CONST: {
    "": "Object;code"
  }
}],
["_interceptors", "dart:_interceptors", , J, {
  "": "",
  getInterceptor: function(object) {
    return void 0;
  },
  makeDispatchRecord: function(interceptor, proto, extension, indexability) {
    return {i: interceptor, p: proto, e: extension, x: indexability};
  },
  getNativeInterceptor: function(object) {
    var record, proto, objectProto, interceptor;
    record = object[init.dispatchPropertyName];
    if (record == null)
      if ($.initNativeDispatchFlag == null) {
        H.initNativeDispatch();
        record = object[init.dispatchPropertyName];
      }
    if (record != null) {
      proto = record.p;
      if (false === proto)
        return record.i;
      if (true === proto)
        return object;
      objectProto = Object.getPrototypeOf(object);
      if (proto === objectProto)
        return record.i;
      if (record.e === objectProto)
        throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
    }
    interceptor = H.lookupAndCacheInterceptor(object);
    if (interceptor == null)
      return C.UnknownJavaScriptObject_methods;
    return interceptor;
  },
  Interceptor: {
    "": "Object;",
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return H.Primitives_objectToString(receiver);
    },
    "%": "ArrayBuffer|Blob|CanvasGradient|CanvasPattern|DOMError|DOMImplementation|File|FileError|MediaError|MediaKeyError|Navigator|NavigatorUserMediaError|PositionError|SQLError|SVGAnimatedEnumeration|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedTransformList|SVGPointList"
  },
  JSBool: {
    "": "bool/Interceptor;",
    toString$0: function(receiver) {
      return String(receiver);
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    $isbool: true
  },
  JSNull: {
    "": "Interceptor;",
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    }
  },
  JavaScriptObject: {
    "": "Interceptor;",
    get$hashCode: function(_) {
      return 0;
    }
  },
  PlainJavaScriptObject: {
    "": "JavaScriptObject;"
  },
  UnknownJavaScriptObject: {
    "": "JavaScriptObject;"
  },
  JSArray: {
    "": "List/Interceptor;",
    forEach$1: function(receiver, f) {
      return H.IterableMixinWorkaround_forEach(receiver, f);
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    toString$0: function(receiver) {
      return H.IterableMixinWorkaround_toStringIterable(receiver, "[", "]");
    },
    toList$1$growable: function(receiver, growable) {
      var t1;
      if (growable)
        return H.setRuntimeTypeInfo(receiver.slice(), [H.getTypeArgumentByIndex(receiver, 0)]);
      else {
        t1 = H.setRuntimeTypeInfo(receiver.slice(), [H.getTypeArgumentByIndex(receiver, 0)]);
        t1.fixed$length = init;
        return t1;
      }
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, receiver.length, 0, null);
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    set$length: function(receiver, newLength) {
      if (newLength < 0)
        throw H.wrapException(P.RangeError$value(newLength));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("set length"));
      receiver.length = newLength;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(new P.ArgumentError(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("indexed set"));
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(new P.ArgumentError(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      receiver[index] = value;
    },
    $isList: true,
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    static: {JSArray_JSArray$fixed: function($length, $E) {
        var t1;
        if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
          throw H.wrapException(P.ArgumentError$("Length must be a non-negative integer: " + H.S($length)));
        t1 = H.setRuntimeTypeInfo(new Array($length), [$E]);
        t1.fixed$length = init;
        return t1;
      }}
  },
  JSNumber: {
    "": "num/Interceptor;",
    compareTo$1: function(receiver, b) {
      var bIsNegative;
      if (typeof b !== "number")
        throw H.wrapException(new P.ArgumentError(b));
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (this.get$isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative: function(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    get$isNaN: function(receiver) {
      return isNaN(receiver);
    },
    remainder$1: function(receiver, b) {
      return receiver % b;
    },
    toInt$0: function(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw H.wrapException(P.UnsupportedError$('' + receiver));
    },
    roundToDouble$0: function(receiver) {
      if (receiver < 0)
        return -Math.round(-receiver);
      else
        return Math.round(receiver);
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      return receiver & 0x1FFFFFFF;
    },
    $negate: function(receiver) {
      return -receiver;
    },
    $add: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver + other;
    },
    $sub: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver - other;
    },
    $mul: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver * other;
    },
    _tdivFast$1: function(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this.toInt$0(receiver / other);
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = other > 31 ? 0 : receiver >>> other;
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrBothPositive$1: function(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    $lt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver < other;
    },
    $gt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver > other;
    },
    $ge: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver >= other;
    },
    $isnum: true,
    static: {"": "JSNumber__MIN_INT32,JSNumber__MAX_INT32"}
  },
  JSInt: {
    "": "int/JSNumber;",
    $isdouble: true,
    $isnum: true,
    $isint: true
  },
  JSDouble: {
    "": "double/JSNumber;",
    $isdouble: true,
    $isnum: true
  },
  JSString: {
    "": "String/Interceptor;",
    codeUnitAt$1: function(receiver, index) {
      if (index < 0)
        throw H.wrapException(P.RangeError$value(index));
      if (index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index));
      return receiver.charCodeAt(index);
    },
    $add: function(receiver, other) {
      if (typeof other !== "string")
        throw H.wrapException(new P.ArgumentError(other));
      return receiver + other;
    },
    startsWith$2: function(receiver, pattern, index) {
      var endIndex;
      if (index > receiver.length)
        throw H.wrapException(P.RangeError$range(index, 0, receiver.length));
      endIndex = index + pattern.length;
      if (endIndex > receiver.length)
        return false;
      return pattern === receiver.substring(index, endIndex);
    },
    startsWith$1: function($receiver, pattern) {
      return this.startsWith$2($receiver, pattern, 0);
    },
    substring$2: function(receiver, startIndex, endIndex) {
      if (endIndex == null)
        endIndex = receiver.length;
      if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
        H.throwExpression(P.ArgumentError$(endIndex));
      if (startIndex < 0)
        throw H.wrapException(P.RangeError$value(startIndex));
      if (typeof endIndex !== "number")
        return H.iae(endIndex);
      if (startIndex > endIndex)
        throw H.wrapException(P.RangeError$value(startIndex));
      if (endIndex > receiver.length)
        throw H.wrapException(P.RangeError$value(endIndex));
      return receiver.substring(startIndex, endIndex);
    },
    substring$1: function($receiver, startIndex) {
      return this.substring$2($receiver, startIndex, null);
    },
    toLowerCase$0: function(receiver) {
      return receiver.toLowerCase();
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    compareTo$1: function(receiver, other) {
      var t1;
      if (typeof other !== "string")
        throw H.wrapException(new P.ArgumentError(other));
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = 536870911 & hash + receiver.charCodeAt(i);
        hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
        hash ^= hash >> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
      hash ^= hash >> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(new P.ArgumentError(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      return receiver[index];
    },
    $isString: true
  }
}],
["_isolate_helper", "dart:_isolate_helper", , H, {
  "": "",
  _callInIsolate: function(isolate, $function) {
    var result = isolate.eval$1($function);
    init.globalState.topEventLoop.run$0();
    return result;
  },
  startRootIsolate: function(entry) {
    var t1, t2, rootContext;
    t1 = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
    t1._Manager$1(entry);
    init.globalState = t1;
    if (init.globalState.isWorker === true)
      return;
    t1 = init.globalState;
    t2 = t1.nextIsolateId;
    t1.nextIsolateId = t2 + 1;
    rootContext = new H._IsolateContext(t2, P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H.RawReceivePortImpl), P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSInt), new Isolate());
    init.globalState.rootContext = rootContext;
    init.globalState.currentContext = rootContext;
    t1 = H.getDynamicRuntimeType();
    t2 = H.buildFunctionType(t1, [t1])._isTest$1(entry);
    if (t2)
      rootContext.eval$1(new H.startRootIsolate_closure(entry));
    else {
      t1 = H.buildFunctionType(t1, [t1, t1])._isTest$1(entry);
      if (t1)
        rootContext.eval$1(new H.startRootIsolate_closure0(entry));
      else
        rootContext.eval$1(entry);
    }
    init.globalState.topEventLoop.run$0();
  },
  IsolateNatives_computeThisScript: function() {
    var currentScript = init.currentScript;
    if (currentScript != null)
      return String(currentScript.src);
    if (typeof version == "function" && typeof os == "object" && "system" in os)
      return H.IsolateNatives_computeThisScriptD8();
    if (typeof version == "function" && typeof system == "function")
      return thisFilename();
    return;
  },
  IsolateNatives_computeThisScriptD8: function() {
    var stack, matches;
    stack = new Error().stack;
    if (stack == null) {
      stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
      if (stack == null)
        throw H.wrapException(P.UnsupportedError$("No stack trace"));
    }
    matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
    if (matches != null)
      return matches[1];
    matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
    if (matches != null)
      return matches[1];
    throw H.wrapException(P.UnsupportedError$("Cannot extract URI from \"" + stack + "\""));
  },
  IsolateNatives__processWorkerMessage: function(sender, e) {
    var msg, t1, functionName, entryPoint, args, message, isSpawnUri, replyTo, t2, context, uri, t3, t4, t5, worker, t6, workerId;
    msg = H._deserializeMessage(e.data);
    t1 = J.getInterceptor$asx(msg);
    switch (t1.$index(msg, "command")) {
      case "start":
        init.globalState.currentManagerId = t1.$index(msg, "id");
        functionName = t1.$index(msg, "functionName");
        entryPoint = functionName == null ? init.globalState.entry : init.globalFunctions[functionName]();
        args = t1.$index(msg, "args");
        message = H._deserializeMessage(t1.$index(msg, "msg"));
        isSpawnUri = t1.$index(msg, "isSpawnUri");
        replyTo = H._deserializeMessage(t1.$index(msg, "replyTo"));
        t1 = init.globalState;
        t2 = t1.nextIsolateId;
        t1.nextIsolateId = t2 + 1;
        context = new H._IsolateContext(t2, P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H.RawReceivePortImpl), P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSInt), new Isolate());
        init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, replyTo), "worker-start"));
        init.globalState.currentContext = context;
        init.globalState.topEventLoop.run$0();
        break;
      case "spawn-worker":
        t2 = t1.$index(msg, "functionName");
        uri = t1.$index(msg, "uri");
        t3 = t1.$index(msg, "args");
        t4 = t1.$index(msg, "msg");
        t5 = t1.$index(msg, "isSpawnUri");
        t1 = t1.$index(msg, "replyPort");
        if (uri == null)
          uri = $.get$IsolateNatives_thisScript();
        worker = new Worker(uri);
        worker.onmessage = function(e) { H.IsolateNatives__processWorkerMessage(worker, e); };
        t6 = init.globalState;
        workerId = t6.nextManagerId;
        t6.nextManagerId = workerId + 1;
        $.get$IsolateNatives_workerIds().$indexSet(0, worker, workerId);
        init.globalState.managers.$indexSet(0, workerId, worker);
        worker.postMessage(H._serializeMessage(H.fillLiteralMap(["command", "start", "id", workerId, "replyTo", H._serializeMessage(t1), "args", t3, "msg", H._serializeMessage(t4), "isSpawnUri", t5, "functionName", t2], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null))));
        break;
      case "message":
        if (t1.$index(msg, "port") != null)
          J.send$1$x(t1.$index(msg, "port"), t1.$index(msg, "msg"));
        init.globalState.topEventLoop.run$0();
        break;
      case "close":
        init.globalState.managers.remove$1(0, $.get$IsolateNatives_workerIds().$index(0, sender));
        sender.terminate();
        init.globalState.topEventLoop.run$0();
        break;
      case "log":
        H.IsolateNatives__log(t1.$index(msg, "msg"));
        break;
      case "print":
        if (init.globalState.isWorker === true) {
          t1 = init.globalState.mainManager;
          t2 = H._serializeMessage(H.fillLiteralMap(["command", "print", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
          t1.toString;
          self.postMessage(t2);
        } else
          P.print(t1.$index(msg, "msg"));
        break;
      case "error":
        throw H.wrapException(t1.$index(msg, "msg"));
      default:
    }
  },
  IsolateNatives__log: function(msg) {
    var trace, t1, t2, exception;
    if (init.globalState.isWorker === true) {
      t1 = init.globalState.mainManager;
      t2 = H._serializeMessage(H.fillLiteralMap(["command", "log", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
      t1.toString;
      self.postMessage(t2);
    } else
      try {
        $.get$globalThis().console.log(msg);
      } catch (exception) {
        H.unwrapException(exception);
        trace = new H._StackTrace(exception, null);
        throw H.wrapException(P.Exception_Exception(trace));
      }

  },
  _serializeMessage: function(message) {
    var t1;
    if (init.globalState.supportsWorkers === true) {
      t1 = new H._JsSerializer(0, new H._MessageTraverserVisitedMap());
      t1._visited = new H._JsVisitedMap(null);
      return t1.traverse$1(message);
    } else {
      t1 = new H._JsCopier(new H._MessageTraverserVisitedMap());
      t1._visited = new H._JsVisitedMap(null);
      return t1.traverse$1(message);
    }
  },
  _deserializeMessage: function(message) {
    if (init.globalState.supportsWorkers === true)
      return new H._JsDeserializer(null).deserialize$1(message);
    else
      return message;
  },
  _MessageTraverser_isPrimitive: function(x) {
    return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
  },
  _Deserializer_isPrimitive: function(x) {
    return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
  },
  startRootIsolate_closure: {
    "": "Closure:11;entry_0",
    call$0: function() {
      this.entry_0.call$1([]);
    }
  },
  startRootIsolate_closure0: {
    "": "Closure:11;entry_1",
    call$0: function() {
      this.entry_1.call$2([], null);
    }
  },
  _Manager: {
    "": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
    _Manager$1: function(entry) {
      var t1, t2, t3, $function;
      t1 = $.get$globalWindow() == null;
      t2 = $.get$globalWorker();
      t3 = t1 && $.get$globalPostMessageDefined() === true;
      this.isWorker = t3;
      if (!t3)
        t2 = t2 != null && $.get$IsolateNatives_thisScript() != null;
      else
        t2 = true;
      this.supportsWorkers = t2;
      this.fromCommandLine = t1 && !t3;
      t2 = H._IsolateEvent;
      t3 = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [t2]);
      t3.ListQueue$1(null, t2);
      this.topEventLoop = new H._EventLoop(t3, 0);
      this.isolates = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H._IsolateContext);
      this.managers = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, null);
      if (this.isWorker === true) {
        t1 = new H._MainManagerStub();
        this.mainManager = t1;
        $function = function (e) { H.IsolateNatives__processWorkerMessage(t1, e); };
        $.get$globalThis().onmessage = $function;
        $.get$globalThis().dartPrint = function (object) {};
      }
    }
  },
  _IsolateContext: {
    "": "Object;id,ports,weakPorts,isolateStatics<",
    eval$1: function(code) {
      var old, result;
      old = init.globalState.currentContext;
      init.globalState.currentContext = this;
      $ = this.isolateStatics;
      result = null;
      try {
        result = code.call$0();
      } finally {
        init.globalState.currentContext = old;
        if (old != null)
          $ = old.get$isolateStatics();
      }
      return result;
    },
    lookup$1: function(portId) {
      return this.ports.$index(0, portId);
    },
    register$2: function(_, portId, port) {
      var t1 = this.ports;
      if (t1.containsKey$1(portId))
        throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
      t1.$indexSet(0, portId, port);
      this._updateGlobalState$0();
    },
    _updateGlobalState$0: function() {
      var t1 = this.id;
      if (this.ports._collection$_length - this.weakPorts._collection$_length > 0)
        init.globalState.isolates.$indexSet(0, t1, this);
      else
        init.globalState.isolates.remove$1(0, t1);
    }
  },
  _EventLoop: {
    "": "Object;events,activeTimerCount",
    dequeue$0: function() {
      var t1 = this.events;
      if (t1._head === t1._tail)
        return;
      return t1.removeFirst$0();
    },
    runIteration$0: function() {
      var $event, t1, t2;
      $event = this.dequeue$0();
      if ($event == null) {
        if (init.globalState.rootContext != null && init.globalState.isolates.containsKey$1(init.globalState.rootContext.id) && init.globalState.fromCommandLine === true && init.globalState.rootContext.ports._collection$_length === 0)
          H.throwExpression(P.Exception_Exception("Program exited with open ReceivePorts."));
        t1 = init.globalState;
        if (t1.isWorker === true && t1.isolates._collection$_length === 0 && t1.topEventLoop.activeTimerCount === 0) {
          t1 = t1.mainManager;
          t2 = H._serializeMessage(H.fillLiteralMap(["command", "close"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
          t1.toString;
          self.postMessage(t2);
        }
        return false;
      }
      $event.process$0();
      return true;
    },
    _runHelper$0: function() {
      if ($.get$globalWindow() != null)
        new H._EventLoop__runHelper_next(this).call$0();
      else
        for (; this.runIteration$0();)
          ;
    },
    run$0: function() {
      var e, trace, exception, t1, t2;
      if (init.globalState.isWorker !== true)
        this._runHelper$0();
      else
        try {
          this._runHelper$0();
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          trace = new H._StackTrace(exception, null);
          t1 = init.globalState.mainManager;
          t2 = H._serializeMessage(H.fillLiteralMap(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
          t1.toString;
          self.postMessage(t2);
        }

    }
  },
  _EventLoop__runHelper_next: {
    "": "Closure:0;this_0",
    call$0: function() {
      if (!this.this_0.runIteration$0())
        return;
      P.Timer_Timer(C.Duration_0, this);
    }
  },
  _IsolateEvent: {
    "": "Object;isolate,fn,message",
    process$0: function() {
      this.isolate.eval$1(this.fn);
    }
  },
  _MainManagerStub: {
    "": "Object;"
  },
  IsolateNatives__processWorkerMessage_closure: {
    "": "Closure:11;entryPoint_0,args_1,message_2,isSpawnUri_3,replyTo_4",
    call$0: function() {
      var t1, t2, t3, t4, t5, t6;
      t1 = this.entryPoint_0;
      t2 = this.args_1;
      t3 = this.message_2;
      t4 = init.globalState.currentContext.id;
      $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + t4);
      $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + t4);
      t4 = $.RawReceivePortImpl__nextFreeId;
      $.RawReceivePortImpl__nextFreeId = t4 + 1;
      t5 = new H.RawReceivePortImpl(t4, null, false);
      t6 = init.globalState.currentContext;
      t6.weakPorts.add$1(0, t4);
      t6.register$2(0, t4, t5);
      t4 = new H.ReceivePortImpl(t5, null);
      t4.ReceivePortImpl$fromRawReceivePort$1(t5);
      $.controlPort = t4;
      J.send$1$x(this.replyTo_4, ["spawned", new H._NativeJsSendPort(t5, init.globalState.currentContext.id)]);
      if (this.isSpawnUri_3 !== true)
        t1.call$1(t3);
      else {
        t4 = H.getDynamicRuntimeType();
        t5 = H.buildFunctionType(t4, [t4, t4])._isTest$1(t1);
        if (t5)
          t1.call$2(t2, t3);
        else {
          t3 = H.buildFunctionType(t4, [t4])._isTest$1(t1);
          if (t3)
            t1.call$1(t2);
          else
            t1.call$0();
        }
      }
    }
  },
  _BaseSendPort: {
    "": "Object;",
    $isSendPort: true
  },
  _NativeJsSendPort: {
    "": "_BaseSendPort;_receivePort,_isolateId",
    send$1: function(_, message) {
      var t1, t2, isolate, shouldSerialize, t3;
      t1 = {};
      t2 = this._isolateId;
      isolate = init.globalState.isolates.$index(0, t2);
      if (isolate == null)
        return;
      if (this._receivePort.get$_isClosed())
        return;
      shouldSerialize = init.globalState.currentContext != null && init.globalState.currentContext.id !== t2;
      t1.msg_0 = message;
      if (shouldSerialize)
        t1.msg_0 = H._serializeMessage(message);
      t2 = init.globalState.topEventLoop;
      t3 = "receive " + H.S(message);
      t2.events._add$1(new H._IsolateEvent(isolate, new H._NativeJsSendPort_send_closure(t1, this, shouldSerialize), t3));
    },
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      return typeof other === "object" && other !== null && !!t1.$is_NativeJsSendPort && J.$eq(this._receivePort, other._receivePort);
    },
    get$hashCode: function(_) {
      return this._receivePort.get$_id();
    },
    $is_NativeJsSendPort: true,
    $isSendPort: true
  },
  _NativeJsSendPort_send_closure: {
    "": "Closure:11;box_0,this_1,shouldSerialize_2",
    call$0: function() {
      var t1, t2;
      t1 = this.this_1._receivePort;
      if (!t1.get$_isClosed()) {
        if (this.shouldSerialize_2) {
          t2 = this.box_0;
          t2.msg_0 = H._deserializeMessage(t2.msg_0);
        }
        t1.__isolate_helper$_add$1(this.box_0.msg_0);
      }
    }
  },
  _WorkerSendPort: {
    "": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
    send$1: function(_, message) {
      var workerMessage, manager;
      workerMessage = H._serializeMessage(H.fillLiteralMap(["command", "message", "port", this, "msg", message], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
      if (init.globalState.isWorker === true) {
        init.globalState.mainManager.toString;
        self.postMessage(workerMessage);
      } else {
        manager = init.globalState.managers.$index(0, this._workerId);
        if (manager != null)
          manager.postMessage(workerMessage);
      }
    },
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      return typeof other === "object" && other !== null && !!t1.$is_WorkerSendPort && J.$eq(this._workerId, other._workerId) && J.$eq(this._isolateId, other._isolateId) && J.$eq(this._receivePortId, other._receivePortId);
    },
    get$hashCode: function(_) {
      var t1, t2, t3;
      t1 = this._workerId;
      if (typeof t1 !== "number")
        return t1.$shl();
      t2 = this._isolateId;
      if (typeof t2 !== "number")
        return t2.$shl();
      t3 = this._receivePortId;
      if (typeof t3 !== "number")
        return H.iae(t3);
      return (t1 << 16 ^ t2 << 8 ^ t3) >>> 0;
    },
    $is_WorkerSendPort: true,
    $isSendPort: true
  },
  RawReceivePortImpl: {
    "": "Object;_id<,_handler,_isClosed<",
    _handler$1: function(arg0) {
      return this._handler.call$1(arg0);
    },
    close$0: function(_) {
      var t1;
      if (this._isClosed)
        return;
      this._isClosed = true;
      this._handler = null;
      t1 = init.globalState.currentContext;
      t1.ports.remove$1(0, this._id);
      t1._updateGlobalState$0();
    },
    __isolate_helper$_add$1: function(dataEvent) {
      if (this._isClosed)
        return;
      this._handler$1(dataEvent);
    },
    static: {"": "RawReceivePortImpl__nextFreeId"}
  },
  ReceivePortImpl: {
    "": "Stream;_rawPort,_controller",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1 = this._controller;
      t1.toString;
      return H.setRuntimeTypeInfo(new P._ControllerStream(t1), [null]).listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
    },
    close$0: [function(_) {
      this._rawPort.close$0(0);
      this._controller.close$0(0);
    }, "call$0", "get$close", 0, 0, 0],
    ReceivePortImpl$fromRawReceivePort$1: function(_rawPort) {
      var t1 = P.StreamController_StreamController(this.get$close(this), null, null, null, true, null);
      this._controller = t1;
      this._rawPort._handler = t1.get$add(t1);
    },
    $asStream: function() {
      return [null];
    }
  },
  _JsSerializer: {
    "": "_Serializer;_nextFreeRefId,_visited",
    visitSendPort$1: function(x) {
      if (!!x.$is_NativeJsSendPort)
        return ["sendport", init.globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
      if (!!x.$is_WorkerSendPort)
        return ["sendport", x._workerId, x._isolateId, x._receivePortId];
      throw H.wrapException("Illegal underlying port " + H.S(x));
    }
  },
  _JsCopier: {
    "": "_Copier;_visited",
    visitSendPort$1: function(x) {
      if (!!x.$is_NativeJsSendPort)
        return new H._NativeJsSendPort(x._receivePort, x._isolateId);
      if (!!x.$is_WorkerSendPort)
        return new H._WorkerSendPort(x._workerId, x._receivePortId, x._isolateId);
      throw H.wrapException("Illegal underlying port " + H.S(x));
    }
  },
  _JsDeserializer: {
    "": "_Deserializer;_deserialized",
    deserializeSendPort$1: function(list) {
      var t1, managerId, isolateId, receivePortId, isolate, receivePort;
      t1 = J.getInterceptor$asx(list);
      managerId = t1.$index(list, 1);
      isolateId = t1.$index(list, 2);
      receivePortId = t1.$index(list, 3);
      if (J.$eq(managerId, init.globalState.currentManagerId)) {
        isolate = init.globalState.isolates.$index(0, isolateId);
        if (isolate == null)
          return;
        receivePort = isolate.lookup$1(receivePortId);
        if (receivePort == null)
          return;
        return new H._NativeJsSendPort(receivePort, isolateId);
      } else
        return new H._WorkerSendPort(managerId, receivePortId, isolateId);
    }
  },
  _JsVisitedMap: {
    "": "Object;tagged",
    $index: function(_, object) {
      return object.__MessageTraverser__attached_info__;
    },
    $indexSet: function(_, object, info) {
      this.tagged.push(object);
      object.__MessageTraverser__attached_info__ = info;
    },
    reset$0: function(_) {
      this.tagged = [];
    },
    cleanup$0: function() {
      var $length, i, t1;
      for ($length = this.tagged.length, i = 0; i < $length; ++i) {
        t1 = this.tagged;
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i].__MessageTraverser__attached_info__ = null;
      }
      this.tagged = null;
    }
  },
  _MessageTraverserVisitedMap: {
    "": "Object;",
    $index: function(_, object) {
      return;
    },
    $indexSet: function(_, object, info) {
    },
    reset$0: function(_) {
    },
    cleanup$0: function() {
      return;
    }
  },
  _MessageTraverser: {
    "": "Object;",
    traverse$1: function(x) {
      var result;
      if (H._MessageTraverser_isPrimitive(x))
        return this.visitPrimitive$1(x);
      this._visited.reset$0(0);
      result = null;
      try {
        result = this._dispatch$1(x);
      } finally {
        this._visited.cleanup$0();
      }
      return result;
    },
    _dispatch$1: function(x) {
      var t1;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return this.visitPrimitive$1(x);
      t1 = J.getInterceptor(x);
      if (typeof x === "object" && x !== null && (x.constructor === Array || !!t1.$isList))
        return this.visitList$1(x);
      if (typeof x === "object" && x !== null && !!t1.$isMap)
        return this.visitMap$1(x);
      if (typeof x === "object" && x !== null && !!t1.$isSendPort)
        return this.visitSendPort$1(x);
      return this.visitObject$1(x);
    },
    visitObject$1: function(x) {
      throw H.wrapException("Message serialization: Illegal value " + H.S(x) + " passed");
    }
  },
  _Copier: {
    "": "_MessageTraverser;",
    visitPrimitive$1: function(x) {
      return x;
    },
    visitList$1: function(list) {
      var copy, t1, len, i;
      copy = this._visited.$index(0, list);
      if (copy != null)
        return copy;
      t1 = J.getInterceptor$asx(list);
      len = t1.get$length(list);
      copy = Array(len);
      copy.fixed$length = init;
      this._visited.$indexSet(0, list, copy);
      for (i = 0; i < len; ++i)
        copy[i] = this._dispatch$1(t1.$index(list, i));
      return copy;
    },
    visitMap$1: function(map) {
      var t1, copy;
      t1 = {};
      copy = this._visited.$index(0, map);
      t1.copy_0 = copy;
      if (copy != null)
        return copy;
      copy = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t1.copy_0 = copy;
      this._visited.$indexSet(0, map, copy);
      map.forEach$1(0, new H._Copier_visitMap_closure(t1, this));
      return t1.copy_0;
    },
    visitSendPort$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    }
  },
  _Copier_visitMap_closure: {
    "": "Closure:12;box_0,this_1",
    call$2: function(key, val) {
      var t1 = this.this_1;
      J.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
    }
  },
  _Serializer: {
    "": "_MessageTraverser;",
    visitPrimitive$1: function(x) {
      return x;
    },
    visitList$1: function(list) {
      var copyId, id;
      copyId = this._visited.$index(0, list);
      if (copyId != null)
        return ["ref", copyId];
      id = this._nextFreeRefId;
      this._nextFreeRefId = id + 1;
      this._visited.$indexSet(0, list, id);
      return ["list", id, this._serializeList$1(list)];
    },
    visitMap$1: function(map) {
      var copyId, id;
      copyId = this._visited.$index(0, map);
      if (copyId != null)
        return ["ref", copyId];
      id = this._nextFreeRefId;
      this._nextFreeRefId = id + 1;
      this._visited.$indexSet(0, map, id);
      return ["map", id, this._serializeList$1(J.toList$0$ax(map.get$keys())), this._serializeList$1(J.toList$0$ax(map.get$values(map)))];
    },
    _serializeList$1: function(list) {
      var t1, len, result, i, t2;
      t1 = J.getInterceptor$asx(list);
      len = t1.get$length(list);
      result = [];
      C.JSArray_methods.set$length(result, len);
      for (i = 0; i < len; ++i) {
        t2 = this._dispatch$1(t1.$index(list, i));
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t2;
      }
      return result;
    },
    visitSendPort$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    }
  },
  _Deserializer: {
    "": "Object;",
    deserialize$1: function(x) {
      if (H._Deserializer_isPrimitive(x))
        return x;
      this._deserialized = P.HashMap_HashMap(null, null, null, null, null);
      return this._deserializeHelper$1(x);
    },
    _deserializeHelper$1: function(x) {
      var t1, id;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return x;
      t1 = J.getInterceptor$asx(x);
      switch (t1.$index(x, 0)) {
        case "ref":
          id = t1.$index(x, 1);
          return this._deserialized.$index(0, id);
        case "list":
          return this._deserializeList$1(x);
        case "map":
          return this._deserializeMap$1(x);
        case "sendport":
          return this.deserializeSendPort$1(x);
        default:
          return this.deserializeObject$1(x);
      }
    },
    _deserializeList$1: function(x) {
      var t1, id, dartList, len, i;
      t1 = J.getInterceptor$asx(x);
      id = t1.$index(x, 1);
      dartList = t1.$index(x, 2);
      this._deserialized.$indexSet(0, id, dartList);
      t1 = J.getInterceptor$asx(dartList);
      len = t1.get$length(dartList);
      if (typeof len !== "number")
        return H.iae(len);
      i = 0;
      for (; i < len; ++i)
        t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
      return dartList;
    },
    _deserializeMap$1: function(x) {
      var result, t1, id, keys, values, len, t2, i;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t1 = J.getInterceptor$asx(x);
      id = t1.$index(x, 1);
      this._deserialized.$indexSet(0, id, result);
      keys = t1.$index(x, 2);
      values = t1.$index(x, 3);
      t1 = J.getInterceptor$asx(keys);
      len = t1.get$length(keys);
      if (typeof len !== "number")
        return H.iae(len);
      t2 = J.getInterceptor$asx(values);
      i = 0;
      for (; i < len; ++i)
        result.$indexSet(0, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
      return result;
    },
    deserializeObject$1: function(x) {
      throw H.wrapException("Unexpected serialized object");
    }
  },
  TimerImpl: {
    "": "Object;_once,_inEventLoop,_handle",
    TimerImpl$periodic$2: function(milliseconds, callback) {
      var t1, t2;
      t1 = $.get$globalThis();
      if (t1.setTimeout != null) {
        t2 = init.globalState.topEventLoop;
        t2.activeTimerCount = t2.activeTimerCount + 1;
        this._handle = t1.setInterval(H.convertDartClosureToJS(new H.TimerImpl$periodic_closure(this, callback), 0), milliseconds);
      } else
        throw H.wrapException(P.UnsupportedError$("Periodic timer."));
    },
    TimerImpl$2: function(milliseconds, callback) {
      var t1, t2;
      if (milliseconds === 0)
        t1 = $.get$globalThis().setTimeout == null || init.globalState.isWorker === true;
      else
        t1 = false;
      if (t1) {
        this._handle = 1;
        t1 = init.globalState.topEventLoop;
        t2 = init.globalState.currentContext;
        t1.events._add$1(new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
        this._inEventLoop = true;
      } else {
        t1 = $.get$globalThis();
        if (t1.setTimeout != null) {
          t2 = init.globalState.topEventLoop;
          t2.activeTimerCount = t2.activeTimerCount + 1;
          this._handle = t1.setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
        } else
          throw H.wrapException(P.UnsupportedError$("Timer greater than 0."));
      }
    },
    static: {TimerImpl$: function(milliseconds, callback) {
        var t1 = new H.TimerImpl(true, false, null);
        t1.TimerImpl$2(milliseconds, callback);
        return t1;
      }, TimerImpl$periodic: function(milliseconds, callback) {
        var t1 = new H.TimerImpl(false, false, null);
        t1.TimerImpl$periodic$2(milliseconds, callback);
        return t1;
      }}
  },
  TimerImpl_internalCallback: {
    "": "Closure:0;this_0,callback_1",
    call$0: function() {
      this.this_0._handle = null;
      this.callback_1.call$0();
    }
  },
  TimerImpl_internalCallback0: {
    "": "Closure:0;this_2,callback_3",
    call$0: function() {
      this.this_2._handle = null;
      var t1 = init.globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount - 1;
      this.callback_3.call$0();
    }
  },
  TimerImpl$periodic_closure: {
    "": "Closure:11;this_0,callback_1",
    call$0: function() {
      this.callback_1.call$1(this.this_0);
    }
  }
}],
["_js_helper", "dart:_js_helper", , H, {
  "": "",
  isJsIndexable: function(object, record) {
    var result, t1;
    if (record != null) {
      result = record.x;
      if (result != null)
        return result;
    }
    t1 = J.getInterceptor(object);
    return typeof object === "object" && object !== null && !!t1.$isJavaScriptIndexingBehavior;
  },
  S: function(value) {
    var res;
    if (typeof value === "string")
      return value;
    if (typeof value === "number") {
      if (value !== 0)
        return "" + value;
    } else if (true === value)
      return "true";
    else if (false === value)
      return "false";
    else if (value == null)
      return "null";
    res = J.toString$0(value);
    if (typeof res !== "string")
      throw H.wrapException(P.ArgumentError$(value));
    return res;
  },
  Primitives_objectHashCode: function(object) {
    var hash = object.$identityHash;
    if (hash == null) {
      hash = Math.random() * 0x3fffffff | 0;
      object.$identityHash = hash;
    }
    return hash;
  },
  Primitives_objectTypeName: function(object) {
    var $name, decompiled;
    $name = C.JS_CONST_IX5(J.getInterceptor(object));
    if ($name === "Object") {
      decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
      if (typeof decompiled === "string")
        $name = decompiled;
    }
    if (J.getInterceptor$s($name).codeUnitAt$1($name, 0) === 36)
      $name = C.JSString_methods.substring$1($name, 1);
    return $name + H.joinArguments(H.getRuntimeTypeInfo(object), 0, null);
  },
  Primitives_objectToString: function(object) {
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  },
  Primitives_numMicroseconds: function() {
    if (typeof window != "undefined" && window !== null) {
      var performance = window.performance;
      if (performance != null && typeof performance.webkitNow == "function")
        return C.JSNumber_methods.toInt$0(Math.floor(1000 * performance.webkitNow()));
    }
    return 1000 * Date.now();
  },
  Primitives__fromCharCodeApply: function(array) {
    var end, t1, result, i, subarray, t2;
    end = array.length;
    for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
      if (t1)
        subarray = array;
      else {
        t2 = i + 500;
        t2 = t2 < end ? t2 : end;
        subarray = array.slice(i, t2);
      }
      result += String.fromCharCode.apply(null, subarray);
    }
    return result;
  },
  Primitives_stringFromCodePoints: function(codePoints) {
    var a, t1, i;
    a = [];
    a.$builtinTypeInfo = [J.JSInt];
    for (t1 = new H.ListIterator(codePoints, codePoints.length, 0, null); t1.moveNext$0();) {
      i = t1.__internal$_current;
      if (typeof i !== "number" || Math.floor(i) !== i)
        throw H.wrapException(P.ArgumentError$(i));
      if (i <= 65535)
        a.push(i);
      else if (i <= 1114111) {
        a.push(55296 + (C.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
        a.push(56320 + (i & 1023));
      } else
        throw H.wrapException(P.ArgumentError$(i));
    }
    return H.Primitives__fromCharCodeApply(a);
  },
  Primitives_stringFromCharCodes: function(charCodes) {
    var t1, i;
    for (t1 = new H.ListIterator(charCodes, charCodes.length, 0, null); t1.moveNext$0();) {
      i = t1.__internal$_current;
      if (typeof i !== "number" || Math.floor(i) !== i)
        throw H.wrapException(P.ArgumentError$(i));
      if (i < 0)
        throw H.wrapException(P.ArgumentError$(i));
      if (i > 65535)
        return H.Primitives_stringFromCodePoints(charCodes);
    }
    return H.Primitives__fromCharCodeApply(charCodes);
  },
  Primitives_getProperty: function(object, key) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(new P.ArgumentError(object));
    return object[key];
  },
  Primitives_setProperty: function(object, key, value) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(new P.ArgumentError(object));
    object[key] = value;
  },
  iae: function(argument) {
    throw H.wrapException(P.ArgumentError$(argument));
  },
  ioore: function(receiver, index) {
    if (receiver == null)
      J.get$length$asx(receiver);
    if (typeof index !== "number" || Math.floor(index) !== index)
      H.iae(index);
    throw H.wrapException(P.RangeError$value(index));
  },
  wrapException: function(ex) {
    var wrapper;
    if (ex == null)
      ex = new P.NullThrownError();
    wrapper = new Error();
    wrapper.dartException = ex;
    if ("defineProperty" in Object) {
      Object.defineProperty(wrapper, "message", { get: H.toStringWrapper });
      wrapper.name = "";
    } else
      wrapper.toString = H.toStringWrapper;
    return wrapper;
  },
  toStringWrapper: function() {
    return J.toString$0(this.dartException);
  },
  throwExpression: function(ex) {
    var wrapper;
    if (ex == null)
      ex = new P.NullThrownError();
    wrapper = new Error();
    wrapper.dartException = ex;
    if ("defineProperty" in Object) {
      Object.defineProperty(wrapper, "message", { get: H.toStringWrapper });
      wrapper.name = "";
    } else
      wrapper.toString = H.toStringWrapper;
    throw wrapper;
  },
  unwrapException: function(ex) {
    var t1, message, number, ieErrorCode, t2, t3, t4, nullLiteralCall, t5, t6, t7, t8, t9, match;
    t1 = new H.unwrapException_saveStackTrace(ex);
    if (ex == null)
      return;
    if (typeof ex !== "object")
      return ex;
    if ("dartException" in ex)
      return t1.call$1(ex.dartException);
    else if (!("message" in ex))
      return ex;
    message = ex.message;
    if ("number" in ex && typeof ex.number == "number") {
      number = ex.number;
      ieErrorCode = number & 65535;
      if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
        switch (ieErrorCode) {
          case 438:
            return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
          case 445:
          case 5007:
            t2 = H.S(message) + " (Error " + ieErrorCode + ")";
            return t1.call$1(new H.NullError(t2, null));
          default:
        }
    }
    if (ex instanceof TypeError) {
      t2 = $.get$TypeErrorDecoder_noSuchMethodPattern();
      t3 = $.get$TypeErrorDecoder_notClosurePattern();
      t4 = $.get$TypeErrorDecoder_nullCallPattern();
      nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
      t5 = $.get$TypeErrorDecoder_undefinedCallPattern();
      t6 = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
      t7 = $.get$TypeErrorDecoder_nullPropertyPattern();
      $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
      t8 = $.get$TypeErrorDecoder_undefinedPropertyPattern();
      t9 = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
      match = t2.matchTypeError$1(message);
      if (match != null)
        return t1.call$1(H.JsNoSuchMethodError$(message, match));
      else {
        match = t3.matchTypeError$1(message);
        if (match != null) {
          match.method = "call";
          return t1.call$1(H.JsNoSuchMethodError$(message, match));
        } else {
          match = t4.matchTypeError$1(message);
          if (match == null) {
            match = nullLiteralCall.matchTypeError$1(message);
            if (match == null) {
              match = t5.matchTypeError$1(message);
              if (match == null) {
                match = t6.matchTypeError$1(message);
                if (match == null) {
                  match = t7.matchTypeError$1(message);
                  if (match == null) {
                    match = nullLiteralCall.matchTypeError$1(message);
                    if (match == null) {
                      match = t8.matchTypeError$1(message);
                      if (match == null) {
                        match = t9.matchTypeError$1(message);
                        t2 = match != null;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
          } else
            t2 = true;
          if (t2) {
            t2 = match == null ? null : match.method;
            return t1.call$1(new H.NullError(message, t2));
          }
        }
      }
      t2 = typeof message === "string" ? message : "";
      return t1.call$1(new H.UnknownJsTypeError(t2));
    }
    if (ex instanceof RangeError) {
      if (typeof message === "string" && message.indexOf("call stack") !== -1)
        return new P.StackOverflowError();
      return t1.call$1(new P.ArgumentError(null));
    }
    if (typeof InternalError == "function" && ex instanceof InternalError)
      if (typeof message === "string" && message === "too much recursion")
        return new P.StackOverflowError();
    return ex;
  },
  objectHashCode: function(object) {
    if (object == null || typeof object != 'object')
      return J.get$hashCode$(object);
    else
      return H.Primitives_objectHashCode(object);
  },
  fillLiteralMap: function(keyValuePairs, result) {
    var $length, index, index0, index1;
    $length = keyValuePairs.length;
    for (index = 0; index < $length; index = index1) {
      index0 = index + 1;
      index1 = index0 + 1;
      result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
    }
    return result;
  },
  invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
    var t1 = J.getInterceptor(numberOfArguments);
    if (t1.$eq(numberOfArguments, 0))
      return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
    else if (t1.$eq(numberOfArguments, 1))
      return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
    else if (t1.$eq(numberOfArguments, 2))
      return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
    else if (t1.$eq(numberOfArguments, 3))
      return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
    else if (t1.$eq(numberOfArguments, 4))
      return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
    else
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
  },
  convertDartClosureToJS: function(closure, arity) {
    var $function;
    if (closure == null)
      return;
    $function = closure.$identity;
    if (!!$function)
      return $function;
    $function = (function(closure, arity, context, invoke) {  return function(a1, a2, a3, a4) {     return invoke(closure, context, arity, a1, a2, a3, a4);  };})(closure,arity,init.globalState.currentContext,H.invokeClosure);
    closure.$identity = $function;
    return $function;
  },
  Closure_fromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, propertyName) {
    var $function, callName, functionType, $prototype, $constructor, t1, isIntercepted, trampoline, signatureFunction, getReceiver, i, stub, stubCallName, t2;
    $function = functions[0];
    $function.$stubName;
    callName = $function.$callName;
    $function.$reflectionInfo = reflectionInfo;
    functionType = H.ReflectionInfo_ReflectionInfo($function).functionType;
    $prototype = isStatic ? Object.create(new H.TearOffClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, null).constructor.prototype);
    $prototype.$initialize = $prototype.constructor;
    if (isStatic)
      $constructor = function(){this.$initialize()};
    else if (typeof dart_precompiled == "function") {
      t1 = function(a,b,c,d) {this.$initialize(a,b,c,d)};
      $constructor = t1;
    } else {
      t1 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t1, 1);
      t1 = new Function("a", "b", "c", "d", "this.$initialize(a,b,c,d);" + t1);
      $constructor = t1;
    }
    $prototype.constructor = $constructor;
    $constructor.prototype = $prototype;
    t1 = !isStatic;
    if (t1) {
      isIntercepted = jsArguments.length == 1 && true;
      trampoline = H.Closure_forwardCallTo($function, isIntercepted);
    } else {
      $prototype.$name = propertyName;
      trampoline = $function;
      isIntercepted = false;
    }
    if (typeof functionType == "number")
      signatureFunction = (function(s){return function(){return init.metadata[s]}})(functionType);
    else if (t1 && typeof functionType == "function") {
      getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
      signatureFunction = function(f,r){return function(){return f.apply({$receiver:r(this)},arguments)}}(functionType,getReceiver);
    } else
      throw H.wrapException("Error in reflectionInfo.");
    $prototype.$signature = signatureFunction;
    $prototype[callName] = trampoline;
    for (t1 = functions.length, i = 1; i < t1; ++i) {
      stub = functions[i];
      stubCallName = stub.$callName;
      if (stubCallName != null) {
        t2 = isStatic ? stub : H.Closure_forwardCallTo(stub, isIntercepted);
        $prototype[stubCallName] = t2;
      }
    }
    $prototype["call*"] = $function;
    return $constructor;
  },
  Closure_cspForwardCall: function(arity, $function) {
    var getSelf = H.BoundClosure_selfOf;
    switch (arity) {
      case 0:
        return function(F,S){return function(){return F.call(S(this))}}($function,getSelf);
      case 1:
        return function(F,S){return function(a){return F.call(S(this),a)}}($function,getSelf);
      case 2:
        return function(F,S){return function(a,b){return F.call(S(this),a,b)}}($function,getSelf);
      case 3:
        return function(F,S){return function(a,b,c){return F.call(S(this),a,b,c)}}($function,getSelf);
      case 4:
        return function(F,S){return function(a,b,c,d){return F.call(S(this),a,b,c,d)}}($function,getSelf);
      case 5:
        return function(F,S){return function(a,b,c,d,e){return F.call(S(this),a,b,c,d,e)}}($function,getSelf);
      default:
        return function(f,s){return function(){return f.apply(s(this),arguments)}}($function,getSelf);
    }
  },
  Closure_forwardCallTo: function($function, isIntercepted) {
    var arity, t1, t2, $arguments;
    if (isIntercepted)
      return H.Closure_forwardInterceptedCallTo($function);
    arity = $function.length;
    if (typeof dart_precompiled == "function")
      return H.Closure_cspForwardCall(arity, $function);
    else if (arity === 0) {
      t1 = $.BoundClosure_selfFieldNameCache;
      if (t1 == null) {
        t1 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t1;
      }
      t1 = "return function(){return F.call(this." + H.S(t1) + ");";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function("F", t1 + H.S(t2) + "}")($function);
    } else if (1 <= arity && arity < 27) {
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
      t1 = "return function(" + $arguments + "){return F.call(this.";
      t2 = $.BoundClosure_selfFieldNameCache;
      if (t2 == null) {
        t2 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t2;
      }
      t2 = t1 + H.S(t2) + "," + $arguments + ");";
      t1 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t1, 1);
      return new Function("F", t2 + H.S(t1) + "}")($function);
    } else
      return H.Closure_cspForwardCall(arity, $function);
  },
  Closure_cspForwardInterceptedCall: function(arity, $name, $function) {
    var getSelf, getReceiver;
    getSelf = H.BoundClosure_selfOf;
    getReceiver = H.BoundClosure_receiverOf;
    switch (arity) {
      case 0:
        throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
      case 1:
        return function(n,s,r){return function(){return s(this)[n](r(this))}}($name,getSelf,getReceiver);
      case 2:
        return function(n,s,r){return function(a){return s(this)[n](r(this),a)}}($name,getSelf,getReceiver);
      case 3:
        return function(n,s,r){return function(a,b){return s(this)[n](r(this),a,b)}}($name,getSelf,getReceiver);
      case 4:
        return function(n,s,r){return function(a,b,c){return s(this)[n](r(this),a,b,c)}}($name,getSelf,getReceiver);
      case 5:
        return function(n,s,r){return function(a,b,c,d){return s(this)[n](r(this),a,b,c,d)}}($name,getSelf,getReceiver);
      case 6:
        return function(n,s,r){return function(a,b,c,d,e){return s(this)[n](r(this),a,b,c,d,e)}}($name,getSelf,getReceiver);
      default:
        return function(f,s,r,a){return function(){a=[r(this)];Array.prototype.push.apply(a,arguments);return f.apply(s(this),a)}}($function,getSelf,getReceiver);
    }
  },
  Closure_forwardInterceptedCallTo: function($function) {
    var stubName, arity, t1, t2, $arguments;
    stubName = $function.$stubName;
    arity = $function.length;
    if (typeof dart_precompiled == "function")
      return H.Closure_cspForwardInterceptedCall(arity, stubName, $function);
    else if (arity === 1) {
      t1 = "return this." + H.S(H.BoundClosure_selfFieldName()) + "." + stubName + "(this." + H.S(H.BoundClosure_receiverFieldName()) + ");";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2));
    } else if (1 < arity && arity < 28) {
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
      t1 = "return function(" + $arguments + "){return this." + H.S(H.BoundClosure_selfFieldName()) + "." + stubName + "(this." + H.S(H.BoundClosure_receiverFieldName()) + "," + $arguments + ");";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    } else
      return H.Closure_cspForwardInterceptedCall(arity, stubName, $function);
  },
  closureFromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, $name) {
    functions.fixed$length = init;
    reflectionInfo.fixed$length = init;
    return H.Closure_fromTearOff(receiver, functions, reflectionInfo, !!isStatic, jsArguments, $name);
  },
  propertyTypeCastError: function(value, property) {
    var t1 = J.getInterceptor$asx(property);
    throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
  },
  interceptedTypeCast: function(value, property) {
    var t1;
    if (value != null)
      t1 = typeof value === "object" && J.getInterceptor(value)[property];
    else
      t1 = true;
    if (t1)
      return value;
    H.propertyTypeCastError(value, property);
  },
  throwCyclicInit: function(staticName) {
    throw H.wrapException(P.CyclicInitializationError$("Cyclic initialization for static " + H.S(staticName)));
  },
  buildFunctionType: function(returnType, parameterTypes, optionalParameterTypes) {
    return new H.RuntimeFunctionType(returnType, parameterTypes, optionalParameterTypes, null);
  },
  getDynamicRuntimeType: function() {
    return C.C_DynamicRuntimeType;
  },
  createRuntimeType: function($name) {
    return new H.TypeImpl($name, null);
  },
  setRuntimeTypeInfo: function(target, typeInfo) {
    if (target != null)
      target.$builtinTypeInfo = typeInfo;
    return target;
  },
  getRuntimeTypeInfo: function(target) {
    if (target == null)
      return;
    return target.$builtinTypeInfo;
  },
  getRuntimeTypeArguments: function(target, substitutionName) {
    return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
  },
  getRuntimeTypeArgument: function(target, substitutionName, index) {
    var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
    return $arguments == null ? null : $arguments[index];
  },
  getTypeArgumentByIndex: function(target, index) {
    var rti = H.getRuntimeTypeInfo(target);
    return rti == null ? null : rti[index];
  },
  runtimeTypeToString: function(type, onTypeVariable) {
    if (type == null)
      return "dynamic";
    else if (typeof type === "object" && type !== null && type.constructor === Array)
      return type[0].builtin$cls + H.joinArguments(type, 1, onTypeVariable);
    else if (typeof type == "function")
      return type.builtin$cls;
    else if (typeof type === "number" && Math.floor(type) === type)
      return C.JSInt_methods.toString$0(type);
    else
      return;
  },
  joinArguments: function(types, startIndex, onTypeVariable) {
    var buffer, index, firstArgument, allDynamic, argument, str;
    if (types == null)
      return "";
    buffer = P.StringBuffer$("");
    for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
      if (firstArgument)
        firstArgument = false;
      else
        buffer._contents = buffer._contents + ", ";
      argument = types[index];
      if (argument != null)
        allDynamic = false;
      str = H.runtimeTypeToString(argument, onTypeVariable);
      str = typeof str === "string" ? str : H.S(str);
      buffer._contents = buffer._contents + str;
    }
    return allDynamic ? "" : "<" + H.S(buffer) + ">";
  },
  substitute: function(substitution, $arguments) {
    if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
      $arguments = substitution;
    else if (typeof substitution == "function") {
      substitution = H.invokeOn(substitution, null, $arguments);
      if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
        $arguments = substitution;
      else if (typeof substitution == "function")
        $arguments = H.invokeOn(substitution, null, $arguments);
    }
    return $arguments;
  },
  areSubtypes: function(s, t) {
    var len, i;
    if (s == null || t == null)
      return true;
    len = s.length;
    for (i = 0; i < len; ++i)
      if (!H.isSubtype(s[i], t[i]))
        return false;
    return true;
  },
  computeSignature: function(signature, context, contextName) {
    return H.invokeOn(signature, context, H.getRuntimeTypeArguments(context, contextName));
  },
  isSubtype: function(s, t) {
    var targetSignatureFunction, t1, typeOfS, t2, typeOfT, $name, substitution;
    if (s === t)
      return true;
    if (s == null || t == null)
      return true;
    if ("func" in t) {
      if (!("func" in s)) {
        if ("$is_" + H.S(t.func) in s)
          return true;
        targetSignatureFunction = s.$signature;
        if (targetSignatureFunction == null)
          return false;
        s = targetSignatureFunction.apply(s, null);
      }
      return H.isFunctionSubtype(s, t);
    }
    if (t.builtin$cls === "Function" && "func" in s)
      return true;
    t1 = typeof s === "object" && s !== null && s.constructor === Array;
    typeOfS = t1 ? s[0] : s;
    t2 = typeof t === "object" && t !== null && t.constructor === Array;
    typeOfT = t2 ? t[0] : t;
    $name = H.runtimeTypeToString(typeOfT, null);
    if (typeOfT !== typeOfS) {
      if (!("$is" + H.S($name) in typeOfS))
        return false;
      substitution = typeOfS["$as" + H.S(H.runtimeTypeToString(typeOfT, null))];
    } else
      substitution = null;
    if (!t1 && substitution == null || !t2)
      return true;
    t1 = t1 ? s.slice(1) : null;
    t2 = t2 ? t.slice(1) : null;
    return H.areSubtypes(H.substitute(substitution, t1), t2);
  },
  areAssignable: function(s, t, allowShorter) {
    var sLength, tLength, i, t1, t2;
    if (t == null && s == null)
      return true;
    if (t == null)
      return allowShorter;
    if (s == null)
      return false;
    sLength = s.length;
    tLength = t.length;
    if (allowShorter) {
      if (sLength < tLength)
        return false;
    } else if (sLength !== tLength)
      return false;
    for (i = 0; i < tLength; ++i) {
      t1 = s[i];
      t2 = t[i];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
    return true;
  },
  areAssignableMaps: function(s, t) {
    var t1, names, i, $name, tType, sType;
    if (t == null)
      return true;
    if (s == null)
      return false;
    t1 = Object.getOwnPropertyNames(t);
    t1.fixed$length = init;
    names = t1;
    for (t1 = names.length, i = 0; i < t1; ++i) {
      $name = names[i];
      if (!Object.hasOwnProperty.call(s, $name))
        return false;
      tType = t[$name];
      sType = s[$name];
      if (!(H.isSubtype(tType, sType) || H.isSubtype(sType, tType)))
        return false;
    }
    return true;
  },
  isFunctionSubtype: function(s, t) {
    var sReturnType, tReturnType, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, t1, t2, tPos, sPos;
    if (!("func" in s))
      return false;
    if ("void" in s) {
      if (!("void" in t) && "ret" in t)
        return false;
    } else if (!("void" in t)) {
      sReturnType = s.ret;
      tReturnType = t.ret;
      if (!(H.isSubtype(sReturnType, tReturnType) || H.isSubtype(tReturnType, sReturnType)))
        return false;
    }
    sParameterTypes = s.args;
    tParameterTypes = t.args;
    sOptionalParameterTypes = s.opt;
    tOptionalParameterTypes = t.opt;
    sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
    tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
    sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
    tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
    if (sParametersLen > tParametersLen)
      return false;
    if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
      return false;
    if (sParametersLen === tParametersLen) {
      if (!H.areAssignable(sParameterTypes, tParameterTypes, false))
        return false;
      if (!H.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
        return false;
    } else {
      for (pos = 0; pos < sParametersLen; ++pos) {
        t1 = sParameterTypes[pos];
        t2 = tParameterTypes[pos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tOptionalParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
    }
    return H.areAssignableMaps(s.named, t.named);
  },
  invokeOn: function($function, receiver, $arguments) {
    return $function.apply(receiver, $arguments);
  },
  toStringForNativeObject: function(obj) {
    var t1 = $.getTagFunction;
    return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
  },
  hashCodeForNativeObject: function(object) {
    return H.Primitives_objectHashCode(object);
  },
  defineProperty: function(obj, property, value) {
    Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
  },
  lookupAndCacheInterceptor: function(obj) {
    var tag, record, interceptor, interceptorClass, mark, t1;
    tag = $.getTagFunction.call$1(obj);
    record = $.dispatchRecordsForInstanceTags[tag];
    if (record != null) {
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    interceptor = $.interceptorsForUncacheableTags[tag];
    if (interceptor != null)
      return interceptor;
    interceptorClass = init.interceptorsByTag[tag];
    if (interceptorClass == null) {
      tag = $.alternateTagFunction.call$2(obj, tag);
      if (tag != null) {
        record = $.dispatchRecordsForInstanceTags[tag];
        if (record != null) {
          Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
          return record.i;
        }
        interceptor = $.interceptorsForUncacheableTags[tag];
        if (interceptor != null)
          return interceptor;
        interceptorClass = init.interceptorsByTag[tag];
      }
    }
    if (interceptorClass == null)
      return;
    interceptor = interceptorClass.prototype;
    mark = tag[0];
    if (mark === "!") {
      record = H.makeLeafDispatchRecord(interceptor);
      $.dispatchRecordsForInstanceTags[tag] = record;
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    if (mark === "~") {
      $.interceptorsForUncacheableTags[tag] = interceptor;
      return interceptor;
    }
    if (mark === "-") {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    }
    if (mark === "+")
      return H.patchInteriorProto(obj, interceptor);
    if (mark === "*")
      throw H.wrapException(P.UnimplementedError$(tag));
    if (init.leafTags[tag] === true) {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    } else
      return H.patchInteriorProto(obj, interceptor);
  },
  patchInteriorProto: function(obj, interceptor) {
    var proto, record;
    proto = Object.getPrototypeOf(obj);
    record = J.makeDispatchRecord(interceptor, proto, null, null);
    Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
    return interceptor;
  },
  makeLeafDispatchRecord: function(interceptor) {
    return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  },
  makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
    var interceptor = interceptorClass.prototype;
    if (init.leafTags[tag] === true)
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    else
      return J.makeDispatchRecord(interceptor, proto, null, null);
  },
  initNativeDispatch: function() {
    if (true === $.initNativeDispatchFlag)
      return;
    $.initNativeDispatchFlag = true;
    H.initNativeDispatchContinue();
  },
  initNativeDispatchContinue: function() {
    var map, tags, i, tag, proto, record, interceptorClass;
    $.dispatchRecordsForInstanceTags = Object.create(null);
    $.interceptorsForUncacheableTags = Object.create(null);
    H.initHooks();
    map = init.interceptorsByTag;
    tags = Object.getOwnPropertyNames(map);
    if (typeof window != "undefined") {
      window;
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        proto = $.prototypeForTagFunction.call$1(tag);
        if (proto != null) {
          record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
          if (record != null)
            Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        }
      }
    }
    for (i = 0; i < tags.length; ++i) {
      tag = tags[i];
      if (/^[A-Za-z_]/.test(tag)) {
        interceptorClass = map[tag];
        map["!" + tag] = interceptorClass;
        map["~" + tag] = interceptorClass;
        map["-" + tag] = interceptorClass;
        map["+" + tag] = interceptorClass;
        map["*" + tag] = interceptorClass;
      }
    }
  },
  initHooks: function() {
    var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
    hooks = C.JS_CONST_aQP();
    hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_rr7, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_gkc, H.applyHooksTransformer(C.JS_CONST_U4w, H.applyHooksTransformer(C.JS_CONST_QJm(C.JS_CONST_IX5), hooks)))))));
    if (typeof dartNativeDispatchHooksTransformer != "undefined") {
      transformers = dartNativeDispatchHooksTransformer;
      if (typeof transformers == "function")
        transformers = [transformers];
      if (transformers.constructor == Array)
        for (i = 0; i < transformers.length; ++i) {
          transformer = transformers[i];
          if (typeof transformer == "function")
            hooks = transformer(hooks) || hooks;
        }
    }
    getTag = hooks.getTag;
    getUnknownTag = hooks.getUnknownTag;
    prototypeForTag = hooks.prototypeForTag;
    $.getTagFunction = new H.initHooks_closure(getTag);
    $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
    $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
  },
  applyHooksTransformer: function(transformer, hooks) {
    return transformer(hooks) || hooks;
  },
  ReflectionInfo: {
    "": "Object;jsFunction,data,isAccessor,requiredParameterCount,optionalParameterCount,areOptionalParametersNamed,functionType",
    static: {"": "ReflectionInfo_REQUIRED_PARAMETERS_INFO,ReflectionInfo_OPTIONAL_PARAMETERS_INFO,ReflectionInfo_FUNCTION_TYPE_INDEX,ReflectionInfo_FIRST_DEFAULT_ARGUMENT", ReflectionInfo_ReflectionInfo: function(jsFunction) {
        var data, requiredParametersInfo, requiredParameterCount, optionalParametersInfo;
        data = jsFunction.$reflectionInfo;
        if (data == null)
          return;
        data.fixed$length = init;
        data = data;
        requiredParametersInfo = data[0];
        requiredParameterCount = requiredParametersInfo >> 1;
        optionalParametersInfo = data[1];
        return new H.ReflectionInfo(jsFunction, data, (requiredParametersInfo & 1) === 1, requiredParameterCount, optionalParametersInfo >> 1, (optionalParametersInfo & 1) === 1, data[2]);
      }}
  },
  TypeErrorDecoder: {
    "": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
    matchTypeError$1: function(message) {
      var match, result, t1;
      match = new RegExp(this._pattern).exec(message);
      if (match == null)
        return;
      result = {};
      t1 = this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    },
    static: {"": "TypeErrorDecoder_noSuchMethodPattern,TypeErrorDecoder_notClosurePattern,TypeErrorDecoder_nullCallPattern,TypeErrorDecoder_nullLiteralCallPattern,TypeErrorDecoder_undefinedCallPattern,TypeErrorDecoder_undefinedLiteralCallPattern,TypeErrorDecoder_nullPropertyPattern,TypeErrorDecoder_nullLiteralPropertyPattern,TypeErrorDecoder_undefinedPropertyPattern,TypeErrorDecoder_undefinedLiteralPropertyPattern", TypeErrorDecoder_extractPattern: function(message) {
        var match, $arguments, argumentsExpr, expr, method, receiver;
        message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
        match = message.match(/\\\$[a-zA-Z]+\\\$/g);
        if (match == null)
          match = [];
        $arguments = match.indexOf("\\$arguments\\$");
        argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
        expr = match.indexOf("\\$expr\\$");
        method = match.indexOf("\\$method\\$");
        receiver = match.indexOf("\\$receiver\\$");
        return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
      }, TypeErrorDecoder_provokeCallErrorOn: function(expression) {
        return function($expr$) {
  var $argumentsExpr$ = '$arguments$'
  try {
    $expr$.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}(expression);
      }, TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
        return function($expr$) {
  try {
    $expr$.$method$;
  } catch (e) {
    return e.message;
  }
}(expression);
      }}
  },
  NullError: {
    "": "Error;_message,_method",
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NullError: " + H.S(this._message);
      return "NullError: Cannot call \"" + H.S(t1) + "\" on null";
    },
    $isError: true
  },
  JsNoSuchMethodError: {
    "": "Error;_message,_method,_receiver",
    toString$0: function(_) {
      var t1, t2;
      t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this._message);
      t2 = this._receiver;
      if (t2 == null)
        return "NoSuchMethodError: Cannot call \"" + t1 + "\" (" + H.S(this._message) + ")";
      return "NoSuchMethodError: Cannot call \"" + t1 + "\" on \"" + t2 + "\" (" + H.S(this._message) + ")";
    },
    $isError: true,
    static: {JsNoSuchMethodError$: function(_message, match) {
        var t1, t2;
        t1 = match == null;
        t2 = t1 ? null : match.method;
        t1 = t1 ? null : match.receiver;
        return new H.JsNoSuchMethodError(_message, t2, t1);
      }}
  },
  UnknownJsTypeError: {
    "": "Error;_message",
    toString$0: function(_) {
      var t1 = this._message;
      return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
    }
  },
  unwrapException_saveStackTrace: {
    "": "Closure:13;ex_0",
    call$1: function(error) {
      var t1 = J.getInterceptor(error);
      if (typeof error === "object" && error !== null && !!t1.$isError)
        if (error.$thrownJsError == null)
          error.$thrownJsError = this.ex_0;
      return error;
    }
  },
  _StackTrace: {
    "": "Object;_exception,_trace",
    toString$0: function(_) {
      var t1, trace;
      t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = typeof t1 === "object" ? t1.stack : null;
      t1 = trace == null ? "" : trace;
      this._trace = t1;
      return t1;
    }
  },
  invokeClosure_closure: {
    "": "Closure:11;closure_0",
    call$0: function() {
      return this.closure_0.call$0();
    }
  },
  invokeClosure_closure0: {
    "": "Closure:11;closure_1,arg1_2",
    call$0: function() {
      return this.closure_1.call$1(this.arg1_2);
    }
  },
  invokeClosure_closure1: {
    "": "Closure:11;closure_3,arg1_4,arg2_5",
    call$0: function() {
      return this.closure_3.call$2(this.arg1_4, this.arg2_5);
    }
  },
  invokeClosure_closure2: {
    "": "Closure:11;closure_6,arg1_7,arg2_8,arg3_9",
    call$0: function() {
      return this.closure_6.call$3(this.arg1_7, this.arg2_8, this.arg3_9);
    }
  },
  invokeClosure_closure3: {
    "": "Closure:11;closure_10,arg1_11,arg2_12,arg3_13,arg4_14",
    call$0: function() {
      return this.closure_10.call$4(this.arg1_11, this.arg2_12, this.arg3_13, this.arg4_14);
    }
  },
  Closure: {
    "": "Object;",
    toString$0: function(_) {
      return "Closure";
    }
  },
  TearOffClosure: {
    "": "Closure;"
  },
  BoundClosure: {
    "": "TearOffClosure;_self,_target,_receiver,__js_helper$_name",
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      t1 = J.getInterceptor(other);
      if (typeof other !== "object" || other === null || !t1.$isBoundClosure)
        return false;
      return this._self === other._self && this._target === other._target && this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var t1, receiverHashCode;
      t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      return (receiverHashCode ^ H.Primitives_objectHashCode(this._target)) >>> 0;
    },
    $isBoundClosure: true,
    static: {"": "BoundClosure_selfFieldNameCache,BoundClosure_receiverFieldNameCache", BoundClosure_selfOf: function(closure) {
        return closure._self;
      }, BoundClosure_receiverOf: function(closure) {
        return closure._receiver;
      }, BoundClosure_selfFieldName: function() {
        var t1 = $.BoundClosure_selfFieldNameCache;
        if (t1 == null) {
          t1 = H.BoundClosure_computeFieldNamed("self");
          $.BoundClosure_selfFieldNameCache = t1;
        }
        return t1;
      }, BoundClosure_receiverFieldName: function() {
        var t1 = $.BoundClosure_receiverFieldNameCache;
        if (t1 == null) {
          t1 = H.BoundClosure_computeFieldNamed("receiver");
          $.BoundClosure_receiverFieldNameCache = t1;
        }
        return t1;
      }, BoundClosure_computeFieldNamed: function(fieldName) {
        var template, t1, names, i, $name;
        template = new H.BoundClosure("self", "target", "receiver", "name");
        t1 = Object.getOwnPropertyNames(template);
        t1.fixed$length = init;
        names = t1;
        for (t1 = names.length, i = 0; i < t1; ++i) {
          $name = names[i];
          if (template[$name] === fieldName)
            return $name;
        }
      }}
  },
  CastErrorImplementation: {
    "": "Error;message",
    toString$0: function(_) {
      return this.message;
    },
    $isError: true,
    static: {CastErrorImplementation$: function(actualType, expectedType) {
        return new H.CastErrorImplementation("CastError: Casting value of type " + actualType + " to incompatible type " + H.S(expectedType));
      }}
  },
  RuntimeError: {
    "": "Error;message",
    toString$0: function(_) {
      return "RuntimeError: " + H.S(this.message);
    },
    static: {RuntimeError$: function(message) {
        return new H.RuntimeError(message);
      }}
  },
  RuntimeType: {
    "": "Object;"
  },
  RuntimeFunctionType: {
    "": "RuntimeType;returnType,parameterTypes,optionalParameterTypes,namedParameters",
    _isTest$1: function(expression) {
      var functionTypeObject = this._extractFunctionTypeObjectFrom$1(expression);
      return functionTypeObject == null ? false : H.isFunctionSubtype(functionTypeObject, this.toRti$0());
    },
    _extractFunctionTypeObjectFrom$1: function(o) {
      var interceptor = J.getInterceptor(o);
      return "$signature" in interceptor ? interceptor.$signature() : null;
    },
    toRti$0: function() {
      var result, t1, t2, namedRti, keys, i, $name;
      result = { "func": "dynafunc" };
      t1 = this.returnType;
      t2 = J.getInterceptor(t1);
      if (typeof t1 === "object" && t1 !== null && !!t2.$isVoidRuntimeType)
        result.void = true;
      else if (typeof t1 !== "object" || t1 === null || !t2.$isDynamicRuntimeType)
        result.ret = t1.toRti$0();
      t1 = this.parameterTypes;
      if (t1 != null && t1.length !== 0)
        result.args = H.RuntimeFunctionType_listToRti(t1);
      t1 = this.optionalParameterTypes;
      if (t1 != null && t1.length !== 0)
        result.opt = H.RuntimeFunctionType_listToRti(t1);
      t1 = this.namedParameters;
      if (t1 != null) {
        namedRti = {};
        keys = H.extractKeys(t1);
        for (t2 = keys.length, i = 0; i < t2; ++i) {
          $name = keys[i];
          namedRti[$name] = t1[$name].toRti$0();
        }
        result.named = namedRti;
      }
      return result;
    },
    toString$0: function(_) {
      var t1, t2, result, needsComma, i, type, keys, $name;
      t1 = this.parameterTypes;
      if (t1 != null)
        for (t2 = t1.length, result = "(", needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
          type = t1[i];
          if (needsComma)
            result += ", ";
          result += H.S(type);
        }
      else {
        result = "(";
        needsComma = false;
      }
      t1 = this.optionalParameterTypes;
      if (t1 != null && t1.length !== 0) {
        result = (needsComma ? result + ", " : result) + "[";
        for (t2 = t1.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
          type = t1[i];
          if (needsComma)
            result += ", ";
          result += H.S(type);
        }
        result += "]";
      } else {
        t1 = this.namedParameters;
        if (t1 != null) {
          result = (needsComma ? result + ", " : result) + "{";
          keys = H.extractKeys(t1);
          for (t2 = keys.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
            $name = keys[i];
            if (needsComma)
              result += ", ";
            result += H.S(t1[$name].toRti$0()) + " " + $name;
          }
          result += "}";
        }
      }
      return result + (") -> " + H.S(this.returnType));
    },
    static: {"": "RuntimeFunctionType_inAssert", RuntimeFunctionType_listToRti: function(list) {
        var result, t1, i;
        list = list;
        result = [];
        for (t1 = list.length, i = 0; i < t1; ++i)
          result.push(list[i].toRti$0());
        return result;
      }}
  },
  DynamicRuntimeType: {
    "": "RuntimeType;",
    toString$0: function(_) {
      return "dynamic";
    },
    toRti$0: function() {
      return;
    },
    $isDynamicRuntimeType: true
  },
  TypeImpl: {
    "": "Object;_typeName,_unmangledName",
    toString$0: function(_) {
      var t1, unmangledName, unmangledName0;
      t1 = this._unmangledName;
      if (t1 != null)
        return t1;
      unmangledName = this._typeName;
      unmangledName0 = init.mangledGlobalNames[unmangledName];
      unmangledName = unmangledName0 == null ? unmangledName : unmangledName0;
      this._unmangledName = unmangledName;
      return unmangledName;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this._typeName);
    },
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      return typeof other === "object" && other !== null && !!t1.$isTypeImpl && J.$eq(this._typeName, other._typeName);
    },
    $isTypeImpl: true
  },
  initHooks_closure: {
    "": "Closure:13;getTag_0",
    call$1: function(o) {
      return this.getTag_0(o);
    }
  },
  initHooks_closure0: {
    "": "Closure:14;getUnknownTag_1",
    call$2: function(o, tag) {
      return this.getUnknownTag_1(o, tag);
    }
  },
  initHooks_closure1: {
    "": "Closure:15;prototypeForTag_2",
    call$1: function(tag) {
      return this.prototypeForTag_2(tag);
    }
  }
}],
["box2d", "package:box2d/box2d.dart", , V, {
  "": "",
  MathBox_distanceSquared: function(v1, v2) {
    var t1, t2, dx, dy;
    t1 = v1.storage;
    t2 = v2.storage;
    dx = t1[0] - t2[0];
    dy = t1[1] - t2[1];
    return dx * dx + dy * dy;
  },
  Vector2_crossVectorAndNumToOut: function(a, s, out) {
    var t1, t2, t3;
    t1 = a.storage;
    t2 = t1[0];
    t3 = out.storage;
    t3[0] = s * t1[1];
    t3[1] = -s * t2;
  },
  Matrix3_solve22ToOut: function(a, b, out) {
    var t1, a11, a12, a21, a22, det, t2, t3, t4;
    t1 = a.storage;
    a11 = t1[0];
    a12 = t1[3];
    a21 = t1[1];
    a22 = t1[4];
    det = a11 * a22 - a12 * a21;
    if (det !== 0)
      det = 1 / det;
    t1 = b.storage;
    t2 = t1[0];
    t3 = t1[1];
    t4 = out.storage;
    t4[0] = det * (a22 * t2 - a12 * t3);
    t4[1] = det * (a11 * t3 - a21 * t1[0]);
  },
  ContactFilter: {
    "": "Object;",
    shouldCollide$2: function(fixtureA, fixtureB) {
      var filterA, filterB, t1;
      filterA = fixtureA.get$filter();
      filterB = fixtureB.get$filter();
      t1 = filterA.groupIndex;
      if (t1 !== 0 && t1 === filterB.groupIndex)
        return t1 > 0;
      return (filterA.maskBits & filterB.categoryBits) !== 0 && (filterA.categoryBits & filterB.maskBits) !== 0;
    }
  },
  ContactImpulse: {
    "": "Object;normalImpulses,tangentImpulses"
  },
  DebugDraw: {
    "": "Object;"
  },
  AxisAlignedBox: {
    "": "Object;lowerBound<,upperBound",
    setFromCombination$2: function(boxOne, boxTwo) {
      var t1, t2;
      t1 = this.lowerBound;
      t2 = P.min(boxOne.lowerBound.storage[0], boxTwo.lowerBound.storage[0]);
      t1.storage[0] = t2;
      t2 = this.lowerBound;
      t1 = P.min(boxOne.lowerBound.storage[1], boxTwo.lowerBound.storage[1]);
      t2.storage[1] = t1;
      t1 = this.upperBound;
      t2 = P.max(boxOne.upperBound.storage[0], boxTwo.upperBound.storage[0]);
      t1.storage[0] = t2;
      t2 = this.upperBound;
      t1 = P.max(boxOne.upperBound.storage[1], boxTwo.upperBound.storage[1]);
      t2.storage[1] = t1;
    },
    contains$1: function(_, aabb) {
      var t1, t2, t3;
      t1 = this.lowerBound.storage;
      t2 = t1[0];
      t3 = aabb.lowerBound.storage;
      if (t2 > t3[0])
        if (t1[1] > t3[1]) {
          t1 = this.upperBound.storage;
          t2 = t1[1];
          t3 = aabb.upperBound.storage;
          t1 = t2 < t3[1] && t1[0] < t3[0];
        } else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    setFrom$1: function(other) {
      this.lowerBound.setFrom$1(other.get$lowerBound());
      this.upperBound.setFrom$1(other.upperBound);
    },
    toString$0: function(_) {
      return H.S(this.lowerBound) + ", " + H.S(this.upperBound);
    },
    AxisAlignedBox$2: function(lowerBound, upperBound) {
      if (this.lowerBound == null)
        this.lowerBound = new T.Vector2(new Float32Array(2));
      if (this.upperBound == null)
        this.upperBound = new T.Vector2(new Float32Array(2));
    },
    static: {AxisAlignedBox$: function(lowerBound, upperBound) {
        var t1 = new V.AxisAlignedBox(lowerBound, upperBound);
        t1.AxisAlignedBox$2(lowerBound, upperBound);
        return t1;
      }, AxisAlignedBox_testOverlap: function(a, b) {
        var t1, t2, t3;
        t1 = b.lowerBound.storage;
        t2 = t1[0];
        t3 = a.upperBound.storage;
        if (!(t2 > t3[0] || t1[1] > t3[1])) {
          t1 = a.lowerBound.storage;
          t2 = t1[0];
          t3 = b.upperBound.storage;
          t1 = t2 > t3[0] || t1[1] > t3[1];
        } else
          t1 = true;
        return !t1;
      }}
  },
  BroadPhase: {
    "": "Object;_tree,proxyCount,moveBuffer,_pairBuffer,_pairCapacity,_pairCount,queryProxy",
    updatePairs$1: function(callback) {
      var t1, i, t2, t3, pairBuffer, primaryPair, pair, t4, t5;
      this._pairCount = 0;
      for (t1 = this._tree, i = 0; t2 = this.moveBuffer, i < t2.length; ++i) {
        t2 = t2[i];
        this.queryProxy = t2;
        if (t2 == null)
          continue;
        t1._query$4(this, t2.box, t1._root, 1);
      }
      this.moveBuffer = H.setRuntimeTypeInfo([], [V.DynamicTreeNode]);
      t2 = this._pairBuffer;
      t3 = this._pairCount;
      t2.toString;
      H.IterableMixinWorkaround__rangeCheck(t2, 0, t3);
      pairBuffer = P.List_List$from(H.SubListIterable$(t2, 0, t3, null), true, null);
      H.Sort__doSort(pairBuffer, 0, pairBuffer.length - 1, new V.BroadPhase_updatePairs_closure());
      t2 = this._pairBuffer;
      t3 = this._pairCount;
      t2.toString;
      if (typeof t2 !== "object" || t2 === null || !!t2.immutable$list)
        H.throwExpression(P.UnsupportedError$("set range"));
      H.IterableMixinWorkaround_setRangeList(t2, 0, t3, pairBuffer, 0);
      for (i = 0; i < this._pairCount;) {
        t2 = this._pairBuffer;
        if (i < 0 || i >= t2.length)
          return H.ioore(t2, i);
        primaryPair = t2[i];
        callback.call$2(primaryPair.get$proxyA().get$userData(), primaryPair.get$proxyB().get$userData());
        ++i;
        for (t2 = this._pairCount, t3 = this._pairBuffer; i < t2;) {
          if (i >= t3.length)
            return H.ioore(t3, i);
          pair = t3[i];
          t4 = pair.get$proxyA();
          t5 = primaryPair.get$proxyA();
          if (t4 == null ? t5 == null : t4 === t5) {
            t4 = pair.get$proxyB();
            t5 = primaryPair.get$proxyB();
            t5 = t4 == null ? t5 != null : t4 !== t5;
            t4 = t5;
          } else
            t4 = true;
          if (t4)
            break;
          ++i;
        }
      }
      t1.rebalance$1(4);
    },
    treeCallback$1: function(proxy) {
      var t1, t2, oldBuffer, i, i0, t3, t4, t5;
      if (proxy === this.queryProxy)
        return true;
      t1 = this._pairCount;
      t2 = this._pairCapacity;
      if (t1 === t2) {
        oldBuffer = this._pairBuffer;
        if (typeof t2 !== "number")
          return t2.$mul();
        t1 = t2 * 2;
        this._pairCapacity = t1;
        t1 = Array(t1);
        t1.fixed$length = init;
        t1 = H.setRuntimeTypeInfo(t1, [V.Pair]);
        this._pairBuffer = t1;
        for (i = oldBuffer.length, i0 = 0; i0 < i; ++i0) {
          t2 = oldBuffer[i0];
          if (i0 >= t1.length)
            return H.ioore(t1, i0);
          t1[i0] = t2;
        }
        t2 = this._pairCapacity;
        if (typeof t2 !== "number")
          return H.iae(t2);
        for (; i < t2; ++i) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t1[i] = new V.Pair(null, null);
        }
      }
      t1 = proxy.key;
      t2 = this.queryProxy;
      t3 = t2.key;
      if (typeof t1 !== "number")
        return t1.$lt();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = this._pairBuffer;
      t5 = this._pairCount;
      if (t1 < t3) {
        if (t5 >= t4.length)
          return H.ioore(t4, t5);
        t4[t5].set$proxyA(proxy);
        t1 = this._pairBuffer;
        t2 = this._pairCount;
        if (t2 >= t1.length)
          return H.ioore(t1, t2);
        t1[t2].set$proxyB(this.queryProxy);
      } else {
        if (t5 >= t4.length)
          return H.ioore(t4, t5);
        t4[t5].set$proxyA(t2);
        t1 = this._pairBuffer;
        t2 = this._pairCount;
        if (t2 >= t1.length)
          return H.ioore(t1, t2);
        t1[t2].set$proxyB(proxy);
      }
      this._pairCount = this._pairCount + 1;
      return true;
    },
    BroadPhase$0: function() {
      var t1, t2, i;
      this.moveBuffer = H.setRuntimeTypeInfo([], [V.DynamicTreeNode]);
      t1 = this._pairCapacity;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t1 = Array(t1);
      t1.fixed$length = init;
      t1 = H.setRuntimeTypeInfo(t1, [V.Pair]);
      this._pairBuffer = t1;
      t2 = this._pairCapacity;
      if (typeof t2 !== "number")
        return H.iae(t2);
      i = 0;
      for (; i < t2; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = new V.Pair(null, null);
      }
    },
    static: {"": "BroadPhase_NULL_PROXY,BroadPhase_PAIR_CAPACITY", BroadPhase$: function() {
        var t1 = new V.BroadPhase(V.DynamicTree$(), 0, null, null, 16, 0, null);
        t1.BroadPhase$0();
        return t1;
      }}
  },
  BroadPhase_updatePairs_closure: {
    "": "Closure:12;",
    call$2: function(a, b) {
      return J.compareTo$1$ns(a, b);
    }
  },
  DynamicTree: {
    "": "Object;_root,_nodeCount,_lastLeaf,_insertionCount,_path,_nodeStack,_drawVectors,_nodeCounter,_tempVector,_tempBox,center,deltaOne,deltaTwo",
    createProxy$2: function(box, userData) {
      var proxy, t1, t2, t3, t4, iterationCount, height, tryCount;
      proxy = this._allocateNode$0();
      t1 = proxy.box;
      t2 = t1.lowerBound;
      t3 = box.lowerBound.storage;
      t4 = t3[0];
      t2 = t2.storage;
      t2[0] = t4 - 0.1;
      t2[1] = t3[1] - 0.1;
      t1 = t1.upperBound;
      t3 = box.upperBound.storage;
      t2 = t3[0];
      t1 = t1.storage;
      t1[0] = t2 + 0.1;
      t1[1] = t3[1] + 0.1;
      proxy.userData = userData;
      this._insertLeaf$1(proxy);
      iterationCount = C.JSInt_methods._shrOtherPositive$1(this._nodeCount, 4);
      height = this._computeHeight$1(this._root);
      tryCount = 0;
      while (true) {
        if (!(height > 64 && tryCount < 10))
          break;
        this.rebalance$1(iterationCount);
        height = this._computeHeight$1(this._root);
        ++tryCount;
      }
      return proxy;
    },
    moveProxy$3: function(argProxy, argBox, displacement) {
      var t1, t2, t3, t4;
      t1 = argProxy.box;
      if (t1.contains$1(0, argBox))
        return false;
      this._removeLeaf$1(argProxy);
      t2 = argBox.lowerBound.storage;
      t2[0] = t2[0] - 0.1;
      t2[1] = t2[1] - 0.1;
      t2 = argBox.upperBound.storage;
      t2[0] = t2[0] + 0.1;
      t2[1] = t2[1] + 0.1;
      t2 = this._tempVector;
      t2.setFrom$1(displacement);
      t2.scale$1(0, 2);
      t2 = t2.storage;
      t3 = t2[0];
      if (t3 < 0) {
        t4 = argBox.lowerBound.storage;
        t4[0] = t4[0] + t3;
      } else {
        t4 = argBox.upperBound.storage;
        t4[0] = t4[0] + t3;
      }
      t2 = t2[1];
      if (t2 < 0) {
        t3 = argBox.lowerBound.storage;
        t3[1] = t3[1] + t2;
      } else {
        t3 = argBox.upperBound.storage;
        t3[1] = t3[1] + t2;
      }
      t1.lowerBound.setFrom$1(argBox.lowerBound);
      t1.upperBound.setFrom$1(argBox.upperBound);
      this._insertLeaf$1(argProxy);
      return true;
    },
    _allocateNode$0: function() {
      var t1, i, t2, node;
      t1 = this._nodeStack;
      if (t1._head === t1._tail)
        for (i = 0; i < 6; ++i) {
          t2 = new V.AxisAlignedBox(null, null);
          t2.lowerBound = new T.Vector2(new Float32Array(2));
          t2.upperBound = new T.Vector2(new Float32Array(2));
          t1.addFirst$1(new V.DynamicTreeNode(t2, null, null, null, null, null, null));
        }
      node = t1.removeFirst$0();
      J.set$parent$x(node, null);
      node.childOne = null;
      node.childTwo = null;
      node.userData = null;
      t1 = this._nodeCounter;
      node.key = t1;
      this._nodeCounter = t1 + 1;
      this._nodeCount = this._nodeCount + 1;
      return node;
    },
    _query$4: function(callback, argBox, node, count) {
      var t1;
      if (node == null)
        return true;
      if (V.AxisAlignedBox_testOverlap(argBox, node.box)) {
        t1 = node.childOne;
        if (t1 == null) {
          if (!callback.treeCallback$1(node))
            return false;
        } else {
          if (count < 64) {
            ++count;
            if (!this._query$4(callback, argBox, t1, count))
              return false;
          }
          if (count < 64)
            if (!this._query$4(callback, argBox, node.childTwo, count + 1))
              return false;
        }
      }
      return true;
    },
    _insertLeaf$1: function(node) {
      var t1, t2, t3, t4, sibling, t5, t6, childOne, childTwo, t7, t8, t9, node1, node2, node10;
      this._insertionCount = this._insertionCount + 1;
      if (this._root == null) {
        this._root = node;
        node.parent = null;
        return;
      }
      t1 = this.center;
      t2 = node.box;
      t3 = t2.lowerBound;
      t4 = new Float32Array(2);
      t3 = t3.storage;
      t4[1] = t3[1];
      t4[0] = t3[0];
      new T.Vector2(t4).add$1(0, t2.upperBound);
      t4[1] = t4[1] * 0.5;
      t4[0] = t4[0] * 0.5;
      t3 = t1.storage;
      t3[1] = t4[1];
      t3[0] = t4[0];
      sibling = this._root;
      if (sibling.childOne != null) {
        t3 = this.deltaOne;
        t4 = this.deltaTwo;
        t5 = t3.storage;
        t6 = t4.storage;
        do {
          childOne = sibling.childOne;
          childTwo = sibling.childTwo;
          t7 = childOne.box;
          t8 = t7.lowerBound;
          t9 = new Float32Array(2);
          t8 = t8.storage;
          t9[1] = t8[1];
          t9[0] = t8[0];
          new T.Vector2(t9).add$1(0, t7.upperBound);
          t9[1] = t9[1] * 0.5;
          t9[0] = t9[0] * 0.5;
          t5[1] = t9[1];
          t5[0] = t9[0];
          t9 = childTwo.box;
          t7 = t9.lowerBound;
          t8 = new Float32Array(2);
          t7 = t7.storage;
          t8[1] = t7[1];
          t8[0] = t7[0];
          new T.Vector2(t8).add$1(0, t9.upperBound);
          t8[1] = t8[1] * 0.5;
          t8[0] = t8[0] * 0.5;
          t6[1] = t8[1];
          t6[0] = t8[0];
          t8 = t3.sub$1(t1).storage;
          t8[1] = Math.abs(t8[1]);
          t8[0] = Math.abs(t8[0]);
          t8 = t4.sub$1(t1).storage;
          t8[1] = Math.abs(t8[1]);
          t8[0] = Math.abs(t8[0]);
          sibling = t5[0] + t5[1] < t6[0] + t6[1] ? childOne : childTwo;
        } while (sibling.childOne != null);
      }
      node1 = sibling.parent;
      node2 = this._allocateNode$0();
      node2.parent = node1;
      node2.userData = null;
      node2.box.setFromCombination$2(t2, sibling.box);
      if (node1 != null) {
        t1 = sibling.parent.childOne;
        if (t1 == null ? sibling == null : t1 === sibling)
          node1.childOne = node2;
        else
          node1.childTwo = node2;
        node2.childOne = sibling;
        node2.childTwo = node;
        sibling.parent = node2;
        node.parent = node2;
        do {
          t1 = node1.box;
          if (t1.contains$1(0, node2.box))
            break;
          t1.setFromCombination$2(node1.childOne.box, node1.childTwo.box);
          node10 = node1.parent;
          if (node10 != null) {
            node2 = node1;
            node1 = node10;
            continue;
          } else
            break;
        } while (true);
      } else {
        node2.childOne = sibling;
        node2.childTwo = node;
        sibling.parent = node2;
        node.parent = node2;
        this._root = node2;
      }
    },
    _removeLeaf$1: function(argNode) {
      var t1, node2, node1, sibling, t2, t3, t4;
      t1 = this._root;
      if (argNode == null ? t1 == null : argNode === t1) {
        this._root = null;
        t1 = this._lastLeaf;
        if (t1 == null ? argNode == null : t1 === argNode)
          this._lastLeaf = null;
        return;
      }
      node2 = argNode.parent;
      node1 = node2.parent;
      sibling = node2.childOne;
      if (sibling == null ? argNode == null : sibling === argNode)
        sibling = node2.childTwo;
      if (node1 != null) {
        t1 = node1.childOne;
        if (t1 == null ? node2 == null : t1 === node2)
          node1.childOne = sibling;
        else
          node1.childTwo = sibling;
        sibling.parent = node1;
        this._nodeStack.addFirst$1(node2);
        this._nodeCount = this._nodeCount - 1;
        for (t1 = this._tempBox; node1 != null;) {
          t2 = node1.box;
          t3 = t1.lowerBound;
          t4 = t2.lowerBound;
          t3 = t3.storage;
          t4 = t4.storage;
          t3[1] = t4[1];
          t3[0] = t4[0];
          t4 = t1.upperBound;
          t3 = t2.upperBound;
          t4 = t4.storage;
          t3 = t3.storage;
          t4[1] = t3[1];
          t4[0] = t3[0];
          t2.setFromCombination$2(node1.childOne.box, node1.childTwo.box);
          if (t1.contains$1(0, t2))
            break;
          node1 = node1.parent;
        }
      } else {
        this._root = sibling;
        sibling.parent = null;
        this._nodeStack.addFirst$1(node2);
        this._nodeCount = this._nodeCount - 1;
      }
      t1 = this._lastLeaf;
      if (t1 == null ? argNode == null : t1 === argNode)
        this._lastLeaf = this._root;
    },
    _computeHeight$1: function(node) {
      if (node == null)
        return 0;
      return 1 + P.max(this._computeHeight$1(node.childOne), this._computeHeight$1(node.childTwo));
    },
    rebalance$1: function(iterations) {
      var i, current, t1, bit, current0;
      if (this._root == null)
        return;
      for (i = 0; i < iterations; ++i) {
        current = this._root;
        for (t1 = this._path, bit = 0; current0 = current.childOne, current0 != null;) {
          current = (C.JSInt_methods._shrBothPositive$1(t1, bit) & 1) === 0 ? current0 : current.childTwo;
          bit = bit + 1 & 31;
        }
        this._path = t1 + 1;
        this._removeLeaf$1(current);
        this._insertLeaf$1(current);
      }
    },
    _freeNode$1: function(node) {
      this._nodeStack.addFirst$1(node);
      this._nodeCount = this._nodeCount - 1;
    },
    DynamicTree$0: function() {
      var t1, i;
      for (t1 = this._drawVectors, i = 0; i < 4; ++i)
        t1[i] = new T.Vector2(new Float32Array(2));
    },
    static: {"": "DynamicTree_MAX_STACK_SIZE,DynamicTree__DEFAULT_NODE_ADDITION", DynamicTree$: function() {
        var t1, t2, t3, t4, t5, t6;
        t1 = H.setRuntimeTypeInfo(Array(4), [T.Vector2]);
        t2 = new Float32Array(2);
        t3 = V.AxisAlignedBox$(null, null);
        t4 = V.DynamicTreeNode;
        t5 = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [t4]);
        t5.ListQueue$1(null, t4);
        t4 = new Float32Array(2);
        t6 = new Float32Array(2);
        t1 = new V.DynamicTree(null, 0, null, 0, 0, t5, t1, 0, new T.Vector2(t2), t3, new T.Vector2(t4), new T.Vector2(t6), new T.Vector2(new Float32Array(2)));
        t1.DynamicTree$0();
        return t1;
      }}
  },
  DynamicTreeNode: {
    "": "Object;box,parent',next<,childOne,childTwo,userData<,key>",
    toString$0: function(_) {
      var t1 = this.box;
      return H.S(t1.lowerBound) + ", " + H.S(t1.upperBound);
    }
  },
  Pair: {
    "": "Object;proxyA@,proxyB@",
    compareTo$1: function(_, pair2) {
      var t1, t2;
      t1 = this.proxyA.key;
      t2 = pair2.get$proxyA();
      t2 = t2.get$key(t2);
      if (typeof t1 !== "number")
        return t1.$lt();
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (t1 < t2)
        return -1;
      if (t1 === t2) {
        t1 = this.proxyB.key;
        t2 = pair2.get$proxyB();
        t2 = t2.get$key(t2);
        if (typeof t1 !== "number")
          return t1.$lt();
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (t1 < t2)
          t1 = -1;
        else
          t1 = t1 === t2 ? 0 : 1;
        return t1;
      }
      return 1;
    }
  },
  Collision: {
    "": "Object;_pool,cache,input,output,results1,results2,incidentEdge,localTangent,localNormal,planePoint,tangent,normal,normal1,v11,v12,clipPoints1,clipPoints2",
    collideCircles$5: function(manifold, circle1, xfA, circle2, xfB) {
      var v, t1, t2, t3, t4, t5, t6, t7, t8, v1, t9, t10, t11, t12, t13, t14, t15, dx, dy, radius;
      manifold.pointCount = 0;
      v = circle1.get$position(circle1);
      t1 = xfA.position.storage;
      t2 = t1[1];
      t3 = xfA.rotation.storage;
      t4 = t3[1];
      t5 = v.storage;
      t6 = t5[0];
      t7 = t3[3];
      t5 = t5[1];
      t1 = t1[0];
      t8 = t3[0];
      t3 = t3[2];
      v1 = circle2.get$position(circle2);
      t9 = xfB.position.storage;
      t10 = t9[1];
      t11 = xfB.rotation.storage;
      t12 = t11[1];
      t13 = v1.storage;
      t14 = t13[0];
      t15 = t11[3];
      t13 = t13[1];
      dx = t9[0] + t11[0] * t14 + t11[2] * t13 - (t1 + t8 * t6 + t3 * t5);
      dy = t10 + t12 * t14 + t15 * t13 - (t2 + t4 * t6 + t7 * t5);
      radius = circle1.radius + circle2.radius;
      if (dx * dx + dy * dy > radius * radius)
        return;
      manifold.type = 0;
      manifold.localPoint.setFrom$1(circle1.position);
      manifold.localNormal.setZero$0();
      manifold.pointCount = 1;
      t1 = manifold.points;
      t1[0].localPoint.setFrom$1(circle2.position);
      t1[0].id.features.zero$0();
    },
    collidePolygonAndCircle$5: function(manifold, polygon, xfA, circle, xfB) {
      var v, t1, t2, t3, t4, t5, t6, t7, t8, v1x, v1y, cLocaly, cLocalx, radius, vertexCount, vertices, normals, normalIndex, separation, i, vertex, s, vertIndex2, v1, v2, mpoint, temp2X, temp4X, t9, t10, dx, dy, fcx, fcy, norm;
      manifold.pointCount = 0;
      v = circle.get$position(circle);
      t1 = xfB.position.storage;
      t2 = t1[1];
      t3 = xfB.rotation.storage;
      t4 = t3[1];
      t5 = v.storage;
      t6 = t5[0];
      t7 = t3[3];
      t5 = t5[1];
      t8 = xfA.position.storage;
      v1x = t1[0] + t3[0] * t6 + t3[2] * t5 - t8[0];
      v1y = t2 + t4 * t6 + t7 * t5 - t8[1];
      t8 = xfA.rotation.storage;
      cLocaly = v1x * t8[2] + v1y * t8[3];
      cLocalx = v1x * t8[0] + v1y * t8[1];
      radius = polygon.radius + circle.radius;
      vertexCount = polygon.get$vertexCount();
      vertices = polygon.vertices;
      normals = polygon.normals;
      for (normalIndex = 0, separation = 1e-12, i = 0; i < vertexCount; ++i) {
        if (i >= 8)
          return H.ioore(vertices, i);
        vertex = vertices[i];
        t1 = J.getInterceptor$x(vertex);
        t2 = t1.get$x(vertex);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t1 = t1.get$y(vertex);
        if (typeof t1 !== "number")
          return H.iae(t1);
        t3 = normals[i].storage;
        s = t3[0] * (cLocalx - t2) + t3[1] * (cLocaly - t1);
        if (s > radius)
          return;
        if (s > separation) {
          separation = s;
          normalIndex = i;
        }
      }
      vertIndex2 = normalIndex + 1;
      vertIndex2 = vertIndex2 < vertexCount ? vertIndex2 : 0;
      if (normalIndex < 0 || normalIndex >= 8)
        return H.ioore(vertices, normalIndex);
      v1 = vertices[normalIndex];
      if (vertIndex2 < 0 || vertIndex2 >= 8)
        return H.ioore(vertices, vertIndex2);
      v2 = vertices[vertIndex2];
      if (separation < 1.192e-7) {
        manifold.pointCount = 1;
        manifold.type = 1;
        t1 = normals[normalIndex].storage;
        t2 = manifold.localNormal.storage;
        t2[0] = t1[0];
        t2[1] = t1[1];
        t1 = J.getInterceptor$x(v1);
        t2 = J.getInterceptor$x(v2);
        t3 = manifold.localPoint.storage;
        t3[0] = J.$mul$n(J.$add$ns(t1.get$x(v1), t2.get$x(v2)), 0.5);
        t1 = t1.get$y(v1);
        t2 = t2.get$y(v2);
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t2 !== "number")
          return H.iae(t2);
        t3[1] = (t1 + t2) * 0.5;
        mpoint = manifold.points[0];
        t2 = mpoint.localPoint;
        t1 = circle.position.storage;
        t2 = t2.storage;
        t2[0] = t1[0];
        t2[1] = t1[1];
        mpoint.id.features.zero$0();
        return;
      }
      t1 = J.getInterceptor$x(v1);
      t2 = t1.get$x(v1);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = t1.get$y(v1);
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = J.getInterceptor$x(v2);
      temp2X = J.$sub$n(t4.get$x(v2), t1.get$x(v1));
      t5 = t4.get$y(v2);
      t6 = t1.get$y(v1);
      if (typeof t5 !== "number")
        return t5.$sub();
      if (typeof t6 !== "number")
        return H.iae(t6);
      if (typeof temp2X !== "number")
        return H.iae(temp2X);
      t7 = t4.get$x(v2);
      if (typeof t7 !== "number")
        return H.iae(t7);
      t8 = t4.get$y(v2);
      if (typeof t8 !== "number")
        return H.iae(t8);
      temp4X = J.$sub$n(t1.get$x(v1), t4.get$x(v2));
      t9 = t1.get$y(v1);
      t10 = t4.get$y(v2);
      if (typeof t9 !== "number")
        return t9.$sub();
      if (typeof t10 !== "number")
        return H.iae(t10);
      if (typeof temp4X !== "number")
        return H.iae(temp4X);
      if ((cLocalx - t2) * temp2X + (cLocaly - t3) * (t5 - t6) <= 0) {
        t2 = t1.get$x(v1);
        if (typeof t2 !== "number")
          return H.iae(t2);
        dx = cLocalx - t2;
        t2 = t1.get$y(v1);
        if (typeof t2 !== "number")
          return H.iae(t2);
        dy = cLocaly - t2;
        if (dx * dx + dy * dy > radius * radius)
          return;
        manifold.pointCount = 1;
        manifold.type = 1;
        t2 = manifold.localNormal;
        t3 = t1.get$x(v1);
        if (typeof t3 !== "number")
          return H.iae(t3);
        t4 = t2.storage;
        t4[0] = cLocalx - t3;
        t1 = t1.get$y(v1);
        if (typeof t1 !== "number")
          return H.iae(t1);
        t4[1] = cLocaly - t1;
        t2.normalize$0();
        manifold.localPoint.setFrom$1(v1);
        t2 = manifold.points;
        t2[0].localPoint.setFrom$1(circle.position);
        t2[0].id.features.zero$0();
      } else if ((cLocalx - t7) * temp4X + (cLocaly - t8) * (t9 - t10) <= 0) {
        t1 = t4.get$x(v2);
        if (typeof t1 !== "number")
          return H.iae(t1);
        dx = cLocalx - t1;
        t1 = t4.get$y(v2);
        if (typeof t1 !== "number")
          return H.iae(t1);
        dy = cLocaly - t1;
        if (dx * dx + dy * dy > radius * radius)
          return;
        manifold.pointCount = 1;
        manifold.type = 1;
        t1 = manifold.localNormal;
        t2 = t4.get$x(v2);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t3 = t1.storage;
        t3[0] = cLocalx - t2;
        t4 = t4.get$y(v2);
        if (typeof t4 !== "number")
          return H.iae(t4);
        t3[1] = cLocaly - t4;
        t1.normalize$0();
        manifold.localPoint.setFrom$1(v2);
        t1 = manifold.points;
        t1[0].localPoint.setFrom$1(circle.position);
        t1[0].id.features.zero$0();
      } else {
        fcx = J.$mul$n(J.$add$ns(t1.get$x(v1), t4.get$x(v2)), 0.5);
        t1 = t1.get$y(v1);
        t4 = t4.get$y(v2);
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t4 !== "number")
          return H.iae(t4);
        fcy = (t1 + t4) * 0.5;
        if (typeof fcx !== "number")
          return H.iae(fcx);
        norm = normals[normalIndex];
        t4 = norm.storage;
        if ((cLocalx - fcx) * t4[0] + (cLocaly - fcy) * t4[1] > radius)
          return;
        manifold.pointCount = 1;
        manifold.type = 1;
        manifold.localNormal.setFrom$1(norm);
        t1 = manifold.localPoint.storage;
        t1[0] = fcx;
        t1[1] = fcy;
        t1 = manifold.points;
        t1[0].localPoint.setFrom$1(circle.position);
        t1[0].id.features.zero$0();
      }
    },
    edgeSeparation$5: function(poly1, xf1, edge1, poly2, xf2) {
      var normals1, count2, vertices2, v, t1, t2, t3, t4, t5, normal1Worldy, normal1Worldx, normal1x, normal1y, index, minDot, i, a, dot, v3, t6, t7, t8, t9, t10, t11, v4, t12, t13, t14, t15, t16, t17, t18, t19, t20;
      normals1 = poly1.normals;
      count2 = poly2.vertexCount;
      vertices2 = poly2.vertices;
      if (edge1 < 0 || edge1 >= 8)
        return H.ioore(normals1, edge1);
      v = normals1[edge1];
      t1 = xf1.rotation.storage;
      t2 = t1[1];
      t3 = v.storage;
      t4 = t3[0];
      t5 = t1[3];
      t3 = t3[1];
      normal1Worldy = t2 * t4 + t5 * t3;
      normal1Worldx = t1[0] * t4 + t1[2] * t3;
      t3 = xf2.rotation.storage;
      normal1x = normal1Worldx * t3[0] + normal1Worldy * t3[1];
      normal1y = normal1Worldx * t3[2] + normal1Worldy * t3[3];
      for (index = 0, minDot = 99999999999999, i = 0; i < count2; ++i) {
        if (i >= 8)
          return H.ioore(vertices2, i);
        a = vertices2[i];
        t2 = J.getInterceptor$x(a);
        t4 = J.$mul$n(t2.get$x(a), normal1x);
        t2 = t2.get$y(a);
        if (typeof t2 !== "number")
          return t2.$mul();
        dot = J.$add$ns(t4, t2 * normal1y);
        if (J.$lt$n(dot, minDot)) {
          minDot = dot;
          index = i;
        }
      }
      v3 = poly1.vertices[edge1];
      t2 = xf1.position.storage;
      t4 = t2[1];
      t5 = t1[1];
      t6 = J.getInterceptor$x(v3);
      t7 = t6.get$x(v3);
      if (typeof t7 !== "number")
        return H.iae(t7);
      t8 = t1[3];
      t9 = t6.get$y(v3);
      if (typeof t9 !== "number")
        return H.iae(t9);
      t2 = t2[0];
      t10 = t1[0];
      t11 = t6.get$x(v3);
      if (typeof t11 !== "number")
        return H.iae(t11);
      t1 = t1[2];
      t6 = t6.get$y(v3);
      if (typeof t6 !== "number")
        return H.iae(t6);
      if (index < 0 || index >= 8)
        return H.ioore(vertices2, index);
      v4 = vertices2[index];
      t12 = xf2.position.storage;
      t13 = t12[1];
      t14 = t3[1];
      t15 = J.getInterceptor$x(v4);
      t16 = t15.get$x(v4);
      if (typeof t16 !== "number")
        return H.iae(t16);
      t17 = t3[3];
      t18 = t15.get$y(v4);
      if (typeof t18 !== "number")
        return H.iae(t18);
      t12 = t12[0];
      t19 = t3[0];
      t20 = t15.get$x(v4);
      if (typeof t20 !== "number")
        return H.iae(t20);
      t3 = t3[2];
      t15 = t15.get$y(v4);
      if (typeof t15 !== "number")
        return H.iae(t15);
      return (t12 + t19 * t20 + t3 * t15 - (t2 + t10 * t11 + t1 * t6)) * normal1Worldx + (t13 + t14 * t16 + t17 * t18 - (t4 + t5 * t7 + t8 * t9)) * normal1Worldy;
    },
    findMaxSeparation$5: function(results, poly1, xf1, poly2, xf2) {
      var count1, normals1, v, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, dx, dy, dLocal1x, dLocal1y, edge, maxDot, i, dot, s, prevEdge, sPrev, nextEdge, sNext, bestSeparation, bestEdge, increment, edge0;
      count1 = poly1.get$vertexCount();
      normals1 = poly1.normals;
      v = poly2.get$centroid();
      t1 = xf2.position.storage;
      t2 = t1[1];
      t3 = xf2.rotation.storage;
      t4 = t3[1];
      t5 = v.storage;
      t6 = t5[0];
      t7 = t3[3];
      t5 = t5[1];
      t1 = t1[0];
      t8 = t3[0];
      t3 = t3[2];
      t9 = xf1.position.storage;
      t10 = t9[1];
      t11 = xf1.rotation.storage;
      t12 = t11[1];
      t13 = poly1.centroid.storage;
      t14 = t13[0];
      t15 = t11[3];
      t13 = t13[1];
      t9 = t9[0];
      t16 = t11[0];
      t11 = t11[2];
      dx = t1 + t8 * t6 + t3 * t5 - (t9 + t16 * t14 + t11 * t13);
      dy = t2 + t4 * t6 + t7 * t5 - (t10 + t12 * t14 + t15 * t13);
      dLocal1x = dx * t16 + dy * t12;
      dLocal1y = dx * t11 + dy * t15;
      for (edge = 0, maxDot = 1e-12, i = 0; i < count1; ++i) {
        if (i >= 8)
          return H.ioore(normals1, i);
        t1 = normals1[i].storage;
        dot = t1[0] * dLocal1x + t1[1] * dLocal1y;
        if (dot > maxDot) {
          maxDot = dot;
          edge = i;
        }
      }
      s = this.edgeSeparation$5(poly1, xf1, edge, poly2, xf2);
      prevEdge = edge - 1;
      prevEdge = prevEdge >= 0 ? prevEdge : count1 - 1;
      sPrev = this.edgeSeparation$5(poly1, xf1, prevEdge, poly2, xf2);
      nextEdge = edge + 1;
      nextEdge = nextEdge < count1 ? nextEdge : 0;
      sNext = this.edgeSeparation$5(poly1, xf1, nextEdge, poly2, xf2);
      if (sPrev > s && sPrev > sNext) {
        bestSeparation = sPrev;
        bestEdge = prevEdge;
        increment = -1;
      } else {
        if (sNext > s)
          ;
        else {
          results.edgeIndex = edge;
          results.separation = s;
          return;
        }
        bestSeparation = sNext;
        bestEdge = nextEdge;
        increment = 1;
      }
      for (t1 = increment === -1, edge = count1 - 1; true; bestSeparation = s, bestEdge = edge0) {
        if (t1) {
          edge0 = bestEdge - 1;
          edge0 = edge0 >= 0 ? edge0 : edge;
        } else {
          edge0 = bestEdge + 1;
          edge0 = edge0 < count1 ? edge0 : 0;
        }
        s = this.edgeSeparation$5(poly1, xf1, edge0, poly2, xf2);
        if (s > bestSeparation)
          ;
        else
          break;
      }
      results.edgeIndex = bestEdge;
      results.separation = bestSeparation;
    },
    findIncidentEdge$6: function(c, poly1, xf1, edge1, poly2, xf2) {
      var normals1, count2, vertices2, normals2, t1, index, minDot, i, dot, i2;
      poly1.get$vertexCount();
      normals1 = poly1.normals;
      count2 = poly2.get$vertexCount();
      vertices2 = poly2.vertices;
      normals2 = poly2.normals;
      if (edge1 < 0 || edge1 >= 8)
        return H.ioore(normals1, edge1);
      t1 = this.normal1;
      xf1.rotation.transformed$2(normals1[edge1], t1);
      xf2.rotation.transposed$0().transformed$2(t1, t1);
      for (index = 0, minDot = 99999999999999, i = 0; i < count2; ++i) {
        if (i >= 8)
          return H.ioore(normals2, i);
        dot = t1.dot$1(normals2[i]);
        if (dot < minDot) {
          minDot = dot;
          index = i;
        }
      }
      i2 = index + 1;
      i2 = i2 < count2 ? i2 : 0;
      if (index < 0 || index >= 8)
        return H.ioore(vertices2, index);
      V.Transform_mulToOut(xf2, vertices2[index], c[0].v);
      t1 = c[0].id.features;
      t1.referenceEdge = edge1;
      t1.incidentEdge = index;
      t1.incidentVertex = 0;
      if (i2 < 0 || i2 >= 8)
        return H.ioore(vertices2, i2);
      V.Transform_mulToOut(xf2, vertices2[i2], c[1].v);
      t1 = c[1].id.features;
      t1.referenceEdge = edge1;
      t1.incidentEdge = i2;
      t1.incidentVertex = 1;
    },
    collidePolygons$5: function(manifold, polyA, xfA, polyB, xfB) {
      var totalRadius, t1, t2, t3, edge1, xf2, xf1, poly2, poly1, flip, count1, vertices1, t4, t5, t6, t7, frontOffset, t8, np, pointCount, i, cp;
      manifold.pointCount = 0;
      totalRadius = polyA.radius + polyB.radius;
      t1 = this.results1;
      this.findMaxSeparation$5(t1, polyA, xfA, polyB, xfB);
      if (t1.separation > totalRadius)
        return;
      t2 = this.results2;
      this.findMaxSeparation$5(t2, polyB, xfB, polyA, xfA);
      t3 = t2.separation;
      if (t3 > totalRadius)
        return;
      if (t3 > 0.98 * t1.separation + 0.001) {
        edge1 = t2.edgeIndex;
        manifold.type = 2;
        xf2 = xfA;
        xf1 = xfB;
        poly2 = polyA;
        poly1 = polyB;
        flip = 1;
      } else {
        edge1 = t1.edgeIndex;
        manifold.type = 1;
        xf2 = xfB;
        xf1 = xfA;
        poly2 = polyB;
        poly1 = polyA;
        flip = 0;
      }
      t1 = this.incidentEdge;
      this.findIncidentEdge$6(t1, poly1, xf1, edge1, poly2, xf2);
      count1 = poly1.get$vertexCount();
      vertices1 = poly1.vertices;
      t2 = this.v11;
      if (edge1 < 0 || edge1 >= 8)
        return H.ioore(vertices1, edge1);
      t2.setFrom$1(vertices1[edge1]);
      t3 = this.v12;
      t4 = edge1 + 1;
      if (t4 < count1) {
        if (t4 >= 8)
          return H.ioore(vertices1, t4);
        t4 = vertices1[t4];
      } else
        t4 = vertices1[0];
      t3.setFrom$1(t4);
      t4 = this.localTangent;
      t4.setFrom$1(t3).sub$1(t2);
      t4.normalize$0();
      t5 = this.localNormal;
      V.Vector2_crossVectorAndNumToOut(t4, 1, t5);
      t6 = this.planePoint;
      t6.setFrom$1(t2).add$1(0, t3).scale$1(0, 0.5);
      t7 = this.tangent;
      xf1.rotation.transformed$2(t4, t7);
      t4 = this.normal;
      V.Vector2_crossVectorAndNumToOut(t7, 1, t4);
      V.Transform_mulToOut(xf1, t2, t2);
      V.Transform_mulToOut(xf1, t3, t3);
      frontOffset = t4.dot$1(t2);
      t2 = t7.dot$1(t2);
      t3 = t7.dot$1(t3);
      t7.negate$0();
      t8 = this.clipPoints1;
      np = V.Collision_clipSegmentToLine(t8, t1, t7, -t2 + totalRadius);
      t7.negate$0();
      if (np < 2)
        return;
      t1 = this.clipPoints2;
      if (V.Collision_clipSegmentToLine(t1, t8, t7, t3 + totalRadius) < 2)
        return;
      manifold.localNormal.setFrom$1(t5);
      manifold.localPoint.setFrom$1(t6);
      for (t2 = manifold.points, pointCount = 0, i = 0; i < 2; ++i)
        if (t4.dot$1(t1[i].v) - frontOffset <= totalRadius) {
          if (pointCount >= 2)
            return H.ioore(t2, pointCount);
          cp = t2[pointCount];
          V.Transform_mulTransToOut(xf2, t1[i].v, cp.localPoint);
          t3 = cp.id;
          t3 = t3.features;
          t5 = t1[i].id.features;
          t3.referenceEdge = t5.referenceEdge;
          t3.incidentEdge = t5.incidentEdge;
          t3.incidentVertex = t5.incidentVertex;
          t3.flip = t5.flip;
          t3.flip = flip;
          ++pointCount;
        }
      manifold.pointCount = pointCount;
    },
    Collision$_construct$1: function(pool) {
      var t1 = this.incidentEdge;
      t1[0] = V.ClipVertex$();
      t1[1] = V.ClipVertex$();
      t1 = this.clipPoints1;
      t1[0] = V.ClipVertex$();
      t1[1] = V.ClipVertex$();
      t1 = this.clipPoints2;
      t1[0] = V.ClipVertex$();
      t1[1] = V.ClipVertex$();
    },
    static: {"": "Collision_NULL_FEATURE", Collision_clipSegmentToLine: function(vOut, vIn, norm, offset) {
        var distance0, distance1, t1, t2, numOut, numOut0, vin;
        distance0 = norm.dot$1(vIn[0].v) - offset;
        distance1 = norm.dot$1(vIn[1].v) - offset;
        if (distance0 <= 0) {
          t1 = vOut[0];
          t2 = vIn[0];
          t1.v.setFrom$1(t2.v);
          t1.id.features.setFrom$1(t2.id.features);
          numOut = 1;
        } else
          numOut = 0;
        if (distance1 <= 0) {
          numOut0 = numOut + 1;
          t1 = vOut[numOut];
          t2 = vIn[1];
          t1.v.setFrom$1(t2.v);
          t1.id.features.setFrom$1(t2.id.features);
          numOut = numOut0;
        }
        if (distance0 * distance1 < 0) {
          if (numOut >= 2)
            return H.ioore(vOut, numOut);
          vOut[numOut].v.setFrom$1(vIn[1].v).sub$1(vIn[0].v).scale$1(0, distance0 / (distance0 - distance1)).add$1(0, vIn[0].v);
          vin = distance0 > 0 ? vIn[0] : vIn[1];
          vOut[numOut].id.features.setFrom$1(vin.id.features);
          ++numOut;
        }
        return numOut;
      }}
  },
  ClipVertex: {
    "": "Object;v<,id",
    setFrom$1: function(cv) {
      this.v.setFrom$1(cv.get$v());
      this.id.features.setFrom$1(cv.id.features);
    },
    static: {ClipVertex$: function() {
        return new V.ClipVertex(new T.Vector2(new Float32Array(2)), new V.ContactID(V.Features$()));
      }}
  },
  EdgeResults: {
    "": "Object;separation,edgeIndex"
  },
  ContactID: {
    "": "Object;features<",
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other.get$features().$eq(0, this.features);
    },
    setFrom$1: function(other) {
      this.features.setFrom$1(other.get$features());
    }
  },
  Distance: {
    "": "Object;calls,iters,maxIters,simplex,saveA,saveB,closestPoint,searchDirection,temp,normal",
    distance$3: function(output, cache, input) {
      var proxyA, proxyB, transformA, transformB, t1, vertices, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, iter, saveCount, i, t12, vertex, t13, t14, t15, t16, t17, t18, t19, duplicate, rA, rB;
      this.calls = this.calls + 1;
      proxyA = input.proxyA;
      proxyB = input.proxyB;
      transformA = input.transformA;
      transformB = input.transformB;
      t1 = this.simplex;
      t1.readCache$5(cache, proxyA, transformA, proxyB, transformB);
      vertices = t1.vertices;
      t2 = this.closestPoint;
      t1.getClosestPoint$1(t2);
      t2.get$length2();
      for (t3 = this.saveA, t4 = this.saveB, t5 = this.temp, t6 = proxyB.vertices, t7 = proxyA.vertices, t8 = transformB.rotation, t9 = this.searchDirection, t10 = t9.storage, t11 = transformA.rotation, iter = 0; iter < this.maxIters;) {
        saveCount = t1.count;
        for (i = 0; i < saveCount; ++i) {
          if (i >= 3)
            return H.ioore(vertices, i);
          t3[i] = vertices[i].indexA;
          t4[i] = vertices[i].indexB;
        }
        switch (saveCount) {
          case 1:
            break;
          case 2:
            t1.solve2$0();
            break;
          case 3:
            t1.solve3$0();
            break;
          default:
            return;
        }
        if (t1.count === 3)
          break;
        t1.getClosestPoint$1(t2);
        t2.get$length2();
        t1.getSearchDirection$1(t9);
        if (t9.get$length2() < 1.4208639999999999e-14)
          break;
        t12 = t1.count;
        if (t12 >= 3)
          return H.ioore(vertices, t12);
        vertex = vertices[t12];
        t12 = t11.transposed$0();
        t10[1] = -t10[1];
        t10[0] = -t10[0];
        t13 = t5.storage;
        t13[1] = t10[1];
        t13[0] = t10[0];
        t12 = t12.storage;
        t13 = t12[0];
        t14 = t5.storage;
        t15 = t14[0];
        t16 = t12[2];
        t17 = t14[1];
        t18 = t12[1];
        t12 = t12[3];
        t14[0] = t13 * t15 + t16 * t17;
        t14[1] = t18 * t15 + t12 * t17;
        t17 = proxyA.getSupport$1(t5);
        vertex.indexA = t17;
        if (t17 >= 8)
          return H.ioore(t7, t17);
        t17 = t7[t17];
        t12 = vertex.wA;
        V.Transform_mulToOut(transformA, t17, t12);
        t17 = t8.transposed$0();
        t10[1] = -t10[1];
        t10[0] = -t10[0];
        t14[1] = t10[1];
        t14[0] = t10[0];
        t13 = t17.storage;
        t15 = t13[0];
        t16 = t14[0];
        t17 = t13[2];
        t18 = t14[1];
        t19 = t13[1];
        t13 = t13[3];
        t14[0] = t15 * t16 + t17 * t18;
        t14[1] = t19 * t16 + t13 * t18;
        t18 = proxyB.getSupport$1(t5);
        vertex.indexB = t18;
        if (t18 >= 8)
          return H.ioore(t6, t18);
        t18 = t6[t18];
        t13 = vertex.wB;
        V.Transform_mulToOut(transformB, t18, t13);
        t18 = vertex.w;
        t16 = t18.storage;
        t13 = t13.storage;
        t16[1] = t13[1];
        t16[0] = t13[0];
        t18.sub$1(t12);
        ++iter;
        this.iters = this.iters + 1;
        for (i = 0; duplicate = false, i < saveCount; ++i) {
          t12 = vertex.indexA;
          if (i >= 3)
            return H.ioore(t3, i);
          if (J.$eq(t12, t3[i]) && J.$eq(vertex.indexB, t4[i])) {
            duplicate = true;
            break;
          }
        }
        if (duplicate)
          break;
        t1.count = t1.count + 1;
      }
      this.maxIters = P.max(this.maxIters, iter);
      t2 = output.pointA;
      t3 = output.pointB;
      switch (t1.count) {
        case 0:
          break;
        case 1:
          t4 = t1.v1;
          t2.setFrom$1(t4.wA);
          t3.setFrom$1(t4.wB);
          break;
        case 2:
          t4 = t1.case2;
          t6 = t1.v1;
          t4.setFrom$1(t6.wA).scale$1(0, t6.a);
          t7 = t1.v2;
          t2.setFrom$1(t7.wA).scale$1(0, t7.a).add$1(0, t4);
          t4.setFrom$1(t6.wB).scale$1(0, t6.a);
          t3.setFrom$1(t7.wB).scale$1(0, t7.a).add$1(0, t4);
          break;
        case 3:
          t4 = t1.v1;
          t2.setFrom$1(t4.wA).scale$1(0, t4.a);
          t4 = t1.case3;
          t6 = t1.v2;
          t4.setFrom$1(t6.wA).scale$1(0, t6.a);
          t6 = t1.case33;
          t7 = t1.v3;
          t6.setFrom$1(t7.wA).scale$1(0, t7.a);
          t2.add$1(0, t4).add$1(0, t6);
          t3.setFrom$1(t2);
          break;
        default:
          break;
      }
      t4 = V.MathBox_distanceSquared(t2, t3);
      output.distance = Math.sqrt(t4);
      output.iterations = iter;
      t1.writeCache$1(cache);
      if (input.useRadii) {
        rA = proxyA.get$radius();
        rB = proxyB.get$radius();
        t1 = output.distance;
        t4 = rA + rB;
        if (typeof t1 !== "number")
          return t1.$gt();
        if (t1 > t4 && t1 > 1.192e-7) {
          output.distance = t1 - t4;
          t1 = this.normal;
          t1.setFrom$1(t3).sub$1(t2);
          t1.normalize$0();
          t5.setFrom$1(t1).scale$1(0, rA);
          t2.add$1(0, t5);
          t5.setFrom$1(t1).scale$1(0, rB);
          t3.sub$1(t5);
        } else {
          t2.add$1(0, t3).scale$1(0, 0.5);
          t3.setFrom$1(t2);
          output.distance = 0;
        }
      }
    }
  },
  DistanceInput: {
    "": "Object;proxyA@,proxyB@,transformA,transformB,useRadii",
    static: {DistanceInput$: function() {
        return new V.DistanceInput(V.DistanceProxy$(), V.DistanceProxy$(), V.Transform$(), V.Transform$(), false);
      }}
  },
  DistanceOutput: {
    "": "Object;pointA,pointB,distance,iterations",
    static: {DistanceOutput$: function() {
        var t1 = new Float32Array(2);
        return new V.DistanceOutput(new T.Vector2(t1), new T.Vector2(new Float32Array(2)), null, null);
      }}
  },
  DistanceProxy: {
    "": "Object;vertices<,count,radius<",
    setFromShape$1: function(shape) {
      var t1, t2, t3, i, t4, t5;
      t1 = shape.type;
      if (t1 === 0) {
        this.vertices[0].setFrom$1(shape.get$position(shape));
        this.count = 1;
        this.radius = shape.radius;
      } else if (t1 === 1) {
        t1 = shape.get$vertexCount();
        this.count = t1;
        this.radius = shape.radius;
        for (t2 = this.vertices, t3 = shape.vertices, i = 0; i < t1; ++i) {
          if (i >= 8)
            return H.ioore(t2, i);
          t4 = t2[i];
          t5 = t3[i];
          t4 = t4.storage;
          t5 = t5.get$storage();
          if (1 >= t5.length)
            return H.ioore(t5, 1);
          t4[1] = t5[1];
          t4[0] = t5[0];
        }
      }
    },
    getSupport$1: function(direction) {
      var t1, bestValue, bestIndex, i, value;
      t1 = this.vertices;
      bestValue = t1[0].dot$1(direction);
      for (bestIndex = 0, i = 1; i < this.count; ++i) {
        if (i >= 8)
          return H.ioore(t1, i);
        value = t1[i].dot$1(direction);
        if (value > bestValue) {
          bestValue = value;
          bestIndex = i;
        }
      }
      return bestIndex;
    },
    DistanceProxy$0: function() {
      var t1, i;
      for (t1 = this.vertices, i = 0; i < 8; ++i)
        t1[i] = new T.Vector2(new Float32Array(2));
    },
    static: {DistanceProxy$: function() {
        var t1 = new V.DistanceProxy(H.setRuntimeTypeInfo(Array(8), [T.Vector2]), 0, 0);
        t1.DistanceProxy$0();
        return t1;
      }}
  },
  Features: {
    "": "Object;referenceEdge<,incidentEdge,incidentVertex,flip",
    setFrom$1: function(f) {
      this.referenceEdge = f.get$referenceEdge();
      this.incidentEdge = f.incidentEdge;
      this.incidentVertex = f.incidentVertex;
      this.flip = f.flip;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return this.referenceEdge === other.get$referenceEdge() && this.incidentEdge === other.incidentEdge && this.incidentVertex === other.incidentVertex && this.flip === other.flip;
    },
    toString$0: function(_) {
      return "Features: (" + this.flip + ", " + this.incidentEdge + ", " + this.incidentVertex + " " + this.referenceEdge + ")";
    },
    zero$0: function() {
      this.referenceEdge = 0;
      this.incidentEdge = 0;
      this.incidentVertex = 0;
      this.flip = 0;
    },
    static: {Features$: function() {
        return new V.Features(0, 0, 0, 0);
      }}
  },
  Manifold: {
    "": "Object;points,localNormal,localPoint<,type,pointCount<",
    setFrom$1: function(other) {
      var t1, t2, i, t3, t4, t5, t6;
      for (t1 = this.points, t2 = other.points, i = 0; i < other.get$pointCount(); ++i) {
        if (i >= 2)
          return H.ioore(t1, i);
        t3 = t1[i];
        t4 = t2[i];
        t5 = t3.localPoint;
        t5 = t5.storage;
        t6 = t4.localPoint.storage;
        t5[1] = t6[1];
        t5[0] = t6[0];
        t3.normalImpulse = t4.normalImpulse;
        t3.tangentImpulse = t4.tangentImpulse;
        t3 = t3.id;
        t3 = t3.features;
        t4 = t4.id.features;
        t3.referenceEdge = t4.referenceEdge;
        t3.incidentEdge = t4.incidentEdge;
        t3.incidentVertex = t4.incidentVertex;
        t3.flip = t4.flip;
      }
      this.type = other.type;
      this.localNormal.setFrom$1(other.localNormal);
      this.localPoint.setFrom$1(other.localPoint);
      this.pointCount = other.pointCount;
    },
    Manifold$0: function() {
      var t1, i;
      for (t1 = this.points, i = 0; i < 2; ++i)
        t1[i] = new V.ManifoldPoint(new T.Vector2(new Float32Array(2)), 0, 0, new V.ContactID(new V.Features(0, 0, 0, 0)));
    },
    static: {Manifold$: function() {
        var t1, t2;
        t1 = H.setRuntimeTypeInfo(Array(2), [V.ManifoldPoint]);
        t2 = new Float32Array(2);
        t1 = new V.Manifold(t1, new T.Vector2(t2), new T.Vector2(new Float32Array(2)), null, 0);
        t1.Manifold$0();
        return t1;
      }}
  },
  ManifoldPoint: {
    "": "Object;localPoint<,normalImpulse@,tangentImpulse@,id",
    setFrom$1: function(other) {
      this.localPoint.setFrom$1(other.get$localPoint());
      this.normalImpulse = other.normalImpulse;
      this.tangentImpulse = other.tangentImpulse;
      this.id.features.setFrom$1(other.id.features);
    }
  },
  CircleShape: {
    "": "Shape;position>,type,radius",
    computeAxisAlignedBox$2: function(argBox, argTransform) {
      var t1, p, t2, t3, t4, t5;
      t1 = new Float32Array(2);
      p = new T.Vector2(t1);
      argTransform.rotation.transformed$2(this.position, p);
      p.add$1(0, argTransform.position);
      t2 = argBox.lowerBound;
      t3 = t1[0];
      t4 = this.radius;
      t5 = t1[1];
      t2 = t2.storage;
      t2[0] = t3 - t4;
      t2[1] = t5 - t4;
      t5 = argBox.upperBound;
      t2 = t1[0];
      t1 = t1[1];
      t5 = t5.storage;
      t5[0] = t2 + t4;
      t5[1] = t1 + t4;
    },
    clone$0: function(_) {
      var t1, t2, t3;
      t1 = this.type;
      t2 = this.radius;
      t3 = new T.Vector2(new Float32Array(2));
      t3.setFrom$1(this.position);
      return new V.CircleShape(t3, t1, t2);
    },
    computeMass$2: function(massData, density) {
      var t1, t2, t3;
      if (typeof density !== "number")
        return density.$mul();
      t1 = this.radius;
      massData.mass = density * 3.141592653589793 * t1 * t1;
      t1 = this.position;
      massData.center.setFrom$1(t1);
      t2 = massData.mass;
      t3 = this.radius;
      massData.inertia = t2 * (0.5 * t3 * t3 + t1.dot$1(t1));
    }
  },
  MassData: {
    "": "Object;mass<,center,inertia",
    setFrom$1: function(md) {
      this.mass = md.get$mass();
      this.inertia = md.get$inertia();
      this.center.setFrom$1(md.get$center());
    }
  },
  PolygonShape: {
    "": "Shape;centroid<,vertices,normals,vertexCount<,type,radius",
    clone$0: function(_) {
      return V.PolygonShape$copy(this);
    },
    setAsBox$2: function(hx, hy) {
      var t1, t2, t3;
      this.vertexCount = 4;
      t1 = this.vertices;
      t2 = -hx;
      t3 = -hy;
      t1[0].setValues$2(t2, t3);
      t1[1].setValues$2(hx, t3);
      t1[2].setValues$2(hx, hy);
      t1[3].setValues$2(t2, hy);
      t2 = this.normals;
      t1 = t2[0].storage;
      t1[0] = 0;
      t1[1] = -1;
      t1 = t2[1].storage;
      t1[0] = 1;
      t1[1] = 0;
      t1 = t2[2].storage;
      t1[0] = 0;
      t1[1] = 1;
      t2 = t2[3].storage;
      t2[0] = -1;
      t2[1] = 0;
      this.centroid.setZero$0();
    },
    setAsBoxWithCenterAndAngle$4: function(hx, hy, center, angle) {
      var xf, t1, t2, t3, i, t4, out, out0, t5, t6, t7, t8, t9, t10;
      this.vertexCount = 4;
      this.setAsBox$2(hx, hy);
      this.centroid.setFrom$1(center);
      xf = V.Transform$();
      xf.position.setFrom$1(center);
      t1 = xf.rotation;
      t1.setRotation$1(angle);
      for (t2 = this.vertices, t3 = this.normals, i = 0; i < this.vertexCount; ++i) {
        if (i >= 8)
          return H.ioore(t2, i);
        t4 = t2[i];
        V.Transform_mulToOut(xf, t4, t4);
        out = t3[i];
        if (out == null) {
          t4 = new Float32Array(2);
          out0 = new T.Vector2(t4);
          t5 = out.storage;
          t4[1] = t5[1];
          t4[0] = t5[0];
          out = out0;
        } else {
          t4 = out.storage;
          t4[1] = t4[1];
          t4[0] = t4[0];
        }
        t4 = t1.storage;
        t5 = t4[0];
        t6 = out.storage;
        t7 = t6[0];
        t8 = t4[2];
        t9 = t6[1];
        t10 = t4[1];
        t4 = t4[3];
        t6[0] = t5 * t7 + t8 * t9;
        t6[1] = t10 * t7 + t4 * t9;
      }
    },
    computeAxisAlignedBox$2: function(argAabb, argXf) {
      var t1, lower, t2, t3, v, t4, i, t5;
      t1 = new Float32Array(2);
      lower = new T.Vector2(t1);
      t2 = new Float32Array(2);
      t3 = new Float32Array(2);
      v = new T.Vector2(t3);
      t4 = this.vertices;
      V.Transform_mulToOut(argXf, t4[0], lower);
      new T.Vector2(t2).setFrom$1(lower);
      for (i = 1; i < this.vertexCount; ++i) {
        if (i >= 8)
          return H.ioore(t4, i);
        V.Transform_mulToOut(argXf, t4[i], v);
        t1[0] = P.min(t1[0], t3[0]);
        t1[1] = P.min(t1[1], t3[1]);
        t2[0] = P.max(t2[0], t3[0]);
        t2[1] = P.max(t2[1], t3[1]);
      }
      t3 = argAabb.lowerBound;
      t4 = t1[0];
      t5 = this.radius;
      t3 = t3.storage;
      t3[0] = t4 - t5;
      t3[1] = t1[1] - t5;
      t1 = argAabb.upperBound;
      t3 = t2[0];
      t1 = t1.storage;
      t1[0] = t3 + t5;
      t1[1] = t2[1] + t5;
    },
    computeMass$2: function(massData, density) {
      var t1, center, t2, pRef, t3, e1, t4, e2, t5, area, I, i, t6, p2, p3, $D, triangleArea, px, py, ex1, ey1, ex2, ey2;
      if (this.vertexCount === 2) {
        t1 = this.vertices;
        massData.center.setFrom$1(t1[0]).add$1(0, t1[1]).scale$1(0, 0.5);
        massData.mass = 0;
        massData.inertia = 0;
        return;
      }
      t1 = new Float32Array(2);
      center = new T.Vector2(t1);
      center.setZero$0();
      t2 = new Float32Array(2);
      pRef = new T.Vector2(t2);
      pRef.setZero$0();
      t3 = new Float32Array(2);
      e1 = new T.Vector2(t3);
      t4 = new Float32Array(2);
      e2 = new T.Vector2(t4);
      for (t5 = this.vertices, area = 0, I = 0, i = 0; t6 = this.vertexCount, i < t6;) {
        if (i >= 8)
          return H.ioore(t5, i);
        p2 = t5[i];
        ++i;
        if (i < t6) {
          if (i >= 8)
            return H.ioore(t5, i);
          p3 = t5[i];
        } else
          p3 = t5[0];
        t6 = p2.get$storage();
        if (1 >= t6.length)
          return H.ioore(t6, 1);
        t3[1] = t6[1];
        t3[0] = t6[0];
        e1.sub$1(pRef);
        t6 = p3.get$storage();
        if (1 >= t6.length)
          return H.ioore(t6, 1);
        t4[1] = t6[1];
        t4[0] = t6[0];
        e2.sub$1(pRef);
        $D = t3[0] * t4[1] - t3[1] * t4[0];
        triangleArea = 0.5 * $D;
        area += triangleArea;
        t6 = triangleArea * 0.3333333333333333;
        t1[0] = t1[0] + t6 * (t2[0] + p2.get$x(p2) + p3.get$x(p3));
        t1[1] = t1[1] + t6 * (t2[1] + p2.get$y(p2) + p3.get$y(p3));
        px = t2[0];
        py = t2[1];
        ex1 = t3[0];
        ey1 = t3[1];
        ex2 = t4[0];
        ey2 = t4[1];
        I += $D * (0.3333333333333333 * (0.25 * (ex1 * ex1 + ex2 * ex1 + ex2 * ex2) + (px * ex1 + px * ex2)) + 0.5 * px * px + (0.3333333333333333 * (0.25 * (ey1 * ey1 + ey2 * ey1 + ey2 * ey2) + (py * ey1 + py * ey2)) + 0.5 * py * py));
      }
      if (typeof density !== "number")
        return density.$mul();
      massData.mass = density * area;
      center.scale$1(0, 1 / area);
      massData.center.setFrom$1(center);
      massData.inertia = I * density;
    },
    PolygonShape$copy$1: function(other) {
      var t1, t2, i, t3, t4;
      for (t1 = this.vertices, t2 = other.vertices, i = 0; i < 8; ++i) {
        t3 = t2[i];
        t4 = new Float32Array(2);
        t3 = t3.get$storage();
        if (1 >= t3.length)
          return H.ioore(t3, 1);
        t4[1] = t3[1];
        t4[0] = t3[0];
        t1[i] = new T.Vector2(t4);
      }
      for (t1 = this.normals, t2 = other.normals, i = 0; i < 8; ++i) {
        t3 = t2[i];
        t4 = new Float32Array(2);
        t3 = t3.storage;
        t4[1] = t3[1];
        t4[0] = t3[0];
        t1[i] = new T.Vector2(t4);
      }
    },
    PolygonShape$0: function() {
      var t1, i;
      for (t1 = this.vertices, i = 0; i < 8; ++i)
        t1[i] = new T.Vector2(new Float32Array(2));
      for (t1 = this.normals, i = 0; i < 8; ++i)
        t1[i] = new T.Vector2(new Float32Array(2));
    },
    static: {PolygonShape$: function() {
        var t1, t2;
        t1 = Array(8);
        t1.fixed$length = init;
        t1 = H.setRuntimeTypeInfo(t1, [T.Vector2]);
        t2 = H.setRuntimeTypeInfo(Array(8), [T.Vector2]);
        t1 = new V.PolygonShape(new T.Vector2(new Float32Array(2)), t1, t2, 0, 1, 0.01);
        t1.PolygonShape$0();
        return t1;
      }, PolygonShape$copy: function(other) {
        var t1, t2, t3, t4, t5;
        t1 = other.radius;
        t2 = other.vertexCount;
        t3 = Array(8);
        t3.fixed$length = init;
        t3 = H.setRuntimeTypeInfo(t3, [T.Vector2]);
        t4 = H.setRuntimeTypeInfo(Array(8), [T.Vector2]);
        t5 = new T.Vector2(new Float32Array(2));
        t5.setFrom$1(other.centroid);
        t1 = new V.PolygonShape(t5, t3, t4, t2, 1, t1);
        t1.PolygonShape$copy$1(other);
        return t1;
      }}
  },
  Shape: {
    "": "Object;"
  },
  Simplex: {
    "": "Object;v1,v2,v3,vertices,count,e13,e23,e12,case2,case22,case3,case33",
    readCache$5: function(cache, proxyA, transformA, proxyB, transformB) {
      var t1, t2, t3, i, t4, v, t5, t6, wALocal, wBLocal, t7, metric1, metric2;
      this.count = cache.count;
      for (t1 = this.vertices, t2 = cache.indexA, t3 = cache.indexB, i = 0; t4 = this.count, i < t4; ++i) {
        if (i >= 3)
          return H.ioore(t1, i);
        v = t1[i];
        if (i >= t2.length)
          return H.ioore(t2, i);
        t4 = t2[i];
        v.indexA = t4;
        if (i >= t3.length)
          return H.ioore(t3, i);
        t5 = t3[i];
        v.indexB = t5;
        t6 = proxyA.get$vertices();
        if (t4 >>> 0 !== t4 || t4 >= 8)
          return H.ioore(t6, t4);
        wALocal = t6[t4];
        t4 = proxyB.get$vertices();
        if (t5 >>> 0 !== t5 || t5 >= 8)
          return H.ioore(t4, t5);
        wBLocal = t4[t5];
        t5 = v.wA;
        V.Transform_mulToOut(transformA, wALocal, t5);
        t4 = v.wB;
        V.Transform_mulToOut(transformB, wBLocal, t4);
        t6 = v.w;
        t7 = t6.storage;
        t4 = t4.storage;
        t7[1] = t4[1];
        t7[0] = t4[0];
        t6.sub$1(t5);
        v.a = 0;
      }
      if (t4 > 1) {
        metric1 = cache.metric;
        metric2 = this.getMetric$0();
        if (metric2 < 0.5 * metric1 || 2 * metric1 < metric2 || metric2 < 1.192e-7)
          this.count = 0;
      }
      if (this.count === 0) {
        v = t1[0];
        v.indexA = 0;
        v.indexB = 0;
        wALocal = proxyA.get$vertices()[0];
        wBLocal = proxyB.get$vertices()[0];
        t1 = v.wA;
        V.Transform_mulToOut(transformA, wALocal, t1);
        t2 = v.wB;
        V.Transform_mulToOut(transformB, wBLocal, t2);
        v.w.setFrom$1(t2).sub$1(t1);
        this.count = 1;
      }
    },
    writeCache$1: function(cache) {
      var t1, t2, t3, t4, t5, t6, i, t7;
      cache.metric = this.getMetric$0();
      t1 = this.count;
      cache.count = t1;
      for (t2 = cache.indexA, t3 = this.vertices, t4 = t2.length, t5 = cache.indexB, t6 = t5.length, i = 0; i < t1; ++i) {
        if (i >= 3)
          return H.ioore(t3, i);
        t7 = t3[i].indexA;
        if (i >= t4)
          return H.ioore(t2, i);
        t2[i] = t7;
        t7 = t3[i].indexB;
        if (i >= t6)
          return H.ioore(t5, i);
        t5[i] = t7;
      }
    },
    getSearchDirection$1: function(out) {
      var t1, t2;
      switch (this.count) {
        case 1:
          out.setFrom$1(this.v1.w).negate$0();
          return;
        case 2:
          t1 = this.e12;
          t2 = this.v1.w;
          t1.setFrom$1(this.v2.w).sub$1(t2);
          out.setFrom$1(t2).negate$0();
          if (t1.cross$1(out) > 0)
            V.Vector2_crossVectorAndNumToOut(t1, -1, out);
          else
            V.Vector2_crossVectorAndNumToOut(t1, 1, out);
          break;
        default:
          out.setZero$0();
          return;
      }
    },
    getClosestPoint$1: function(out) {
      var t1, t2, t3;
      switch (this.count) {
        case 0:
          out.setZero$0();
          return;
        case 1:
          out.setFrom$1(this.v1.w);
          return;
        case 2:
          t1 = this.case22;
          t2 = this.v2;
          t1.setFrom$1(t2.w).scale$1(0, t2.a);
          t2 = this.case2;
          t3 = this.v1;
          t2.setFrom$1(t3.w).scale$1(0, t3.a).add$1(0, t1);
          out.setFrom$1(t2);
          return;
        case 3:
          out.setZero$0();
          return;
        default:
          out.setZero$0();
          return;
      }
    },
    getMetric$0: function() {
      var t1, t2, t3;
      switch (this.count) {
        case 0:
          return 0;
        case 1:
          return 0;
        case 2:
          t1 = V.MathBox_distanceSquared(this.v1.w, this.v2.w);
          return Math.sqrt(t1);
        case 3:
          t1 = this.case3;
          t2 = this.v1.w;
          t1.setFrom$1(this.v2.w).sub$1(t2);
          t3 = this.case33;
          t3.setFrom$1(this.v3.w).sub$1(t2);
          return t1.cross$1(t3);
        default:
          return 0;
      }
    },
    solve2$0: function() {
      var t1, w1, t2, w2, t3, d12_2, d12_1, inv_d12;
      t1 = this.v1;
      w1 = t1.w;
      t2 = this.v2;
      w2 = t2.w;
      t3 = this.e12;
      t3.setFrom$1(w2).sub$1(w1);
      d12_2 = -w1.dot$1(t3);
      if (d12_2 <= 0) {
        t1.a = 1;
        this.count = 1;
        return;
      }
      d12_1 = w2.dot$1(t3);
      if (d12_1 <= 0) {
        t2.a = 1;
        this.count = 1;
        t1.setFrom$1(t2);
        return;
      }
      inv_d12 = 1 / (d12_1 + d12_2);
      t1.a = d12_1 * inv_d12;
      t2.a = d12_2 * inv_d12;
      this.count = 2;
    },
    solve3$0: function() {
      var t1, w1, t2, w2, t3, w3, t4, w1e12, w2e12, d12_2, t5, w1e13, w3e13, d13_2, t6, w2e23, w3e23, d23_2, n123, d123_1, d123_2, d123_3, inv_d12, inv_d13, inv_d23, inv_d123;
      t1 = this.v1;
      w1 = t1.w;
      t2 = this.v2;
      w2 = t2.w;
      t3 = this.v3;
      w3 = t3.w;
      t4 = this.e12;
      t4.setFrom$1(w2).sub$1(w1);
      w1e12 = w1.dot$1(t4);
      w2e12 = w2.dot$1(t4);
      d12_2 = -w1e12;
      t5 = this.e13;
      t5.setFrom$1(w3).sub$1(w1);
      w1e13 = w1.dot$1(t5);
      w3e13 = w3.dot$1(t5);
      d13_2 = -w1e13;
      t6 = this.e23;
      t6.setFrom$1(w3).sub$1(w2);
      w2e23 = w2.dot$1(t6);
      w3e23 = w3.dot$1(t6);
      d23_2 = -w2e23;
      n123 = t4.cross$1(t5);
      d123_1 = n123 * w2.cross$1(w3);
      d123_2 = n123 * w3.cross$1(w1);
      d123_3 = n123 * w1.cross$1(w2);
      if (d12_2 <= 0 && d13_2 <= 0) {
        t1.a = 1;
        this.count = 1;
        return;
      }
      if (w2e12 > 0 && d12_2 > 0 && d123_3 <= 0) {
        inv_d12 = 1 / (w2e12 + d12_2);
        t1.a = w2e12 * inv_d12;
        t2.a = d12_2 * inv_d12;
        this.count = 2;
        return;
      }
      if (w3e13 > 0 && d13_2 > 0 && d123_2 <= 0) {
        inv_d13 = 1 / (w3e13 + d13_2);
        t1.a = w3e13 * inv_d13;
        t3.a = d13_2 * inv_d13;
        this.count = 2;
        t2.setFrom$1(t3);
        return;
      }
      if (w2e12 <= 0 && d23_2 <= 0) {
        t2.a = 1;
        this.count = 1;
        t1.setFrom$1(t2);
        return;
      }
      if (w3e13 <= 0 && w3e23 <= 0) {
        t3.a = 1;
        this.count = 1;
        t1.setFrom$1(t3);
        return;
      }
      if (w3e23 > 0 && d23_2 > 0 && d123_1 <= 0) {
        inv_d23 = 1 / (w3e23 + d23_2);
        t2.a = w3e23 * inv_d23;
        t3.a = d23_2 * inv_d23;
        this.count = 2;
        t1.setFrom$1(t3);
        return;
      }
      inv_d123 = 1 / (d123_1 + d123_2 + d123_3);
      t1.a = d123_1 * inv_d123;
      t2.a = d123_2 * inv_d123;
      t3.a = d123_3 * inv_d123;
      this.count = 3;
    },
    Simplex$0: function() {
      var t1 = this.vertices;
      t1[0] = this.v1;
      t1[1] = this.v2;
      t1[2] = this.v3;
    }
  },
  SimplexCache: {
    "": "Object;metric,count,indexA,indexB",
    setFrom$1: function(sc) {
      var t1, t2, t3;
      t1 = this.indexA;
      t2 = t1.length;
      t3 = sc.get$indexA();
      H.IterableMixinWorkaround_setRangeList(t1, 0, t2, t3, 0);
      t1 = this.indexB;
      t2 = t1.length;
      t3 = sc.get$indexB();
      H.IterableMixinWorkaround_setRangeList(t1, 0, t2, t3, 0);
      this.metric = sc.get$metric();
      this.count = sc.get$count();
    },
    static: {SimplexCache$: function() {
        return new V.SimplexCache(0, 0, P.List_List$generate(3, new V.SimplexCache_closure(), true, J.JSInt), P.List_List$generate(3, new V.SimplexCache_closure0(), true, J.JSInt));
      }}
  },
  SimplexCache_closure: {
    "": "Closure:13;",
    call$1: function(i) {
      return 2147483647;
    }
  },
  SimplexCache_closure0: {
    "": "Closure:13;",
    call$1: function(i) {
      return 2147483647;
    }
  },
  SimplexVertex: {
    "": "Object;wA<,wB,w,a,indexA,indexB",
    setFrom$1: function(sv) {
      this.wA.setFrom$1(sv.get$wA());
      this.wB.setFrom$1(sv.wB);
      this.w.setFrom$1(sv.w);
      this.a = sv.a;
      this.indexA = sv.indexA;
      this.indexB = sv.indexB;
    },
    toString$0: function(_) {
      return "wA: " + H.S(this.wA) + ", wB: " + H.S(this.wB) + ", w: " + H.S(this.w);
    },
    static: {SimplexVertex$: function() {
        var t1, t2;
        t1 = new Float32Array(2);
        t2 = new Float32Array(2);
        return new V.SimplexVertex(new T.Vector2(t1), new T.Vector2(t2), new T.Vector2(new Float32Array(2)), 0, 0, 0);
      }}
  },
  TimeOfImpact: {
    "": "Object;cache,distanceInput,xfA,xfB,distanceOutput,fcn,indexes,sweepA,sweepB,pool",
    timeOfImpact$2: function(output, input) {
      var t1, proxyA, proxyB, t2, tMax, target, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, iter, t14, t20, pushBackIter, done, s2, s1, a2, a1, rootIterCount, t, s;
      t1 = $.TimeOfImpact_toiCalls;
      if (typeof t1 !== "number")
        return t1.$add();
      $.TimeOfImpact_toiCalls = t1 + 1;
      output.state = 0;
      output.t = input.tMax;
      proxyA = input.proxyA;
      proxyB = input.proxyB;
      t1 = this.sweepA;
      t1.setFrom$1(input.sweepA);
      t2 = this.sweepB;
      t2.setFrom$1(input.sweepB);
      t1.normalize$0();
      t2.normalize$0();
      tMax = input.tMax;
      target = P.max(0.005, proxyA.radius + proxyB.radius - 0.015);
      t3 = this.cache;
      t3.count = 0;
      t4 = this.distanceInput;
      t4.proxyA = proxyA;
      t4.proxyB = proxyB;
      t4.useRadii = false;
      for (t5 = this.fcn, t6 = this.indexes, t7 = target + 0.00125, t8 = target - 0.00125, t9 = this.distanceOutput, t10 = this.xfA, t11 = this.xfB, t12 = this.pool, t13 = 0, iter = 0; true;) {
        t1.getTransform$2(t10, t13);
        t2.getTransform$2(t11, t13);
        t4.transformA = t10;
        t4.transformB = t11;
        t12.distance.distance$3(t9, t3, t4);
        t14 = t9.distance;
        if (typeof t14 !== "number")
          return t14.$le();
        if (t14 <= 0) {
          output.state = 2;
          output.t = 0;
          break;
        }
        if (t14 < t7) {
          output.state = 3;
          output.t = t13;
          break;
        }
        t5.initialize$6(0, t3, proxyA, t1, proxyB, t2, t13);
        for (t20 = tMax, pushBackIter = 0; done = false, true;) {
          s2 = t5.findMinSeparation$2(t6, t20);
          if (s2 > t7) {
            output.state = 4;
            output.t = tMax;
            done = true;
            break;
          }
          if (s2 > t8) {
            t13 = t20;
            done = false;
            break;
          }
          s1 = t5.evaluate$3(t6[0], t6[1], t13);
          if (s1 < t8) {
            output.state = 1;
            output.t = t13;
            done = true;
            break;
          }
          if (s1 <= t7) {
            output.state = 3;
            output.t = t13;
            done = true;
            break;
          }
          for (a2 = t20, a1 = t13, rootIterCount = 0; true;) {
            t = (rootIterCount & 1) === 1 ? a1 + (target - s1) * (a2 - a1) / (s2 - s1) : 0.5 * (a1 + a2);
            s = t5.evaluate$3(t6[0], t6[1], t);
            if (Math.abs(s - target) < 0.00125) {
              t20 = t;
              break;
            }
            if (s > target) {
              a1 = t;
              s1 = s;
            } else {
              a2 = t;
              s2 = s;
            }
            ++rootIterCount;
            t14 = $.TimeOfImpact_toiRootIters;
            if (typeof t14 !== "number")
              return t14.$add();
            $.TimeOfImpact_toiRootIters = t14 + 1;
            if (rootIterCount === 50)
              break;
          }
          $.TimeOfImpact_toiMaxRootIters = P.max($.TimeOfImpact_toiMaxRootIters, rootIterCount);
          ++pushBackIter;
          if (pushBackIter === 8) {
            done = false;
            break;
          }
        }
        ++iter;
        t14 = $.TimeOfImpact_toiIters;
        if (typeof t14 !== "number")
          return t14.$add();
        $.TimeOfImpact_toiIters = t14 + 1;
        if (done)
          break;
        if (iter === 1000) {
          output.state = 1;
          output.t = t13;
          break;
        }
      }
      $.TimeOfImpact_toiMaxIters = P.max($.TimeOfImpact_toiMaxIters, iter);
    },
    TimeOfImpact$_construct$1: function(argPool) {
      var t1 = this.indexes;
      t1[0] = 0;
      t1[1] = 0;
      $.TimeOfImpact_toiCalls = 0;
      $.TimeOfImpact_toiIters = 0;
      $.TimeOfImpact_toiMaxIters = 0;
      $.TimeOfImpact_toiRootIters = 0;
      $.TimeOfImpact_toiMaxRootIters = 0;
    },
    static: {"": "TimeOfImpact_MAX_ITERATIONS,TimeOfImpact_toiCalls,TimeOfImpact_toiIters,TimeOfImpact_toiMaxIters,TimeOfImpact_toiRootIters,TimeOfImpact_toiMaxRootIters"}
  },
  SeparationFunction: {
    "": "Object;proxyA@,proxyB@,type,localPoint<,axis,sweepA,sweepB,localPointA,localPointB,pointA,pointB,localPointA1,localPointA2,normal,localPointB1,localPointB2,axisA,axisB,temp,xfa,xfb",
    initialize$6: function(_, cache, argProxyA, argSweepA, argProxyB, argSweepB, t1) {
      var count, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, s;
      this.proxyA = argProxyA;
      this.proxyB = argProxyB;
      count = cache.count;
      this.sweepA = argSweepA;
      this.sweepB = argSweepB;
      t2 = this.xfa;
      argSweepA.getTransform$2(t2, t1);
      t3 = this.xfb;
      this.sweepB.getTransform$2(t3, t1);
      if (count === 1) {
        this.type = 0;
        t1 = this.localPointA;
        t4 = this.proxyA.get$vertices();
        t5 = cache.indexA;
        if (0 >= t5.length)
          return H.ioore(t5, 0);
        t5 = t5[0];
        if (t5 >>> 0 !== t5 || t5 >= 8)
          return H.ioore(t4, t5);
        t1.setFrom$1(t4[t5]);
        t5 = this.localPointB;
        t4 = this.proxyB.get$vertices();
        t6 = cache.indexB;
        if (0 >= t6.length)
          return H.ioore(t6, 0);
        t6 = t6[0];
        if (t6 >>> 0 !== t6 || t6 >= 8)
          return H.ioore(t4, t6);
        t5.setFrom$1(t4[t6]);
        t6 = this.pointA;
        V.Transform_mulToOut(t2, t1, t6);
        t1 = this.pointB;
        V.Transform_mulToOut(t3, t5, t1);
        t5 = this.axis;
        t5.setFrom$1(t1).sub$1(t6);
        return t5.normalizeLength$0();
      } else {
        t1 = cache.indexA;
        t4 = t1.length;
        if (0 >= t4)
          return H.ioore(t1, 0);
        t5 = t1[0];
        if (1 >= t4)
          return H.ioore(t1, 1);
        t4 = cache.indexB;
        t6 = this.pointA;
        t7 = this.localPoint;
        t8 = this.normal;
        t9 = this.axis;
        t10 = this.pointB;
        t11 = this.temp;
        if (J.$eq(t5, t1[1])) {
          this.type = 2;
          t5 = this.localPointB1;
          t12 = this.proxyB.get$vertices();
          if (0 >= t4.length)
            return H.ioore(t4, 0);
          t13 = t4[0];
          if (t13 >>> 0 !== t13 || t13 >= 8)
            return H.ioore(t12, t13);
          t5.setFrom$1(t12[t13]);
          t13 = this.localPointB2;
          t12 = this.proxyB.get$vertices();
          if (1 >= t4.length)
            return H.ioore(t4, 1);
          t4 = t4[1];
          if (t4 >>> 0 !== t4 || t4 >= 8)
            return H.ioore(t12, t4);
          t13.setFrom$1(t12[t4]);
          t11.setFrom$1(t13).sub$1(t5);
          V.Vector2_crossVectorAndNumToOut(t11, 1, t9);
          t9.normalize$0();
          t3.rotation.transformed$2(t9, t8);
          t7.setFrom$1(t5);
          t7.add$1(0, t13);
          t7.scale$1(0, 0.5);
          V.Transform_mulToOut(t3, t7, t10);
          t7 = this.localPointA;
          t3 = this.proxyA.get$vertices();
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          t1 = t1[0];
          if (t1 >>> 0 !== t1 || t1 >= 8)
            return H.ioore(t3, t1);
          t7.setFrom$1(t3[t1]);
          V.Transform_mulToOut(t2, t7, t6);
          t11.setFrom$1(t6);
          t11.sub$1(t10);
          s = t11.dot$1(t8);
          if (s < 0) {
            t9.negate$0();
            s = -s;
          }
          return s;
        } else {
          this.type = 1;
          t5 = this.localPointA1;
          t12 = this.proxyA.get$vertices();
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          t13 = t1[0];
          if (t13 >>> 0 !== t13 || t13 >= 8)
            return H.ioore(t12, t13);
          t5.setFrom$1(t12[t13]);
          t13 = this.localPointA2;
          t12 = this.proxyA.get$vertices();
          if (1 >= t1.length)
            return H.ioore(t1, 1);
          t1 = t1[1];
          if (t1 >>> 0 !== t1 || t1 >= 8)
            return H.ioore(t12, t1);
          t13.setFrom$1(t12[t1]);
          t11.setFrom$1(t13);
          t11.sub$1(t5);
          V.Vector2_crossVectorAndNumToOut(t11, 1, t9);
          t9.normalize$0();
          t2.rotation.transformed$2(t9, t8);
          t7.setFrom$1(t5);
          t7.add$1(0, t13);
          t7.scale$1(0, 0.5);
          V.Transform_mulToOut(t2, t7, t6);
          t7 = this.localPointB;
          t2 = this.proxyB.get$vertices();
          if (0 >= t4.length)
            return H.ioore(t4, 0);
          t4 = t4[0];
          if (t4 >>> 0 !== t4 || t4 >= 8)
            return H.ioore(t2, t4);
          t7.setFrom$1(t2[t4]);
          V.Transform_mulToOut(t3, t7, t10);
          t11.setFrom$1(t10);
          t11.sub$1(t6);
          s = t11.dot$1(t8);
          if (s < 0) {
            t9.negate$0();
            s = -s;
          }
          return s;
        }
      }
    },
    findMinSeparation$2: function(indexes, t) {
      var t1, t2, t3, t4, t5, t6, t7;
      t1 = this.xfa;
      this.sweepA.getTransform$2(t1, t);
      t2 = this.xfb;
      this.sweepB.getTransform$2(t2, t);
      switch (this.type) {
        case 0:
          t3 = this.axis;
          t4 = this.axisA;
          t1.rotation.transposed$0().transformed$2(t3, t4);
          t5 = this.axisB;
          t2.rotation.transposed$0().transformed$2(t3.negate$0(), t5);
          t3.negate$0();
          indexes[0] = this.proxyA.getSupport$1(t4);
          indexes[1] = this.proxyB.getSupport$1(t5);
          t5 = this.localPointA;
          t4 = this.proxyA.get$vertices();
          t6 = indexes[0];
          if (t6 >>> 0 !== t6 || t6 >= 8)
            return H.ioore(t4, t6);
          t5.setFrom$1(t4[t6]);
          t6 = this.localPointB;
          t4 = this.proxyB.get$vertices();
          t7 = indexes[1];
          if (t7 >>> 0 !== t7 || t7 >= 8)
            return H.ioore(t4, t7);
          t6.setFrom$1(t4[t7]);
          t7 = this.pointA;
          V.Transform_mulToOut(t1, t5, t7);
          t5 = this.pointB;
          V.Transform_mulToOut(t2, t6, t5);
          return t5.sub$1(t7).dot$1(t3);
        case 1:
          t3 = this.normal;
          t1.rotation.transformed$2(this.axis, t3);
          t4 = this.pointA;
          V.Transform_mulToOut(t1, this.localPoint, t4);
          t3.negate$0();
          t1 = this.axisB;
          t2.rotation.transposed$0().transformed$2(t3, t1);
          t3.negate$0();
          indexes[0] = -1;
          t1 = this.proxyB.getSupport$1(t1);
          indexes[1] = t1;
          t5 = this.localPointB;
          t6 = this.proxyB.get$vertices();
          if (t1 >= 8)
            return H.ioore(t6, t1);
          t5.setFrom$1(t6[t1]);
          t1 = this.pointB;
          V.Transform_mulToOut(t2, t5, t1);
          return t1.sub$1(t4).dot$1(t3);
        case 2:
          t3 = this.normal;
          t2.rotation.transformed$2(this.axis, t3);
          t4 = this.pointB;
          V.Transform_mulToOut(t2, this.localPoint, t4);
          t2 = this.axisA;
          t1.rotation.transposed$0().transformed$2(t3.negate$0(), t2);
          t3.negate$0();
          indexes[1] = -1;
          t2 = this.proxyA.getSupport$1(t2);
          indexes[0] = t2;
          t5 = this.localPointA;
          t6 = this.proxyA.get$vertices();
          if (t2 >= 8)
            return H.ioore(t6, t2);
          t5.setFrom$1(t6[t2]);
          t2 = this.pointA;
          V.Transform_mulToOut(t1, t5, t2);
          return t2.sub$1(t4).dot$1(t3);
        default:
          indexes[0] = -1;
          indexes[1] = -1;
          return 0;
      }
    },
    evaluate$3: function(indexA, indexB, t) {
      var t1, t2, t3, t4, t5, t6;
      t1 = this.xfa;
      this.sweepA.getTransform$2(t1, t);
      t2 = this.xfb;
      this.sweepB.getTransform$2(t2, t);
      switch (this.type) {
        case 0:
          t3 = this.axis;
          t1.rotation.transposed$0().transformed$2(t3, this.axisA);
          t2.rotation.transposed$0().transformed$2(t3.negate$0(), this.axisB);
          t3.negate$0();
          t4 = this.localPointA;
          t5 = this.proxyA.get$vertices();
          if (indexA >>> 0 !== indexA || indexA >= 8)
            return H.ioore(t5, indexA);
          t4.setFrom$1(t5[indexA]);
          t5 = this.localPointB;
          t6 = this.proxyB.get$vertices();
          if (indexB >>> 0 !== indexB || indexB >= 8)
            return H.ioore(t6, indexB);
          t5.setFrom$1(t6[indexB]);
          t6 = this.pointA;
          V.Transform_mulToOut(t1, t4, t6);
          t4 = this.pointB;
          V.Transform_mulToOut(t2, t5, t4);
          return t4.sub$1(t6).dot$1(t3);
        case 1:
          t3 = this.normal;
          t1.rotation.transformed$2(this.axis, t3);
          t4 = this.pointA;
          V.Transform_mulToOut(t1, this.localPoint, t4);
          t3.negate$0();
          t2.rotation.transposed$0().transformed$2(t3, this.axisB);
          t3.negate$0();
          t1 = this.localPointB;
          t5 = this.proxyB.get$vertices();
          if (indexB >>> 0 !== indexB || indexB >= 8)
            return H.ioore(t5, indexB);
          t1.setFrom$1(t5[indexB]);
          t5 = this.pointB;
          V.Transform_mulToOut(t2, t1, t5);
          return t5.sub$1(t4).dot$1(t3);
        case 2:
          t3 = this.normal;
          t2.rotation.transformed$2(this.axis, t3);
          t4 = this.pointB;
          V.Transform_mulToOut(t2, this.localPoint, t4);
          t1.rotation.transposed$0().transformed$2(t3.negate$0(), this.axisA);
          t3.negate$0();
          t2 = this.localPointA;
          t5 = this.proxyA.get$vertices();
          if (indexA >>> 0 !== indexA || indexA >= 8)
            return H.ioore(t5, indexA);
          t2.setFrom$1(t5[indexA]);
          t5 = this.pointA;
          V.Transform_mulToOut(t1, t2, t5);
          return t5.sub$1(t4).dot$1(t3);
        default:
          return 0;
      }
    }
  },
  TimeOfImpactInput: {
    "": "Object;proxyA<,proxyB<,sweepA,sweepB,tMax"
  },
  TimeOfImpactOutput: {
    "": "Object;state,t"
  },
  WorldManifold: {
    "": "Object;normal,points,pool3,pool4",
    initialize$5: function(_, manifold, xfA, radiusA, xfB, radiusB) {
      var pointA, pointB, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, i, t13, scalar;
      switch (manifold.type) {
        case 0:
          pointA = this.pool3;
          pointB = this.pool4;
          t1 = this.normal;
          t2 = t1.storage;
          t2[0] = 1;
          t2[1] = 0;
          t3 = xfA.position.storage;
          t4 = t3[0];
          t5 = xfA.rotation.storage;
          t6 = t5[0];
          t7 = manifold.localPoint.storage;
          t8 = t7[0];
          t9 = t5[2];
          t10 = t7[1];
          t11 = pointA.storage;
          t11[0] = t4 + t6 * t8 + t9 * t10;
          t11[1] = t3[1] + t5[1] * t7[0] + t5[3] * t10;
          t10 = xfB.position.storage;
          t5 = t10[0];
          t7 = xfB.rotation.storage;
          t3 = t7[0];
          t9 = manifold.points[0].localPoint.storage;
          t8 = t9[0];
          t6 = t7[2];
          t4 = t9[1];
          t12 = pointB.storage;
          t12[0] = t5 + t3 * t8 + t6 * t4;
          t12[1] = t10[1] + t7[1] * t9[0] + t7[3] * t4;
          if (V.MathBox_distanceSquared(pointA, pointB) > 1.4208639999999999e-14) {
            t2[0] = t12[0] - t11[0];
            t2[1] = t12[1] - t11[1];
            t1.normalize$0();
          }
          t1 = t2[0];
          t3 = t11[0];
          t2 = t2[1];
          t11 = t11[1];
          t4 = t12[0];
          t12 = t12[1];
          t5 = this.points;
          if (0 >= t5.length)
            return H.ioore(t5, 0);
          J.set$x$x(t5[0], (t1 * radiusA + t3 + (-t1 * radiusB + t4)) * 0.5);
          if (0 >= t5.length)
            return H.ioore(t5, 0);
          J.set$y$x(t5[0], (t2 * radiusA + t11 + (-t2 * radiusB + t12)) * 0.5);
          return;
        case 1:
          t1 = xfA.rotation.storage;
          t2 = t1[0];
          t3 = manifold.localNormal.storage;
          t4 = t3[0];
          t5 = t1[2];
          t6 = t3[1];
          t7 = this.normal.storage;
          t7[0] = t2 * t4 + t5 * t6;
          t4 = t1[1];
          t3 = t3[0];
          t2 = t1[3];
          t7[1] = t4 * t3 + t2 * t6;
          t6 = xfA.position.storage;
          t3 = t6[0];
          t4 = t1[0];
          t8 = manifold.localPoint.storage;
          t9 = t8[0];
          t10 = t8[1];
          t11 = this.pool3.storage;
          t11[0] = t3 + t4 * t9 + t5 * t10;
          t11[1] = t6[1] + t1[1] * t8[0] + t2 * t10;
          for (t1 = xfB.position.storage, t2 = xfB.rotation.storage, t3 = manifold.points, t4 = this.pool4.storage, t5 = this.points, i = 0; i < manifold.pointCount; ++i) {
            t6 = t1[0];
            t8 = t2[0];
            if (i >= 2)
              return H.ioore(t3, i);
            t9 = t3[i].localPoint.storage;
            t10 = t9[0];
            t12 = t2[2];
            t13 = t9[1];
            t4[0] = t6 + t8 * t10 + t12 * t13;
            t4[1] = t1[1] + t2[1] * t9[0] + t2[3] * t13;
            t13 = t4[0];
            t9 = t11[0];
            t12 = t7[0];
            t10 = t4[1];
            t8 = t11[1];
            t6 = t7[1];
            scalar = radiusA - ((t13 - t9) * t12 + (t10 - t8) * t6);
            if (i >= t5.length)
              return H.ioore(t5, i);
            J.set$x$x(t5[i], (t12 * scalar + t13 + (-t12 * radiusB + t13)) * 0.5);
            if (i >= t5.length)
              return H.ioore(t5, i);
            J.set$y$x(t5[i], (t6 * scalar + t10 + (-t6 * radiusB + t10)) * 0.5);
          }
          return;
        case 2:
          t1 = xfB.rotation.storage;
          t2 = t1[0];
          t3 = manifold.localNormal.storage;
          t4 = t3[0];
          t5 = t1[2];
          t6 = t3[1];
          t7 = this.normal.storage;
          t7[0] = t2 * t4 + t5 * t6;
          t4 = t1[1];
          t3 = t3[0];
          t2 = t1[3];
          t7[1] = t4 * t3 + t2 * t6;
          t6 = xfB.position.storage;
          t3 = t6[0];
          t4 = t1[0];
          t8 = manifold.localPoint.storage;
          t9 = t8[0];
          t10 = t8[1];
          t11 = this.pool3.storage;
          t11[0] = t3 + t4 * t9 + t5 * t10;
          t11[1] = t6[1] + t1[1] * t8[0] + t2 * t10;
          for (t1 = xfA.position.storage, t2 = xfA.rotation.storage, t3 = manifold.points, t4 = this.pool4.storage, t5 = this.points, i = 0; i < manifold.pointCount; ++i) {
            t6 = t1[0];
            t8 = t2[0];
            if (i >= 2)
              return H.ioore(t3, i);
            t9 = t3[i].localPoint.storage;
            t10 = t9[0];
            t12 = t2[2];
            t13 = t9[1];
            t4[0] = t6 + t8 * t10 + t12 * t13;
            t4[1] = t1[1] + t2[1] * t9[0] + t2[3] * t13;
            t13 = t4[0];
            t9 = t11[0];
            t12 = t7[0];
            t10 = t4[1];
            t8 = t11[1];
            t6 = t7[1];
            scalar = radiusB - ((t13 - t9) * t12 + (t10 - t8) * t6);
            if (i >= t5.length)
              return H.ioore(t5, i);
            J.set$x$x(t5[i], (-t12 * radiusA + t13 + (t12 * scalar + t13)) * 0.5);
            if (i >= t5.length)
              return H.ioore(t5, i);
            J.set$y$x(t5[i], (-t6 * radiusA + t10 + (t6 * scalar + t10)) * 0.5);
          }
          t7[0] = -t7[0];
          t7[1] = -t7[1];
          break;
        default:
      }
    },
    static: {WorldManifold$: function() {
        var t1, t2, t3;
        t1 = new Float32Array(2);
        t2 = new Float32Array(2);
        t3 = new Float32Array(2);
        return new V.WorldManifold(new T.Vector2(t1), P.List_List$generate(2, new V.WorldManifold_closure(), true, T.Vector2), new T.Vector2(t2), new T.Vector2(t3));
      }}
  },
  WorldManifold_closure: {
    "": "Closure:13;",
    call$1: function(i) {
      return new T.Vector2(new Float32Array(2));
    }
  },
  Color3: {
    "": "Object;x*,y*,z",
    setFromRGBF$3: function(r, g, b) {
      this.x = C.JSInt_methods.toInt$0(C.JSNumber_methods.toInt$0(Math.floor(r * 255)));
      this.y = C.JSInt_methods.toInt$0(C.JSNumber_methods.toInt$0(Math.floor(g * 255)));
      this.z = C.JSInt_methods.toInt$0(C.JSNumber_methods.toInt$0(Math.floor(b * 255)));
    },
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      return typeof other === "object" && other !== null && !!t1.$isColor3 && this.x === other.x && this.y === other.y && this.z === other.z;
    },
    $isColor3: true,
    static: {Color3$fromRGBF: function(r, g, b) {
        return new V.Color3(C.JSInt_methods.toInt$0(C.JSNumber_methods.toInt$0(Math.floor(r * 255))), C.JSInt_methods.toInt$0(C.JSNumber_methods.toInt$0(Math.floor(g * 255))), C.JSInt_methods.toInt$0(C.JSNumber_methods.toInt$0(Math.floor(b * 255))));
      }}
  },
  Sweep: {
    "": "Object;localCenter<,centerZero<,center,angleZero,angle<",
    $eq: function(_, other) {
      if (other == null)
        return false;
      return this.localCenter === other.get$localCenter() && this.centerZero === other.get$centerZero() && this.center === other.center && this.angleZero === other.angleZero && this.angle === other.angle;
    },
    setFrom$1: function(other) {
      this.localCenter.setFrom$1(other.get$localCenter());
      this.centerZero.setFrom$1(other.centerZero);
      this.center.setFrom$1(other.center);
      this.angleZero = other.angleZero;
      this.angle = other.angle;
    },
    normalize$0: function() {
      var d = 6.283185307179586 * C.JSNumber_methods.toInt$0(Math.floor(this.angleZero / 6.283185307179586));
      this.angleZero = this.angleZero - d;
      this.angle = this.angle - d;
    },
    getTransform$2: function(xf, alpha) {
      var t1, t2, t3, t4, t5, t6, t7, t8;
      t1 = 1 - alpha;
      t2 = this.centerZero.storage;
      t3 = this.center.storage;
      t4 = xf.position.storage;
      t4[0] = t1 * t2[0] + alpha * t3[0];
      t4[1] = t1 * t2[1] + alpha * t3[1];
      t3 = xf.rotation;
      t3.setRotation$1(t1 * this.angleZero + alpha * this.angle);
      t1 = t4[0];
      t3 = t3.storage;
      t2 = t3[0];
      t5 = this.localCenter.storage;
      t6 = t5[0];
      t7 = t3[2];
      t8 = t5[1];
      t4[0] = t1 - (t2 * t6 + t7 * t8);
      t4[1] = t4[1] - (t3[1] * t5[0] + t3[3] * t8);
    },
    advance$1: function(time) {
      var t1, t2, t3;
      t1 = 1 - time;
      t2 = this.centerZero.storage;
      t3 = this.center.storage;
      t2[0] = t1 * t2[0] + time * t3[0];
      t2[1] = t1 * t2[1] + time * t3[1];
      this.angleZero = t1 * this.angleZero + time * this.angle;
    },
    static: {Sweep$: function() {
        var t1, t2;
        t1 = new Float32Array(2);
        t2 = new Float32Array(2);
        return new V.Sweep(new T.Vector2(t1), new T.Vector2(t2), new T.Vector2(new Float32Array(2)), 0, 0);
      }}
  },
  Transform: {
    "": "Object;position>,rotation<",
    $eq: function(_, other) {
      if (other == null)
        return false;
      return this.position === J.get$position$x(other) && this.rotation === other.get$rotation();
    },
    setFrom$1: function(other) {
      this.position.setFrom$1(other.get$position(other));
      this.rotation.setFrom$1(other.rotation);
    },
    static: {Transform$: function() {
        var t1 = new Float32Array(2);
        return new V.Transform(new T.Vector2(t1), new T.Matrix2(new Float32Array(4)));
      }, Transform_mulToOut: function(transform, vector, out) {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11;
        t1 = transform.position.storage;
        t2 = t1[1];
        t3 = transform.rotation.storage;
        t4 = t3[1];
        t5 = J.getInterceptor$x(vector);
        t6 = t5.get$x(vector);
        if (typeof t6 !== "number")
          return H.iae(t6);
        t7 = t3[3];
        t8 = t5.get$y(vector);
        if (typeof t8 !== "number")
          return H.iae(t8);
        t1 = t1[0];
        t9 = t3[0];
        t10 = t5.get$x(vector);
        if (typeof t10 !== "number")
          return H.iae(t10);
        t3 = t3[2];
        t5 = t5.get$y(vector);
        if (typeof t5 !== "number")
          return H.iae(t5);
        t11 = J.getInterceptor$x(out);
        t11.set$x(out, t1 + t9 * t10 + t3 * t5);
        t11.set$y(out, t2 + t4 * t6 + t7 * t8);
      }, Transform_mulTransToOut: function($T, v, out) {
        var t1, t2, v1x, v1y, bx, by, b1x, b1y;
        t1 = v.storage;
        t2 = $T.position.storage;
        v1x = t1[0] - t2[0];
        v1y = t1[1] - t2[1];
        t2 = $T.rotation.storage;
        bx = t2[0];
        by = t2[1];
        b1x = t2[2];
        b1y = t2[3];
        t2 = out.storage;
        t2[0] = v1x * bx + v1y * by;
        t2[1] = v1x * b1x + v1y * b1y;
      }}
  },
  ViewportTransform: {
    "": "Object;",
    get$translation: function() {
      var result = new T.Vector2(new Float32Array(2));
      result.setFrom$1(this.extents);
      result.sub$1(this.center);
      return result;
    },
    getWorldToScreen$2: function(argWorld, argScreen) {
      var t1, t2, gridCorrectedX, t3;
      t1 = J.getInterceptor$x(argWorld);
      t2 = this.extents.storage;
      gridCorrectedX = J.$add$ns(J.$mul$n(t1.get$x(argWorld), this.scale), t2[0]);
      t2 = t2[1];
      t1 = t1.get$y(argWorld);
      t3 = this.scale;
      if (typeof t1 !== "number")
        return t1.$mul();
      argScreen.setValues$2(J.$add$ns(gridCorrectedX, this.get$translation().storage[0]), t2 - t1 * t3 + -this.get$translation().storage[1]);
    }
  },
  Body: {
    "": "Object;world,flags<,contactList<,sleepTime,userData,_linearVelocity,_angularVelocity,mass<,invMass<,next@,prev?,fixtureList,fixtureCount,jointList@,_force,_torque,_inertia,invInertia<,linearDamping,angularDamping,_type<,islandIndex,originTransform<,sweep<,_fixDef,_pmd,_pxf,oldCenter,tempCenter",
    createFixture$1: function(def) {
      var t1, t2, fixture, t3, broadPhase, node;
      t1 = V.AxisAlignedBox$(null, null);
      t2 = new V.Filter(0, 0, 0);
      fixture = new V.Fixture(t1, null, null, null, null, null, null, null, t2, null, null, V.AxisAlignedBox$(null, null), V.AxisAlignedBox$(null, null));
      fixture.userData = def.userData;
      fixture.friction = def.friction;
      fixture.restitution = def.restitution;
      fixture.body = this;
      fixture.next = null;
      t2.setFrom$1(def.filter);
      fixture.isSensor = def.isSensor;
      t2 = def.shape.clone$0(0);
      fixture.shape = t2;
      fixture.density = def.density;
      t3 = this.flags;
      if (typeof t3 !== "number")
        return t3.$and();
      if ((t3 & 32) === 32) {
        broadPhase = this.world._contactManager.broadPhase;
        t2.computeAxisAlignedBox$2(t1, this.originTransform);
        node = broadPhase._tree.createProxy$2(t1, fixture);
        broadPhase.proxyCount = broadPhase.proxyCount + 1;
        broadPhase.moveBuffer.push(node);
        fixture.proxy = node;
      }
      fixture.next = this.fixtureList;
      this.fixtureList = fixture;
      this.fixtureCount = this.fixtureCount + 1;
      fixture.body = this;
      t1 = fixture.density;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0)
        this.resetMassData$0();
      t1 = this.world;
      t1._flags = t1._flags | 1;
      return fixture;
    },
    get$position: function(_) {
      return this.originTransform.position;
    },
    get$angle: function() {
      return this.sweep.angle;
    },
    get$worldCenter: function() {
      return this.sweep.center;
    },
    get$localCenter: function() {
      return this.sweep.localCenter;
    },
    get$linearVelocity: function() {
      return this._linearVelocity;
    },
    get$angularVelocity: function() {
      return this._angularVelocity;
    },
    set$angularVelocity: function(w) {
      if (this._type !== 0) {
        if (w * w > 0)
          this.set$awake(true);
        this._angularVelocity = w;
      }
    },
    resetMassData$0: function() {
      var t1, t2, t3, massData, f, t4, t5, t6, temp;
      this.mass = 0;
      this.invMass = 0;
      this._inertia = 0;
      this.invInertia = 0;
      t1 = this.sweep;
      t2 = t1.localCenter;
      t2.setZero$0();
      t3 = this._type;
      if (t3 === 0 || t3 === 1) {
        t2 = this.originTransform.position;
        t1.center.setFrom$1(t2);
        t1.centerZero.setFrom$1(t2);
        return;
      }
      t3 = this.tempCenter;
      t3.setZero$0();
      massData = this._pmd;
      for (f = this.fixtureList, t4 = massData.center; f != null; f = f.next) {
        t5 = f.density;
        if (t5 === 0)
          continue;
        f.shape.computeMass$2(massData, t5);
        this.mass = this.mass + massData.mass;
        t5 = new Float32Array(2);
        t6 = t4.storage;
        t5[1] = t6[1];
        t5[0] = t6[0];
        t6 = massData.mass;
        t5[1] = t5[1] * t6;
        t5[0] = t5[0] * t6;
        t3.add$1(0, new T.Vector2(t5));
        this._inertia = this._inertia + massData.inertia;
      }
      t4 = this.mass;
      if (t4 > 0) {
        t4 = 1 / t4;
        this.invMass = t4;
        t3.scale$1(0, t4);
      } else {
        this.mass = 1;
        this.invMass = 1;
      }
      t4 = this._inertia;
      if (t4 > 0) {
        t5 = this.flags;
        if (typeof t5 !== "number")
          return t5.$and();
        t5 = (t5 & 16) === 0;
      } else
        t5 = false;
      if (t5) {
        t4 -= this.mass * t3.dot$1(t3);
        this._inertia = t4;
        this.invInertia = 1 / t4;
      } else {
        this._inertia = 0;
        this.invInertia = 0;
      }
      t4 = this.oldCenter;
      t5 = t1.center;
      t4.setFrom$1(t5);
      t2.setFrom$1(t3);
      t1 = t1.centerZero;
      V.Transform_mulToOut(this.originTransform, t2, t1);
      t5.setFrom$1(t1);
      temp = new T.Vector2(new Float32Array(2));
      temp.setFrom$1(t5);
      temp.sub$1(t4);
      V.Vector2_crossVectorAndNumToOut(temp, -this._angularVelocity, temp);
      this._linearVelocity.add$1(0, temp);
    },
    getWorldPointToOut$2: function(localPoint, out) {
      V.Transform_mulToOut(this.originTransform, localPoint, out);
    },
    getLocalPointToOut$2: function(worldPoint, out) {
      V.Transform_mulTransToOut(this.originTransform, worldPoint, out);
    },
    get$type: function(_) {
      return this._type;
    },
    set$awake: function(flag) {
      var t1;
      if (flag) {
        t1 = this.flags;
        if (typeof t1 !== "number")
          return t1.$and();
        if ((t1 & 2) === 0) {
          this.flags = t1 | 2;
          this.sleepTime = 0;
        }
      } else {
        t1 = this.flags;
        if (typeof t1 !== "number")
          return t1.$and();
        this.flags = t1 & 4294967293;
        this.sleepTime = 0;
        this._linearVelocity.setZero$0();
        this._angularVelocity = 0;
        this._force.setZero$0();
        this._torque = 0;
      }
    },
    get$awake: function() {
      var t1 = this.flags;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 2) === 2;
    },
    get$active: function() {
      var t1 = this.flags;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 32) === 32;
    },
    synchronizeFixtures$0: function() {
      var xf1, t1, t2, t3, broadPhase, f;
      xf1 = this._pxf;
      t1 = xf1.rotation;
      t2 = this.sweep;
      t1.setRotation$1(t2.angleZero);
      t3 = xf1.position;
      t1.transformed$2(t2.localCenter, t3);
      t3.scale$1(0, -1);
      t3.add$1(0, t2.centerZero);
      broadPhase = this.world._contactManager.broadPhase;
      for (f = this.fixtureList, t1 = this.originTransform; f != null; f = f.next)
        f.synchronize$3(broadPhase, xf1, t1);
    },
    synchronizeTransform$0: function() {
      var t1, t2, c, s, t, r, t3, t4, t5, t6, t7, t8;
      t1 = this.sweep;
      t2 = t1.angle;
      c = Math.cos(t2);
      t2 = t1.angle;
      s = Math.sin(t2);
      t = this.originTransform;
      r = t.rotation;
      r.setValues$4(c, s, -s, c);
      t2 = r.storage;
      t3 = t2[0];
      t4 = t1.localCenter.storage;
      t5 = t4[0];
      t6 = t2[2];
      t7 = t4[1];
      t1 = t1.center.storage;
      t8 = t.position.storage;
      t8[0] = (t3 * t5 + t6 * t7) * -1 + t1[0];
      t8[1] = (t2[1] * t4[0] + t2[3] * t7) * -1 + t1[1];
    },
    shouldCollide$1: function(other) {
      return !(this._type !== 2 && other.get$_type() !== 2);
    },
    Body$2: function(bd, world) {
      var t1, t2, t3, t4;
      if (bd.bullet) {
        t1 = this.flags;
        if (typeof t1 !== "number")
          return t1.$or();
        this.flags = t1 | 8;
      }
      if (bd.fixedRotation) {
        t1 = this.flags;
        if (typeof t1 !== "number")
          return t1.$or();
        this.flags = t1 | 16;
      }
      if (bd.allowSleep) {
        t1 = this.flags;
        if (typeof t1 !== "number")
          return t1.$or();
        this.flags = t1 | 4;
      }
      if (bd.awake) {
        t1 = this.flags;
        if (typeof t1 !== "number")
          return t1.$or();
        this.flags = t1 | 2;
      }
      if (bd.active) {
        t1 = this.flags;
        if (typeof t1 !== "number")
          return t1.$or();
        this.flags = t1 | 32;
      }
      t1 = this.originTransform;
      t1.position.setFrom$1(bd.position);
      t1.rotation.setRotation$1(bd.angle);
      t2 = this.sweep;
      t3 = t2.localCenter;
      t3.setZero$0();
      t4 = t2.centerZero;
      V.Transform_mulToOut(t1, t3, t4);
      t2.center.setFrom$1(t4);
      t4 = bd.angle;
      t2.angle = t4;
      t2.angleZero = t4;
      if (this._type === 2) {
        this.mass = 1;
        this.invMass = 1;
      } else {
        this.mass = 0;
        this.invMass = 0;
      }
    },
    static: {"": "Body_ISLAND_FLAG,Body_AWAKE_FLAG,Body_AUTO_SLEEP_FLAG,Body_BULLET_FLAG,Body_FIXED_ROTATION_FLAG,Body_ACTIVE_FLAG,Body_TO_I_FLAG"}
  },
  BodyDef: {
    "": "Object;type,angle<,userData,position>,linearVelocity<,angularVelocity<,fixedRotation,isSleeping,bullet,allowSleep,linearDamping,angularDamping,awake?,active<",
    static: {BodyDef$: function() {
        var t1 = new Float32Array(2);
        return new V.BodyDef(0, 0, null, new T.Vector2(t1), new T.Vector2(new Float32Array(2)), 0, false, null, false, true, 0, 0, true, true);
      }}
  },
  ContactManager: {
    "": "Object;broadPhase,contactList<,contactCount,contactFilter,contactListener,pool",
    _addPair$2: [function(fixtureA, fixtureB) {
      var bodyA, bodyB, edge, t1, fA, fB, c, t2;
      bodyA = J.get$body$x(fixtureA);
      bodyB = J.get$body$x(fixtureB);
      if (bodyA == null ? bodyB == null : bodyA === bodyB)
        return;
      edge = bodyB.get$contactList();
      for (; edge != null;) {
        t1 = edge.other;
        if (t1 == null ? bodyA == null : t1 === bodyA) {
          t1 = edge.contact;
          fA = t1.fixtureA;
          fB = t1.fixtureB;
          if ((fA == null ? fixtureA == null : fA === fixtureA) && (fB == null ? fixtureB == null : fB === fixtureB))
            return;
          if ((fA == null ? fixtureB == null : fA === fixtureB) && (fB == null ? fixtureA == null : fB === fixtureA))
            return;
        }
        edge = edge.next;
      }
      if (!bodyB.shouldCollide$1(bodyA))
        return;
      if (!this.contactFilter.shouldCollide$2(fixtureA, fixtureB))
        return;
      c = this.pool.popContact$2(fixtureA, fixtureB);
      fixtureA = c.fixtureA;
      fixtureB = c.fixtureB;
      bodyA = J.get$body$x(fixtureA);
      bodyB = J.get$body$x(fixtureB);
      c.prev = null;
      t1 = this.contactList;
      c.next = t1;
      if (t1 != null)
        t1.prev = c;
      this.contactList = c;
      t1 = c.edge1;
      t1.contact = c;
      t1.other = bodyB;
      t1.prev = null;
      t1.next = bodyA.get$contactList();
      t2 = bodyA.contactList;
      if (t2 != null)
        t2.prev = t1;
      bodyA.contactList = t1;
      t1 = c.edge2;
      t1.contact = c;
      t1.other = bodyA;
      t1.prev = null;
      t1.next = bodyB.get$contactList();
      t2 = bodyB.contactList;
      if (t2 != null)
        t2.prev = t1;
      bodyB.contactList = t1;
      this.contactCount = this.contactCount + 1;
    }, "call$2", "get$_addPair", 4, 0, 16],
    destroy$1: function(c) {
      var fixtureA, fixtureB, bodyA, bodyB, t1, t2, type1, type2;
      fixtureA = c.fixtureA;
      fixtureB = c.fixtureB;
      bodyA = J.get$body$x(fixtureA);
      bodyB = J.get$body$x(fixtureB);
      t1 = c.prev;
      if (t1 != null)
        t1.set$next(c.next);
      t1 = c.next;
      if (t1 != null)
        t1.prev = c.prev;
      t2 = this.contactList;
      if (c == null ? t2 == null : c === t2)
        this.contactList = t1;
      t1 = c.edge1;
      t2 = t1.prev;
      if (t2 != null)
        t2.set$next(t1.next);
      t2 = t1.next;
      if (t2 != null)
        t2.prev = t1.prev;
      if (t1 === bodyA.get$contactList())
        bodyA.contactList = t2;
      t1 = c.edge2;
      t2 = t1.prev;
      if (t2 != null)
        t2.set$next(t1.next);
      t2 = t1.next;
      if (t2 != null)
        t2.prev = t1.prev;
      if (t1 === bodyB.get$contactList())
        bodyB.contactList = t2;
      if (c.manifold.pointCount > 0) {
        J.get$body$x(c.fixtureA).set$awake(true);
        J.get$body$x(c.fixtureB).set$awake(true);
      }
      t1 = c.fixtureA;
      type1 = t1.get$type(t1);
      t1 = c.fixtureB;
      type2 = t1.get$type(t1);
      t1 = this.pool._contactStacks;
      if (type1 >= 2)
        return H.ioore(t1, type1);
      t1 = t1[type1];
      t1.length;
      if (type2 >= 2)
        return H.ioore(t1, type2);
      t1[type2].creator.addFirst$1(c);
      this.contactCount = this.contactCount - 1;
    },
    collide$0: function() {
      var c, t1, t2, fixtureA, fixtureB, bodyA, bodyB, t3, c0, proxyIdA, proxyIdB;
      c = this.contactList;
      for (t1 = this.contactListener, t2 = this.contactFilter; c != null;) {
        fixtureA = c.fixtureA;
        fixtureB = c.fixtureB;
        bodyA = J.get$body$x(fixtureA);
        bodyB = J.get$body$x(fixtureB);
        if (!bodyA.get$awake() && !bodyB.get$awake()) {
          c = c.next;
          continue;
        }
        t3 = c.flags;
        if (typeof t3 !== "number")
          return t3.$and();
        if ((t3 & 8) === 8) {
          if (!bodyB.shouldCollide$1(bodyA)) {
            c0 = c.next;
            this.destroy$1(c);
            c = c0;
            continue;
          }
          if (!t2.shouldCollide$2(fixtureA, fixtureB)) {
            c0 = c.next;
            this.destroy$1(c);
            c = c0;
            continue;
          }
          t3 = c.flags;
          if (typeof t3 !== "number")
            return t3.$and();
          c.flags = t3 & 4294967287;
        }
        proxyIdA = fixtureA.get$proxy();
        proxyIdB = fixtureB.get$proxy();
        if (!V.AxisAlignedBox_testOverlap(proxyIdA.box, proxyIdB.box)) {
          c0 = c.next;
          this.destroy$1(c);
          c = c0;
          continue;
        }
        c.update$1(t1);
        c = c.next;
      }
    }
  },
  CircleContact: {
    "": "Contact;flags,prev,next,edge1,edge2,fixtureA,fixtureB,manifold,toiCount,pool,_oldManifold",
    init$2: function(fA, fB) {
      V.Contact.prototype.init$2.call(this, fA, fB);
    },
    evaluate$3: function(argManifold, xfA, xfB) {
      var t1, t2, t3;
      t1 = this.pool.collision;
      t2 = this.fixtureA;
      t2 = t2.get$shape(t2);
      t3 = this.fixtureB;
      t1.collideCircles$5(argManifold, t2, xfA, t3.get$shape(t3), xfB);
    }
  },
  Contact: {
    "": "Object;prev?,next@,manifold<",
    init$2: function(fixA, fixB) {
      var t1;
      this.flags = 0;
      this.fixtureA = fixA;
      this.fixtureB = fixB;
      this.manifold.pointCount = 0;
      this.prev = null;
      this.next = null;
      t1 = this.edge1;
      t1.contact = null;
      t1.prev = null;
      t1.next = null;
      t1.other = null;
      t1 = this.edge2;
      t1.contact = null;
      t1.prev = null;
      t1.next = null;
      t1.other = null;
      this.toiCount = 0;
    },
    update$1: function(listener) {
      var t1, t2, wasTouching, sensorA, t3, sensorB, sensor, bodyA, bodyB, xfA, xfB, shapeA, shapeB, t4, touching, i, mp2, id2, t5, t6, t7, j, mp1, t8;
      t1 = this._oldManifold;
      t1.setFrom$1(this.manifold);
      t2 = this.flags;
      if (typeof t2 !== "number")
        return t2.$or();
      t2 |= 4;
      this.flags = t2;
      wasTouching = (t2 & 2) === 2;
      t2 = this.fixtureA;
      sensorA = t2.get$isSensor();
      t3 = this.fixtureB;
      sensorB = t3.get$isSensor();
      sensor = sensorA === true || sensorB === true;
      bodyA = t2.body;
      bodyB = t3.body;
      xfA = bodyA.originTransform;
      xfB = bodyB.originTransform;
      if (sensor) {
        shapeA = t2.shape;
        shapeB = t3.shape;
        t1 = this.pool.collision;
        t2 = t1.input;
        t2.proxyA.setFromShape$1(shapeA);
        t2.proxyB.setFromShape$1(shapeB);
        t3 = t2.transformA;
        t3.position.setFrom$1(xfA.position);
        t3.rotation.setFrom$1(xfA.rotation);
        t3 = t2.transformB;
        t3.position.setFrom$1(xfB.position);
        t3.rotation.setFrom$1(xfB.rotation);
        t2.useRadii = true;
        t3 = t1.cache;
        t3.count = 0;
        t4 = t1._pool.distance;
        t1 = t1.output;
        t4.distance$3(t1, t3, t2);
        t1 = t1.distance;
        if (typeof t1 !== "number")
          return t1.$lt();
        touching = t1 < 0.000001192;
        this.manifold.pointCount = 0;
      } else {
        this.evaluate$3(this.manifold, xfA, xfB);
        touching = this.manifold.pointCount > 0;
        for (t2 = t1.points, i = 0; t3 = this.manifold, i < t3.pointCount; ++i) {
          t3 = t3.points;
          if (i >= 2)
            return H.ioore(t3, i);
          mp2 = t3[i];
          mp2.normalImpulse = 0;
          mp2.tangentImpulse = 0;
          id2 = mp2.id;
          for (t3 = t1.pointCount, t4 = id2.features, t5 = t4.incidentEdge, t6 = t4.incidentVertex, t7 = t4.flip, j = 0; j < t3; ++j) {
            if (j >= 2)
              return H.ioore(t2, j);
            mp1 = t2[j];
            t8 = mp1.id.features;
            if (t4.referenceEdge === t8.referenceEdge && t5 === t8.incidentEdge && t6 === t8.incidentVertex && t7 === t8.flip) {
              mp2.normalImpulse = mp1.normalImpulse;
              mp2.tangentImpulse = mp1.tangentImpulse;
              break;
            }
          }
        }
        if (touching !== wasTouching) {
          bodyA.set$awake(true);
          bodyB.set$awake(true);
        }
      }
      t1 = this.flags;
      if (touching) {
        if (typeof t1 !== "number")
          return t1.$or();
        this.flags = t1 | 2;
      } else {
        if (typeof t1 !== "number")
          return t1.$and();
        this.flags = t1 & 4294967293;
      }
      return;
    }
  },
  ContactConstraint: {
    "": "Object;points>,localNormal<,localPoint<,normal<,normalMass,K,bodyA@,bodyB@,type*,radius?,friction,restitution,pointCount@,manifold@",
    setFrom$1: function(cp) {
      var t1, t2, i;
      t1 = cp.get$pointCount();
      this.pointCount = t1;
      this.localNormal.setFrom$1(cp.get$localNormal());
      this.localPoint.setFrom$1(cp.get$localPoint());
      this.normal.setFrom$1(cp.get$normal());
      this.normalMass.setFrom$1(cp.get$normalMass());
      this.K.setFrom$1(cp.get$K());
      this.bodyA = cp.get$bodyA();
      this.bodyB = cp.get$bodyB();
      this.type = cp.get$type(cp);
      this.radius = cp.get$radius();
      this.friction = cp.get$friction();
      this.restitution = cp.get$restitution();
      this.manifold = cp.get$manifold();
      for (t2 = this.points, i = 0; C.JSInt_methods.$lt(i, t1); ++i) {
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2[i].setFrom$1(cp.get$points(cp).$index(0, i));
      }
    },
    toString$0: function(_) {
      return "localNormal: \"" + H.S(this.localNormal) + "\", localPoint: \"" + H.S(this.localPoint) + "\" normal: \"" + H.S(this.normal) + "\", radius: \"" + H.S(this.radius) + "\" friction: \"" + H.S(this.friction) + "\" restitution: \"" + H.S(this.restitution) + "\", pointCount: \"" + this.pointCount + "\"";
    },
    static: {ContactConstraint$: function() {
        var t1, t2, t3, t4, t5;
        t1 = P.List_List$generate(2, new V.ContactConstraint_closure(), true, V.ContactConstraintPoint);
        t2 = new Float32Array(2);
        t3 = new Float32Array(2);
        t4 = new Float32Array(2);
        t5 = new Float32Array(4);
        return new V.ContactConstraint(t1, new T.Vector2(t2), new T.Vector2(t3), new T.Vector2(t4), new T.Matrix2(t5), new T.Matrix2(new Float32Array(4)), null, null, null, null, null, null, 0, null);
      }}
  },
  ContactConstraint_closure: {
    "": "Closure:13;",
    call$1: function(i) {
      var t1, t2;
      t1 = new Float32Array(2);
      t2 = new Float32Array(2);
      return new V.ContactConstraintPoint(new T.Vector2(t1), new T.Vector2(t2), new T.Vector2(new Float32Array(2)), 0, 0, 0, 0, 0);
    }
  },
  ContactConstraintPoint: {
    "": "Object;localPoint<,rA<,rB<,normalImpulse@,tangentImpulse@,normalMass<,tangentMass<,velocityBias",
    setFrom$1: function(cp) {
      this.localPoint.setFrom$1(cp.get$localPoint());
      this.rA.setFrom$1(cp.get$rA());
      this.rB.setFrom$1(cp.get$rB());
      this.normalImpulse = cp.get$normalImpulse();
      this.tangentImpulse = cp.get$tangentImpulse();
      this.normalMass = cp.get$normalMass();
      this.tangentMass = cp.get$tangentMass();
      this.velocityBias = cp.get$velocityBias();
    },
    toString$0: function(_) {
      return "normal impulse: " + H.S(this.normalImpulse) + ", tangentImpulse: " + H.S(this.tangentImpulse) + ", normalMass: " + H.S(this.normalMass) + ", tangentMass: " + H.S(this.tangentMass) + ", velocityBias: " + H.S(this.velocityBias) + ", localPoint: " + H.S(this.localPoint) + ", rA: " + H.S(this.rA) + ", rB: " + H.S(this.rB);
    }
  },
  ContactEdge: {
    "": "Object;other<,contact,prev?,next@"
  },
  ContactRegister: {
    "": "Object;creator,primary"
  },
  ContactSolver: {
    "": "Object;constraints,constraintCount,worldManifold,tangent,temp1,temp2,P,dv,dv1,dv2,x>,d,P1,P2,psolver,rA<,rB<",
    init$3: function(contacts, contactCount, impulseRatio) {
      var t1, t2, t3, i, t4, t5, t6, t7, contact, fixtureA, fixtureB, shapeA, shapeB, radiusA, radiusB, bodyA, bodyB, manifold, t8, friction, restitution, vA, vB, wA, wB, cc, t9, t10, t11, t12, t13, t14, t15, j, t16, cp, ccp, t17, t18, t19, t20, t21, rnA, rnB, t22, t23, t24, t25, rtA, rtB, vRel, ccp1, ccp2, invMassA, invIA, invMassB, invIB, rn1A, rn1B, rn2A, rn2B, k11, k22, k12;
      this.constraintCount = contactCount;
      t1 = this.constraints;
      t2 = t1.length;
      if (typeof contactCount !== "number")
        return H.iae(contactCount);
      if (t2 < contactCount) {
        t2 = Array(P.max(t2 * 2, contactCount));
        t2.fixed$length = init;
        t2 = H.setRuntimeTypeInfo(t2, [V.ContactConstraint]);
        this.constraints = t2;
        t3 = t1.length;
        H.IterableMixinWorkaround_setRangeList(t2, 0, t3, t1, 0);
        for (i = t1.length; t1 = this.constraints, i < t1.length; ++i) {
          t2 = V.ContactConstraint$();
          if (i >= t1.length)
            return H.ioore(t1, i);
          t1[i] = t2;
        }
      }
      t1 = this.worldManifold;
      t2 = t1.points;
      t3 = this.tangent.storage;
      t4 = this.temp2.storage;
      t5 = this.temp1.storage;
      t6 = t1.normal.storage;
      i = 0;
      while (true) {
        t7 = this.constraintCount;
        if (typeof t7 !== "number")
          return H.iae(t7);
        if (!(i < t7))
          break;
        if (i >= contacts.length)
          return H.ioore(contacts, i);
        contact = contacts[i];
        fixtureA = contact.fixtureA;
        fixtureB = contact.fixtureB;
        shapeA = fixtureA.get$shape(fixtureA);
        shapeB = fixtureB.get$shape(fixtureB);
        radiusA = shapeA.radius;
        radiusB = shapeB.radius;
        bodyA = fixtureA.body;
        bodyB = fixtureB.body;
        manifold = contact.manifold;
        t7 = fixtureA.friction;
        t8 = fixtureB.friction;
        if (typeof t7 !== "number")
          return t7.$mul();
        if (typeof t8 !== "number")
          return H.iae(t8);
        friction = Math.sqrt(t7 * t8);
        t7 = fixtureA.restitution;
        t8 = fixtureB.restitution;
        if (typeof t7 !== "number")
          return t7.$gt();
        if (typeof t8 !== "number")
          return H.iae(t8);
        if (t7 > t8)
          restitution = t7;
        else
          restitution = t8;
        vA = bodyA._linearVelocity;
        vB = bodyB._linearVelocity;
        wA = bodyA._angularVelocity;
        wB = bodyB._angularVelocity;
        t1.initialize$5(0, manifold, bodyA.originTransform, radiusA, bodyB.originTransform, radiusB);
        t7 = this.constraints;
        if (i >= t7.length)
          return H.ioore(t7, i);
        cc = t7[i];
        cc.set$bodyA(bodyA);
        cc.set$bodyB(bodyB);
        cc.set$manifold(manifold);
        t7 = cc.normal;
        t7 = t7.storage;
        t7[0] = t6[0];
        t7[1] = t6[1];
        cc.pointCount = manifold.pointCount;
        cc.friction = friction;
        cc.restitution = restitution;
        t8 = cc.localNormal;
        t9 = manifold.localNormal.storage;
        t8 = t8.storage;
        t8[0] = t9[0];
        t8[1] = t9[1];
        t9 = cc.localPoint;
        t8 = manifold.localPoint.storage;
        t9 = t9.storage;
        t9[0] = t8[0];
        t9[1] = t8[1];
        cc.radius = radiusA + radiusB;
        cc.type = manifold.type;
        for (t8 = manifold.points, t9 = cc.points, t10 = bodyA.sweep.center.storage, t11 = bodyB.sweep.center.storage, t12 = -wA, t13 = -wB, t14 = vB.storage, t15 = vA.storage, j = 0; t16 = cc.pointCount, j < t16; ++j) {
          if (j >= 2)
            return H.ioore(t8, j);
          cp = t8[j];
          if (j >= t9.length)
            return H.ioore(t9, j);
          ccp = t9[j];
          ccp.set$normalImpulse(impulseRatio * cp.normalImpulse);
          ccp.set$tangentImpulse(impulseRatio * cp.tangentImpulse);
          t16 = ccp.get$localPoint();
          t17 = cp.localPoint.storage;
          t16 = t16.storage;
          t16[0] = t17[0];
          t16[1] = t17[1];
          t17 = ccp.get$rA();
          if (j >= t2.length)
            return H.ioore(t2, j);
          t17.storage[0] = J.$sub$n(J.get$x$x(t2[j]), t10[0]);
          t17 = ccp.rA;
          if (j >= t2.length)
            return H.ioore(t2, j);
          t16 = J.get$y$x(t2[j]);
          t18 = t10[1];
          if (typeof t16 !== "number")
            return t16.$sub();
          t17 = t17.storage;
          t17[1] = t16 - t18;
          t18 = ccp.rB;
          if (j >= t2.length)
            return H.ioore(t2, j);
          t18 = t18.storage;
          t18[0] = J.$sub$n(J.get$x$x(t2[j]), t11[0]);
          if (j >= t2.length)
            return H.ioore(t2, j);
          t16 = J.get$y$x(t2[j]);
          t19 = t11[1];
          if (typeof t16 !== "number")
            return t16.$sub();
          t18[1] = t16 - t19;
          t19 = t17[0];
          t16 = t7[1];
          t20 = t17[1];
          t21 = t7[0];
          rnA = t19 * t16 - t20 * t21;
          rnB = t18[0] * t16 - t18[1] * t21;
          t21 = bodyA.invMass;
          t20 = bodyB.invMass;
          t19 = bodyA.invInertia;
          t22 = bodyB.invInertia;
          ccp.normalMass = 1 / (t21 + t20 + t19 * (rnA * rnA) + t22 * (rnB * rnB));
          t3[0] = 1 * t16;
          t3[1] = -1 * t7[0];
          t16 = t17[0];
          t23 = t3[1];
          t24 = t17[1];
          t25 = t3[0];
          rtA = t16 * t23 - t24 * t25;
          rtB = t18[0] * t23 - t18[1] * t25;
          ccp.tangentMass = 1 / (t21 + t20 + t19 * (rtA * rtA) + t22 * (rtB * rtB));
          ccp.velocityBias = 0;
          t4[0] = t12 * t24;
          t4[1] = wA * t17[0];
          t5[0] = t13 * t18[1] + t14[0] - t15[0] - t4[0];
          t5[1] = wB * t18[0] + t14[1] - t15[1] - t4[1];
          vRel = t7[0] * t5[0] + t7[1] * t5[1];
          if (vRel < -1)
            ccp.velocityBias = -restitution * vRel;
        }
        if (t16 === 2) {
          t8 = t9.length;
          if (0 >= t8)
            return H.ioore(t9, 0);
          ccp1 = t9[0];
          if (1 >= t8)
            return H.ioore(t9, 1);
          ccp2 = t9[1];
          invMassA = bodyA.invMass;
          invIA = bodyA.invInertia;
          invMassB = bodyB.invMass;
          invIB = bodyB.invInertia;
          t9 = ccp1.get$rA().storage;
          t8 = t9[0];
          t10 = t7[1];
          t9 = t9[1];
          t7 = t7[0];
          rn1A = t8 * t10 - t9 * t7;
          t9 = ccp1.get$rB().storage;
          rn1B = t9[0] * t10 - t9[1] * t7;
          t9 = ccp2.get$rA().storage;
          rn2A = t9[0] * t10 - t9[1] * t7;
          t9 = ccp2.get$rB().storage;
          rn2B = t9[0] * t10 - t9[1] * t7;
          t7 = invMassA + invMassB;
          t9 = invIA * rn1A;
          t10 = invIB * rn1B;
          k11 = t7 + t9 * rn1A + t10 * rn1B;
          k22 = t7 + invIA * rn2A * rn2A + invIB * rn2B * rn2B;
          k12 = t7 + t9 * rn2A + t10 * rn2B;
          if (k11 * k11 < 100 * (k11 * k22 - k12 * k12)) {
            t7 = cc.K.storage;
            t7[3] = k22;
            t7[2] = k12;
            t7[1] = k12;
            t7[0] = k11;
            t7 = cc.normalMass;
            t8 = t7.storage;
            t8[3] = k22;
            t8[2] = k12;
            t8[1] = k12;
            t8[0] = k11;
            t7.invert$0();
          } else
            cc.pointCount = 1;
        }
        ++i;
      }
    },
    warmStart$0: function() {
      var t1, i, t2, c, bodyA, bodyB, invMassA, invIA, invMassB, invIB, t3, t4, t5, j, ccp, t6, t7, t8, Px, Py;
      t1 = this.tangent.storage;
      i = 0;
      while (true) {
        t2 = this.constraintCount;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        t2 = this.constraints;
        if (i >= t2.length)
          return H.ioore(t2, i);
        c = t2[i];
        bodyA = c.get$bodyA();
        bodyB = c.get$bodyB();
        invMassA = bodyA.get$invMass();
        invIA = bodyA.invInertia;
        invMassB = bodyB.get$invMass();
        invIB = bodyB.invInertia;
        t2 = c.get$normal().storage;
        t3 = t2[0];
        t1[0] = 1 * t2[1];
        t1[1] = -1 * t3;
        for (t3 = bodyB._linearVelocity.storage, t4 = bodyA._linearVelocity.storage, t5 = c.points, j = 0; j < c.pointCount; ++j) {
          if (j >= t5.length)
            return H.ioore(t5, j);
          ccp = t5[j];
          t6 = ccp.get$normalImpulse();
          t7 = t2[0];
          t8 = ccp.get$tangentImpulse();
          Px = t6 * t7 + t8 * t1[0];
          Py = t6 * t2[1] + t8 * t1[1];
          t8 = bodyA._angularVelocity - invIA * (ccp.get$rA().storage[0] * Py - ccp.rA.storage[1] * Px);
          if (bodyA._type !== 0) {
            if (t8 * t8 > 0)
              bodyA.set$awake(true);
            bodyA._angularVelocity = t8;
          }
          t4[0] = t4[0] - Px * invMassA;
          t4[1] = t4[1] - Py * invMassA;
          t6 = ccp.rB.storage;
          t6 = bodyB._angularVelocity + invIB * (t6[0] * Py - t6[1] * Px);
          if (bodyB._type !== 0) {
            if (t6 * t6 > 0)
              bodyB.set$awake(true);
            bodyB._angularVelocity = t6;
          }
          t3[0] = t3[0] + Px * invMassB;
          t3[1] = t3[1] + Py * invMassB;
        }
        ++i;
      }
    },
    solveVelocityConstraints$0: function() {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, i, t15, c, bodyA, bodyB, wA, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, t16, t17, t18, j, t19, ccp, a, t20, t21, t22, t23, t24, maxFriction, newImpulse, lambda, Px, Py, cp1, a1, cp2, t25, t26, t27, t28, t29, t30, t31, vn1, vn2;
      t1 = this.temp2;
      t2 = t1.storage;
      t3 = this.dv1.storage;
      t4 = this.dv2.storage;
      t5 = this.dv.storage;
      t6 = this.tangent.storage;
      t7 = this.x.storage;
      t8 = this.d;
      t9 = t8.storage;
      t10 = this.P1.storage;
      t11 = this.P2;
      t12 = t11.storage;
      t13 = this.temp1;
      t14 = t13.storage;
      i = 0;
      while (true) {
        t15 = this.constraintCount;
        if (typeof t15 !== "number")
          return H.iae(t15);
        if (!(i < t15))
          break;
        t15 = this.constraints;
        if (i >= t15.length)
          return H.ioore(t15, i);
        c = t15[i];
        bodyA = c.get$bodyA();
        bodyB = c.get$bodyB();
        wA = bodyA.get$angularVelocity();
        wB = bodyB.get$angularVelocity();
        vA = bodyA.get$linearVelocity();
        vB = bodyB.get$linearVelocity();
        invMassA = bodyA.get$invMass();
        invIA = bodyA.invInertia;
        invMassB = bodyB.get$invMass();
        invIB = bodyB.invInertia;
        t6[0] = 1 * c.get$normal().storage[1];
        t15 = c.normal.storage;
        t6[1] = -1 * t15[0];
        friction = c.friction;
        for (t16 = c.points, t17 = vB.storage, t18 = vA.storage, j = 0; t19 = c.pointCount, j < t19; ++j) {
          if (j >= t16.length)
            return H.ioore(t16, j);
          ccp = t16[j];
          a = ccp.get$rA();
          t19 = ccp.get$rB().storage;
          t20 = a.storage;
          t5[0] = -wB * t19[1] + t17[0] - t18[0] + wA * t20[1];
          t5[1] = wB * t19[0] + t17[1] - t18[1] - wA * t20[0];
          t20 = t5[0];
          t19 = t6[0];
          t21 = t5[1];
          t22 = t6[1];
          t23 = ccp.get$tangentMass();
          t24 = ccp.normalImpulse;
          if (typeof friction !== "number")
            return friction.$mul();
          maxFriction = friction * t24;
          newImpulse = P.max(-maxFriction, P.min(ccp.tangentImpulse + t23 * -(t20 * t19 + t21 * t22), maxFriction));
          lambda = newImpulse - ccp.tangentImpulse;
          Px = t6[0] * lambda;
          Py = t6[1] * lambda;
          t18[0] = t18[0] - Px * invMassA;
          t18[1] = t18[1] - Py * invMassA;
          t22 = ccp.rA.storage;
          wA -= invIA * (t22[0] * Py - t22[1] * Px);
          t17[0] = t17[0] + Px * invMassB;
          t17[1] = t17[1] + Py * invMassB;
          t22 = ccp.rB.storage;
          wB += invIB * (t22[0] * Py - t22[1] * Px);
          ccp.tangentImpulse = newImpulse;
        }
        cp1 = t16[0];
        t20 = t16.length;
        if (t19 === 1) {
          if (0 >= t20)
            return H.ioore(t16, 0);
          a1 = cp1.get$rA();
          t16 = cp1.get$rB().storage;
          t19 = a1.storage;
          t5[0] = -wB * t16[1] + t17[0] - t18[0] + wA * t19[1];
          t5[1] = wB * t16[0] + t17[1] - t18[1] - wA * t19[0];
          t19 = t5[0];
          t16 = t15[0];
          t20 = t5[1];
          t15 = t15[1];
          t21 = cp1.get$normalMass();
          t22 = cp1.velocityBias;
          t23 = cp1.normalImpulse;
          a = t23 + -t21 * (t19 * t16 + t20 * t15 - t22);
          newImpulse = a > 0 ? a : 0;
          lambda = newImpulse - t23;
          Px = t16 * lambda;
          Py = t15 * lambda;
          t18[0] = t18[0] - Px * invMassA;
          t18[1] = t18[1] - Py * invMassA;
          t15 = cp1.rA.storage;
          wA -= invIA * (t15[0] * Py - t15[1] * Px);
          t17[0] = t17[0] + Px * invMassB;
          t17[1] = t17[1] + Py * invMassB;
          t15 = cp1.rB.storage;
          wB += invIB * (t15[0] * Py - t15[1] * Px);
          cp1.normalImpulse = newImpulse;
        } else {
          if (0 >= t20)
            return H.ioore(t16, 0);
          if (1 >= t20)
            return H.ioore(t16, 1);
          cp2 = t16[1];
          t16 = cp1.get$normalImpulse();
          t19 = cp2.get$normalImpulse();
          t20 = new Float32Array(2);
          a = new T.Vector2(t20);
          t20[0] = t16;
          t20[1] = t19;
          t19 = -wB;
          t16 = cp1.rA.storage;
          t3[0] = t19 * cp1.get$rB().storage[1] + t17[0] - t18[0] + wA * t16[1];
          t21 = cp1.rB.storage;
          t3[1] = wB * t21[0] + t17[1] - t18[1] - wA * t16[0];
          t22 = cp2.rA.storage;
          t4[0] = t19 * cp2.get$rB().storage[1] + t17[0] - t18[0] + wA * t22[1];
          t19 = cp2.rB.storage;
          t4[1] = wB * t19[0] + t17[1] - t18[1] - wA * t22[0];
          t23 = t3[0];
          t24 = t15[0];
          t25 = t3[1];
          t26 = t15[1];
          t27 = t4[0];
          t28 = t4[1];
          t29 = cp1.velocityBias;
          t30 = cp2.velocityBias;
          t31 = new Float32Array(2);
          t31[0] = t23 * t24 + t25 * t26 - t29;
          t31[1] = t27 * t24 + t28 * t26 - t30;
          t30 = c.K.storage;
          t26 = t30[0];
          t28 = t20[0];
          t24 = t30[2];
          t27 = t20[1];
          t2[0] = t26 * t28 + t24 * t27;
          t2[1] = t30[1] * t20[0] + t30[3] * t27;
          t31[0] = t31[0] - t2[0];
          t31[1] = t31[1] - t2[1];
          $loop$1: {
            t20 = c.normalMass;
            t7[1] = t31[1];
            t7[0] = t31[0];
            t20 = t20.storage;
            t23 = t20[0];
            t25 = t7[0];
            t26 = t20[2];
            t27 = t7[1];
            t28 = t20[1];
            t20 = t20[3];
            t7[0] = t23 * t25 + t26 * t27;
            t7[1] = t28 * t25 + t20 * t27;
            t7[1] = t7[1] * -1;
            t7[0] = t7[0] * -1;
            t20 = t7[0];
            if (t20 >= 0 && t7[1] >= 0) {
              t9[1] = t7[1];
              t9[0] = t20;
              t8.sub$1(a);
              t10[1] = t15[1];
              t10[0] = t15[0];
              t20 = t9[0];
              t10[1] = t10[1] * t20;
              t10[0] = t10[0] * t20;
              t12[1] = t15[1];
              t12[0] = t15[0];
              t15 = t9[1];
              t12[1] = t12[1] * t15;
              t12[0] = t12[0] * t15;
              t14[1] = t10[1];
              t14[0] = t10[0];
              t13.add$1(0, t11);
              t2[1] = t14[1];
              t2[0] = t14[0];
              t2[1] = t2[1] * invMassA;
              t2[0] = t2[0] * invMassA;
              vA.sub$1(t1);
              t2[1] = t14[1];
              t2[0] = t14[0];
              t2[1] = t2[1] * invMassB;
              t2[0] = t2[0] * invMassB;
              vB.add$1(0, t1);
              t15 = t16[0];
              t20 = t10[1];
              t16 = t16[1];
              t23 = t10[0];
              t24 = t22[0];
              t25 = t12[1];
              t22 = t22[1];
              t26 = t12[0];
              wA -= invIA * (t15 * t20 - t16 * t23 + (t24 * t25 - t22 * t26));
              wB += invIB * (t21[0] * t20 - t21[1] * t23 + (t19[0] * t25 - t19[1] * t26));
              cp1.normalImpulse = t7[0];
              cp2.normalImpulse = t7[1];
              break $loop$1;
            }
            t7[0] = -cp1.normalMass * t31[0];
            t7[1] = 0;
            t20 = t30[1];
            t23 = t7[0];
            t25 = t31[1];
            if (t23 >= 0 && t20 * t23 + t25 >= 0) {
              t9[1] = t7[1];
              t9[0] = t23;
              t8.sub$1(a);
              t10[1] = t15[1];
              t10[0] = t15[0];
              t20 = t9[0];
              t10[1] = t10[1] * t20;
              t10[0] = t10[0] * t20;
              t12[1] = t15[1];
              t12[0] = t15[0];
              t15 = t9[1];
              t12[1] = t12[1] * t15;
              t12[0] = t12[0] * t15;
              t14[1] = t10[1];
              t14[0] = t10[0];
              t13.add$1(0, t11);
              t2[1] = t14[1];
              t2[0] = t14[0];
              t2[1] = t2[1] * invMassA;
              t2[0] = t2[0] * invMassA;
              vA.sub$1(t1);
              t2[1] = t14[1];
              t2[0] = t14[0];
              t2[1] = t2[1] * invMassB;
              t2[0] = t2[0] * invMassB;
              vB.add$1(0, t1);
              t15 = t16[0];
              t20 = t10[1];
              t16 = t16[1];
              t23 = t10[0];
              t24 = t22[0];
              t25 = t12[1];
              t22 = t22[1];
              t26 = t12[0];
              wA -= invIA * (t15 * t20 - t16 * t23 + (t24 * t25 - t22 * t26));
              wB += invIB * (t21[0] * t20 - t21[1] * t23 + (t19[0] * t25 - t19[1] * t26));
              cp1.normalImpulse = t7[0];
              cp2.normalImpulse = t7[1];
              break $loop$1;
            }
            t7[0] = 0;
            t7[1] = -cp2.normalMass * t25;
            t20 = t7[1];
            t23 = t31[0];
            if (t20 >= 0 && t24 * t20 + t23 >= 0) {
              t9[1] = t20;
              t9[0] = t7[0];
              t8.sub$1(a);
              t10[1] = t15[1];
              t10[0] = t15[0];
              t20 = t9[0];
              t10[1] = t10[1] * t20;
              t10[0] = t10[0] * t20;
              t12[1] = t15[1];
              t12[0] = t15[0];
              t15 = t9[1];
              t12[1] = t12[1] * t15;
              t12[0] = t12[0] * t15;
              t14[1] = t10[1];
              t14[0] = t10[0];
              t13.add$1(0, t11);
              t2[1] = t14[1];
              t2[0] = t14[0];
              t2[1] = t2[1] * invMassA;
              t2[0] = t2[0] * invMassA;
              vA.sub$1(t1);
              t2[1] = t14[1];
              t2[0] = t14[0];
              t2[1] = t2[1] * invMassB;
              t2[0] = t2[0] * invMassB;
              vB.add$1(0, t1);
              t15 = t16[0];
              t20 = t10[1];
              t16 = t16[1];
              t23 = t10[0];
              t24 = t22[0];
              t25 = t12[1];
              t22 = t22[1];
              t26 = t12[0];
              wA -= invIA * (t15 * t20 - t16 * t23 + (t24 * t25 - t22 * t26));
              wB += invIB * (t21[0] * t20 - t21[1] * t23 + (t19[0] * t25 - t19[1] * t26));
              cp1.normalImpulse = t7[0];
              cp2.normalImpulse = t7[1];
              break $loop$1;
            }
            t7[0] = 0;
            t7[1] = 0;
            vn1 = t31[0];
            vn2 = t31[1];
            if (vn1 >= 0 && vn2 >= 0) {
              t9[1] = t7[1];
              t9[0] = t7[0];
              t8.sub$1(a);
              t10[1] = t15[1];
              t10[0] = t15[0];
              t20 = t9[0];
              t10[1] = t10[1] * t20;
              t10[0] = t10[0] * t20;
              t12[1] = t15[1];
              t12[0] = t15[0];
              t15 = t9[1];
              t12[1] = t12[1] * t15;
              t12[0] = t12[0] * t15;
              t14[1] = t10[1];
              t14[0] = t10[0];
              t13.add$1(0, t11);
              t2[1] = t14[1];
              t2[0] = t14[0];
              t2[1] = t2[1] * invMassA;
              t2[0] = t2[0] * invMassA;
              vA.sub$1(t1);
              t2[1] = t14[1];
              t2[0] = t14[0];
              t2[1] = t2[1] * invMassB;
              t2[0] = t2[0] * invMassB;
              vB.add$1(0, t1);
              t15 = t16[0];
              t20 = t10[1];
              t16 = t16[1];
              t21 = t10[0];
              t23 = t22[0];
              t24 = t12[1];
              t22 = t22[1];
              t25 = t12[0];
              wA -= invIA * (t15 * t20 - t16 * t21 + (t23 * t24 - t22 * t25));
              wB += invIB * (t23 * t20 - t22 * t21 + (t19[0] * t24 - t19[1] * t25));
              cp1.normalImpulse = t7[0];
              cp2.normalImpulse = t7[1];
              break $loop$1;
            }
            break $loop$1;
          }
        }
        t15 = bodyA._linearVelocity.storage;
        t15[1] = t18[1];
        t15[0] = t18[0];
        if (bodyA._type !== 0) {
          if (wA * wA > 0)
            bodyA.set$awake(true);
          bodyA._angularVelocity = wA;
        }
        t15 = bodyB._linearVelocity.storage;
        t15[1] = t17[1];
        t15[0] = t17[0];
        if (bodyB._type !== 0) {
          if (wB * wB > 0)
            bodyB.set$awake(true);
          bodyB._angularVelocity = wB;
        }
        ++i;
      }
    },
    storeImpulses$0: function() {
      var i, t1, c, m, t2, j, t3, t4, t5;
      i = 0;
      while (true) {
        t1 = this.constraintCount;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        t1 = this.constraints;
        if (i >= t1.length)
          return H.ioore(t1, i);
        c = t1[i];
        m = c.get$manifold();
        for (t1 = c.points, t2 = m.points, j = 0; j < c.get$pointCount(); ++j) {
          if (j >= 2)
            return H.ioore(t2, j);
          t3 = t2[j];
          t4 = t1.length;
          if (j >= t4)
            return H.ioore(t1, j);
          t5 = t1[j];
          t3.normalImpulse = t5.get$normalImpulse();
          if (j >= t4)
            return H.ioore(t1, j);
          t3.tangentImpulse = t5.get$tangentImpulse();
        }
        ++i;
      }
    },
    solvePositionConstraints$1: function(baumgarte) {
      var t1, t2, t3, t4, t5, t6, t7, psm, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, minSeparation, i, t21, c, bodyA, bodyB, invMassA, invIA, invMassB, invIB, t22, t23, t24, t25, j, t26, t27, t28, t29, t30, t31, t32, separation, $C, rnA, rnB, $K, impulse;
      t1 = this.P.storage;
      t2 = this.temp1;
      t3 = t2.storage;
      t4 = this.rA;
      t5 = t4.storage;
      t6 = this.rB;
      t7 = t6.storage;
      psm = this.psolver;
      t8 = psm.planePoint;
      t9 = psm.clipPoint;
      t10 = psm.temp;
      t11 = t10.storage;
      t12 = t9.storage;
      t13 = psm.normal;
      t14 = psm.point;
      t15 = t14.storage;
      t16 = t13.storage;
      t17 = psm.pointA;
      t18 = t17.storage;
      t19 = psm.pointB;
      t20 = t19.storage;
      minSeparation = 0;
      i = 0;
      while (true) {
        t21 = this.constraintCount;
        if (typeof t21 !== "number")
          return H.iae(t21);
        if (!(i < t21))
          break;
        t21 = this.constraints;
        if (i >= t21.length)
          return H.ioore(t21, i);
        c = t21[i];
        bodyA = c.get$bodyA();
        bodyB = c.get$bodyB();
        invMassA = J.$mul$n(bodyA.get$mass(), bodyA.get$invMass());
        invIA = bodyA.mass * bodyA.invInertia;
        invMassB = J.$mul$n(bodyB.get$mass(), bodyB.get$invMass());
        invIB = bodyB.mass * bodyB.invInertia;
        for (t21 = bodyA.sweep, t22 = t21.center, t23 = bodyB.sweep, t24 = t23.center, t25 = J.getInterceptor$ns(invMassA), j = 0; j < c.get$pointCount(); ++j) {
          switch (c.get$type(c)) {
            case 0:
              t26 = c.get$bodyA();
              t27 = c.get$localPoint();
              V.Transform_mulToOut(t26.originTransform, t27, t17);
              t27 = c.get$bodyB();
              t26 = c.get$points(c);
              if (0 >= t26.length)
                return H.ioore(t26, 0);
              t26 = t26[0].get$localPoint();
              V.Transform_mulToOut(t27.originTransform, t26, t19);
              if (V.MathBox_distanceSquared(t17, t19) > 1.4208639999999999e-14) {
                t16[1] = t20[1];
                t16[0] = t20[0];
                t13.sub$1(t17);
                t13.normalize$0();
              } else {
                t16[0] = 1;
                t16[1] = 0;
              }
              t15[1] = t18[1];
              t15[0] = t18[0];
              t26 = t14.add$1(0, t19).storage;
              t26[1] = t26[1] * 0.5;
              t26[0] = t26[0] * 0.5;
              t11[1] = t20[1];
              t11[0] = t20[0];
              t10.sub$1(t17);
              t26 = t10.dot$1(t13);
              t27 = c.radius;
              if (typeof t27 !== "number")
                return H.iae(t27);
              psm.separation = t26 - t27;
              break;
            case 1:
              t26 = c.get$bodyA();
              t27 = c.get$localNormal();
              t26 = t26.originTransform;
              t27 = t27.storage;
              t16[1] = t27[1];
              t16[0] = t27[0];
              t27 = t26.rotation.storage;
              t28 = t27[0];
              t29 = t16[0];
              t30 = t27[2];
              t31 = t16[1];
              t32 = t27[1];
              t27 = t27[3];
              t16[0] = t28 * t29 + t30 * t31;
              t16[1] = t32 * t29 + t27 * t31;
              V.Transform_mulToOut(t26, c.get$localPoint(), t8);
              t26 = c.get$bodyB();
              t31 = c.get$points(c);
              if (j >= t31.length)
                return H.ioore(t31, j);
              t31 = t31[j].get$localPoint();
              V.Transform_mulToOut(t26.originTransform, t31, t9);
              t11[1] = t12[1];
              t11[0] = t12[0];
              t10.sub$1(t8);
              t31 = t10.dot$1(t13);
              t26 = c.radius;
              if (typeof t26 !== "number")
                return H.iae(t26);
              psm.separation = t31 - t26;
              t15[1] = t12[1];
              t15[0] = t12[0];
              break;
            case 2:
              t26 = c.get$bodyB();
              t27 = c.get$localNormal();
              t26 = t26.originTransform;
              t27 = t27.storage;
              t16[1] = t27[1];
              t16[0] = t27[0];
              t27 = t26.rotation.storage;
              t28 = t27[0];
              t29 = t16[0];
              t30 = t27[2];
              t31 = t16[1];
              t32 = t27[1];
              t27 = t27[3];
              t16[0] = t28 * t29 + t30 * t31;
              t16[1] = t32 * t29 + t27 * t31;
              V.Transform_mulToOut(t26, c.get$localPoint(), t8);
              t26 = c.get$bodyA();
              t31 = c.get$points(c);
              if (j >= t31.length)
                return H.ioore(t31, j);
              t31 = t31[j].get$localPoint();
              V.Transform_mulToOut(t26.originTransform, t31, t9);
              t11[1] = t12[1];
              t11[0] = t12[0];
              t10.sub$1(t8);
              t31 = t10.dot$1(t13);
              t26 = c.radius;
              if (typeof t26 !== "number")
                return H.iae(t26);
              psm.separation = t31 - t26;
              t15[1] = t12[1];
              t15[0] = t12[0];
              t16[1] = -t16[1];
              t16[0] = -t16[0];
              break;
            default:
          }
          separation = psm.separation;
          t5[1] = t15[1];
          t5[0] = t15[0];
          t4.sub$1(t22);
          t7[1] = t15[1];
          t7[0] = t15[0];
          t6.sub$1(t24);
          minSeparation = P.min(minSeparation, separation);
          $C = P.max(-0.2, P.min(baumgarte * (separation + 0.005), 0));
          t26 = t5[0];
          t27 = t16[1];
          t28 = t5[1];
          t29 = t16[0];
          rnA = t26 * t27 - t28 * t29;
          rnB = t7[0] * t27 - t7[1] * t29;
          $K = J.$add$ns(J.$add$ns(t25.$add(invMassA, invMassB), invIA * rnA * rnA), invIB * rnB * rnB);
          if (typeof $K !== "number")
            return $K.$gt();
          impulse = $K > 0 ? -$C / $K : 0;
          t1[1] = t16[1];
          t1[0] = t16[0];
          t1[1] = t1[1] * impulse;
          t1[0] = t1[0] * impulse;
          t3[1] = t1[1];
          t3[0] = t1[0];
          t26 = t3[1];
          if (typeof invMassA !== "number")
            return H.iae(invMassA);
          t3[1] = t26 * invMassA;
          t3[0] = t3[0] * invMassA;
          t22.sub$1(t2);
          t21.angle = t21.angle - invIA * (t5[0] * t1[1] - t5[1] * t1[0]);
          bodyA.synchronizeTransform$0();
          t3[1] = t1[1];
          t3[0] = t1[0];
          t26 = t3[1];
          if (typeof invMassB !== "number")
            return H.iae(invMassB);
          t3[1] = t26 * invMassB;
          t3[0] = t3[0] * invMassB;
          t24.add$1(0, t2);
          t23.angle = t23.angle + invIB * (t7[0] * t1[1] - t7[1] * t1[0]);
          bodyB.synchronizeTransform$0();
        }
        ++i;
      }
      return minSeparation >= -0.0075;
    },
    static: {"": "ContactSolver_INITIAL_NUM_CONSTRAINTS,ContactSolver_K_MAX_CONDITION_NUMBER", ContactSolver$: function() {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21;
        t1 = P.List_List$generate(256, new V.ContactSolver_closure(), true, V.ContactConstraint);
        t2 = V.WorldManifold$();
        t3 = new Float32Array(2);
        t4 = new Float32Array(2);
        t5 = new Float32Array(2);
        t6 = new Float32Array(2);
        t7 = new Float32Array(2);
        t8 = new Float32Array(2);
        t9 = new Float32Array(2);
        t10 = new Float32Array(2);
        t11 = new Float32Array(2);
        t12 = new Float32Array(2);
        t13 = new Float32Array(2);
        t14 = new Float32Array(2);
        t15 = new Float32Array(2);
        t16 = new Float32Array(2);
        t17 = new Float32Array(2);
        t18 = new Float32Array(2);
        t19 = new Float32Array(2);
        t20 = new Float32Array(2);
        t21 = new Float32Array(2);
        return new V.ContactSolver(t1, null, t2, new T.Vector2(t3), new T.Vector2(t4), new T.Vector2(t5), new T.Vector2(t6), new T.Vector2(t7), new T.Vector2(t8), new T.Vector2(t9), new T.Vector2(t10), new T.Vector2(t11), new T.Vector2(t12), new T.Vector2(t13), new V.PositionSolverManifold(new T.Vector2(t14), new T.Vector2(t15), 0, new T.Vector2(t16), new T.Vector2(t17), new T.Vector2(t18), new T.Vector2(t19), new T.Vector2(t20)), new T.Vector2(t21), new T.Vector2(new Float32Array(2)));
      }}
  },
  ContactSolver_closure: {
    "": "Closure:13;",
    call$1: function(i) {
      return V.ContactConstraint$();
    }
  },
  PositionSolverManifold: {
    "": "Object;normal,point,separation,pointA,pointB,temp,planePoint,clipPoint"
  },
  PolygonAndCircleContact: {
    "": "Contact;flags,prev,next,edge1,edge2,fixtureA,fixtureB,manifold,toiCount,pool,_oldManifold",
    init$2: function(fA, fB) {
      V.Contact.prototype.init$2.call(this, fA, fB);
    },
    evaluate$3: function(argManifold, xfA, xfB) {
      var t1, t2, t3;
      t1 = this.pool.collision;
      t2 = this.fixtureA;
      t2 = t2.get$shape(t2);
      t3 = this.fixtureB;
      t1.collidePolygonAndCircle$5(argManifold, t2, xfA, t3.get$shape(t3), xfB);
    }
  },
  PolygonContact: {
    "": "Contact;flags,prev,next,edge1,edge2,fixtureA,fixtureB,manifold,toiCount,pool,_oldManifold",
    init$2: function(fA, fB) {
      V.Contact.prototype.init$2.call(this, fA, fB);
    },
    evaluate$3: function(argManifold, xfA, xfB) {
      var t1, t2, t3;
      t1 = this.pool.collision;
      t2 = this.fixtureA;
      t2 = t2.get$shape(t2);
      t3 = this.fixtureB;
      t1.collidePolygons$5(argManifold, t2, xfA, t3.get$shape(t3), xfB);
    }
  },
  TimeOfImpactConstraint: {
    "": "Object;localPoints<,localNormal<,localPoint<,type*,radius?,pointCount@,bodyA@,bodyB@",
    setFrom$1: function(argOther) {
      var t1, i;
      for (t1 = this.localPoints, i = 0; i < t1.length; ++i)
        t1[i].setFrom$1(argOther.get$localPoints().$index(0, i));
      this.localNormal.setFrom$1(argOther.get$localNormal());
      this.localPoint.setFrom$1(argOther.get$localPoint());
      this.type = argOther.get$type(argOther);
      this.radius = argOther.get$radius();
      this.pointCount = argOther.get$pointCount();
      this.bodyA = argOther.get$bodyA();
      this.bodyB = argOther.get$bodyB();
    },
    static: {TimeOfImpactConstraint$: function() {
        var t1, t2;
        t1 = P.List_List$generate(2, new V.TimeOfImpactConstraint_closure(), true, T.Vector2);
        t2 = new Float32Array(2);
        return new V.TimeOfImpactConstraint(t1, new T.Vector2(t2), new T.Vector2(new Float32Array(2)), 0, 0, 0, null, null);
      }}
  },
  TimeOfImpactConstraint_closure: {
    "": "Closure:13;",
    call$1: function(i) {
      return new T.Vector2(new Float32Array(2));
    }
  },
  TimeOfImpactSolver: {
    "": "Object;constraints,count,toiBody,psm,rA<,rB<,P,temp",
    initialize$3: function(_, contacts, argCount, argToiBody) {
      var t1, t2, t3, i, contact, fixtureA, fixtureB, shapeA, shapeB, radiusA, radiusB, bodyA, bodyB, manifold, constraint, j, cp, t4;
      this.count = argCount;
      this.toiBody = argToiBody;
      t1 = this.constraints;
      t2 = t1.length;
      if (argCount >= t2) {
        t2 = Array(P.max(argCount, t2 * 2));
        t2.fixed$length = init;
        t2 = H.setRuntimeTypeInfo(t2, [V.TimeOfImpactConstraint]);
        this.constraints = t2;
        t3 = t1.length;
        H.IterableMixinWorkaround_setRangeList(t2, 0, t3, t1, 0);
        for (i = t1.length; t1 = this.constraints, i < t1.length; ++i) {
          t2 = V.TimeOfImpactConstraint$();
          if (i >= t1.length)
            return H.ioore(t1, i);
          t1[i] = t2;
        }
      }
      for (i = 0; i < this.count; ++i) {
        if (i >= 32)
          return H.ioore(contacts, i);
        contact = contacts[i];
        fixtureA = contact.fixtureA;
        fixtureB = contact.fixtureB;
        shapeA = fixtureA.get$shape(fixtureA);
        shapeB = fixtureB.get$shape(fixtureB);
        radiusA = shapeA.radius;
        radiusB = shapeB.radius;
        bodyA = fixtureA.body;
        bodyB = fixtureB.body;
        manifold = contact.manifold;
        t1 = this.constraints;
        if (i >= t1.length)
          return H.ioore(t1, i);
        constraint = t1[i];
        constraint.set$bodyA(bodyA);
        constraint.set$bodyB(bodyB);
        t1 = constraint.get$localNormal().storage;
        t2 = manifold.localNormal.storage;
        t1[1] = t2[1];
        t1[0] = t2[0];
        t2 = constraint.get$localPoint().storage;
        t1 = manifold.localPoint.storage;
        t2[1] = t1[1];
        t2[0] = t1[0];
        constraint.set$type(0, manifold.type);
        constraint.set$pointCount(manifold.pointCount);
        constraint.set$radius(radiusA + radiusB);
        for (t1 = constraint.get$pointCount(), t2 = manifold.points, j = 0; j < t1; ++j) {
          if (j >= 2)
            return H.ioore(t2, j);
          cp = t2[j];
          t3 = constraint.get$localPoints();
          t4 = cp.localPoint;
          if (j >= t3.length)
            return H.ioore(t3, j);
          t3[j] = t4;
        }
      }
    },
    solve$1: function(baumgarte) {
      var t1, t2, t3, t4, t5, t6, t7, t8, normal, point, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, minSeparation, i, t19, c, bodyA, bodyB, massA, massB, invMassA, invIA, invMassB, invIB, t20, t21, t22, t23, t24, t25, j, t26, t27, t28, t29, t30, t31, t32, separation, $C, rnA, rnB, $K, impulse;
      for (t1 = this.P.storage, t2 = this.temp, t3 = t2.storage, t4 = this.rA, t5 = t4.storage, t6 = this.rB, t7 = t6.storage, t8 = this.psm, normal = t8.normal, point = t8.point, t9 = point.storage, t10 = normal.storage, t11 = t8.temp, t12 = t11.storage, t13 = t8.clipPoint.storage, t14 = t8.planePoint, t15 = t8.pointA, t16 = t15.storage, t17 = t8.pointB, t18 = t17.storage, minSeparation = 0, i = 0; i < this.count; ++i) {
        t19 = this.constraints;
        if (i >= t19.length)
          return H.ioore(t19, i);
        c = t19[i];
        bodyA = c.get$bodyA();
        bodyB = c.get$bodyB();
        massA = bodyA.get$mass();
        massB = bodyB.get$mass();
        t19 = this.toiBody;
        if (bodyA == null ? t19 == null : bodyA === t19)
          massB = 0;
        else
          massA = 0;
        t19 = J.getInterceptor$n(massA);
        invMassA = t19.$mul(massA, bodyA.get$invMass());
        invIA = t19.$mul(massA, bodyA.invInertia);
        t19 = J.getInterceptor$n(massB);
        invMassB = t19.$mul(massB, bodyB.get$invMass());
        invIB = t19.$mul(massB, bodyB.invInertia);
        for (t19 = bodyA.sweep, t20 = t19.center, t21 = J.getInterceptor$n(invIA), t22 = bodyB.sweep, t23 = t22.center, t24 = J.getInterceptor$n(invIB), t25 = J.getInterceptor$ns(invMassA), j = 0; j < c.get$pointCount(); ++j) {
          switch (c.get$type(c)) {
            case 0:
              t26 = c.get$bodyA();
              t27 = c.get$localPoint();
              t26.toString;
              t28 = new Float32Array(2);
              V.Transform_mulToOut(t26.originTransform, t27, new T.Vector2(t28));
              t16[1] = t28[1];
              t16[0] = t28[0];
              t28 = c.get$bodyB();
              t27 = c.get$localPoints();
              if (0 >= t27.length)
                return H.ioore(t27, 0);
              t27 = t27[0];
              t28.toString;
              t26 = new Float32Array(2);
              V.Transform_mulToOut(t28.originTransform, t27, new T.Vector2(t26));
              t18[1] = t26[1];
              t18[0] = t26[0];
              if (V.MathBox_distanceSquared(t15, t17) > 1.4208639999999999e-14) {
                t10[1] = t18[1];
                t10[0] = t18[0];
                normal.sub$1(t15);
                normal.normalize$0();
              } else {
                t10[0] = 1;
                t10[1] = 0;
              }
              t9[1] = t16[1];
              t9[0] = t16[0];
              t26 = point.add$1(0, t17).storage;
              t26[1] = t26[1] * 0.5;
              t26[0] = t26[0] * 0.5;
              t12[1] = t18[1];
              t12[0] = t18[0];
              t11.sub$1(t15);
              t8.separation = t11.dot$1(normal) - c.radius;
              break;
            case 1:
              t26 = c.get$bodyA();
              t27 = c.get$localNormal();
              t26.toString;
              t28 = new Float32Array(2);
              t26 = t26.originTransform;
              t27 = t27.storage;
              t28[1] = t27[1];
              t28[0] = t27[0];
              t26 = t26.rotation.storage;
              t27 = t26[0];
              t29 = t28[0];
              t30 = t26[2];
              t31 = t28[1];
              t32 = t26[1];
              t26 = t26[3];
              t28[0] = t27 * t29 + t30 * t31;
              t28[1] = t32 * t29 + t26 * t31;
              t10[1] = t28[1];
              t10[0] = t28[0];
              t28 = c.get$bodyA();
              t31 = c.get$localPoint();
              t28.toString;
              t26 = new Float32Array(2);
              V.Transform_mulToOut(t28.originTransform, t31, new T.Vector2(t26));
              t31 = t14.storage;
              t31[1] = t26[1];
              t31[0] = t26[0];
              t26 = c.get$bodyB();
              t31 = c.get$localPoints();
              if (j >= t31.length)
                return H.ioore(t31, j);
              t31 = t31[j];
              t26.toString;
              t27 = new Float32Array(2);
              V.Transform_mulToOut(t26.originTransform, t31, new T.Vector2(t27));
              t13[1] = t27[1];
              t13[0] = t27[0];
              t12[1] = t13[1];
              t12[0] = t13[0];
              t11.sub$1(t14);
              t8.separation = t11.dot$1(normal) - c.radius;
              t9[1] = t13[1];
              t9[0] = t13[0];
              break;
            case 2:
              t26 = c.get$bodyB();
              t27 = c.get$localNormal();
              t26.toString;
              t28 = new Float32Array(2);
              t26 = t26.originTransform;
              t27 = t27.storage;
              t28[1] = t27[1];
              t28[0] = t27[0];
              t26 = t26.rotation.storage;
              t27 = t26[0];
              t29 = t28[0];
              t30 = t26[2];
              t31 = t28[1];
              t32 = t26[1];
              t26 = t26[3];
              t28[0] = t27 * t29 + t30 * t31;
              t28[1] = t32 * t29 + t26 * t31;
              t10[1] = t28[1];
              t10[0] = t28[0];
              t28 = c.get$bodyB();
              t31 = c.get$localPoint();
              t28.toString;
              t26 = new Float32Array(2);
              V.Transform_mulToOut(t28.originTransform, t31, new T.Vector2(t26));
              t31 = t14.storage;
              t31[1] = t26[1];
              t31[0] = t26[0];
              t26 = c.get$bodyA();
              t31 = c.get$localPoints();
              if (j >= t31.length)
                return H.ioore(t31, j);
              t31 = t31[j];
              t26.toString;
              t27 = new Float32Array(2);
              V.Transform_mulToOut(t26.originTransform, t31, new T.Vector2(t27));
              t13[1] = t27[1];
              t13[0] = t27[0];
              t12[1] = t13[1];
              t12[0] = t13[0];
              t11.sub$1(t14);
              t8.separation = t11.dot$1(normal) - c.radius;
              t9[1] = t13[1];
              t9[0] = t13[0];
              t10[1] = -t10[1];
              t10[0] = -t10[0];
              break;
            default:
          }
          separation = t8.separation;
          t5[1] = t9[1];
          t5[0] = t9[0];
          t4.sub$1(t20);
          t7[1] = t9[1];
          t7[0] = t9[0];
          t6.sub$1(t23);
          minSeparation = P.min(minSeparation, separation);
          $C = P.max(-0.2, P.min(baumgarte * (separation + 0.005), 0));
          t26 = t5[0];
          t27 = t10[1];
          t28 = t5[1];
          t29 = t10[0];
          rnA = t26 * t27 - t28 * t29;
          rnB = t7[0] * t27 - t7[1] * t29;
          $K = J.$add$ns(J.$add$ns(t25.$add(invMassA, invMassB), J.$mul$n(t21.$mul(invIA, rnA), rnA)), J.$mul$n(t24.$mul(invIB, rnB), rnB));
          if (typeof $K !== "number")
            return $K.$gt();
          impulse = $K > 0 ? -$C / $K : 0;
          t1[1] = t10[1];
          t1[0] = t10[0];
          t1[1] = t1[1] * impulse;
          t1[0] = t1[0] * impulse;
          t3[1] = t1[1];
          t3[0] = t1[0];
          t26 = t3[1];
          if (typeof invMassA !== "number")
            return H.iae(invMassA);
          t3[1] = t26 * invMassA;
          t3[0] = t3[0] * invMassA;
          t20.sub$1(t2);
          t26 = t19.angle;
          t27 = t21.$mul(invIA, t5[0] * t1[1] - t5[1] * t1[0]);
          if (typeof t27 !== "number")
            return H.iae(t27);
          t19.angle = t26 - t27;
          bodyA.synchronizeTransform$0();
          t3[1] = t1[1];
          t3[0] = t1[0];
          t27 = t3[1];
          if (typeof invMassB !== "number")
            return H.iae(invMassB);
          t3[1] = t27 * invMassB;
          t3[0] = t3[0] * invMassB;
          t23.add$1(0, t2);
          t27 = t22.angle;
          t26 = t24.$mul(invIB, t7[0] * t1[1] - t7[1] * t1[0]);
          if (typeof t26 !== "number")
            return H.iae(t26);
          t22.angle = t27 + t26;
          bodyB.synchronizeTransform$0();
        }
      }
      return minSeparation >= -0.0075;
    },
    static: {TimeOfImpactSolver$: function() {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11;
        t1 = P.List_List$generate(4, new V.TimeOfImpactSolver_closure(), true, V.TimeOfImpactConstraint);
        t2 = new Float32Array(2);
        t3 = new Float32Array(2);
        t4 = new Float32Array(2);
        t5 = new Float32Array(2);
        t6 = new Float32Array(2);
        t7 = new Float32Array(2);
        t8 = new Float32Array(2);
        t9 = new Float32Array(2);
        t10 = new Float32Array(2);
        t11 = new Float32Array(2);
        return new V.TimeOfImpactSolver(t1, 0, null, new V.TimeOfImpactSolverManifold(new T.Vector2(t2), new T.Vector2(t3), 0, new T.Vector2(t4), new T.Vector2(t5), new T.Vector2(t6), new T.Vector2(t7), new T.Vector2(t8)), new T.Vector2(t9), new T.Vector2(t10), new T.Vector2(t11), new T.Vector2(new Float32Array(2)));
      }}
  },
  TimeOfImpactSolver_closure: {
    "": "Closure:13;",
    call$1: function(i) {
      return V.TimeOfImpactConstraint$();
    }
  },
  TimeOfImpactSolverManifold: {
    "": "Object;normal,point,separation,pointA,pointB,temp,planePoint,clipPoint"
  },
  Filter: {
    "": "Object;categoryBits<,maskBits,groupIndex",
    setFrom$1: function(other) {
      this.categoryBits = other.get$categoryBits();
      this.maskBits = other.maskBits;
      this.groupIndex = other.groupIndex;
    }
  },
  Fixture: {
    "": "Object;box<,density,next<,body>,shape>,friction,restitution,proxy<,filter<,isSensor<,userData,_poolOne,_poolTwo",
    destroyProxy$1: function(broadPhase) {
      var t1, t2, index, receiverLength;
      t1 = this.proxy;
      if (t1 == null)
        return;
      t2 = broadPhase.moveBuffer;
      index = H.Lists_indexOf(t2, t1, 0, t2.length);
      if (index !== -1) {
        t2 = broadPhase.moveBuffer;
        receiverLength = t2.length;
        if (index < 0 || index > receiverLength)
          H.throwExpression(P.RangeError$range(index, 0, receiverLength));
        if (1 < index || 1 > receiverLength)
          H.throwExpression(P.RangeError$range(1, index, receiverLength));
        H.Lists_copy(t2, 1, t2, index, receiverLength - 1);
        C.JSArray_methods.set$length(t2, receiverLength - (1 - index));
      }
      broadPhase.proxyCount = broadPhase.proxyCount - 1;
      t2 = broadPhase._tree;
      t2._removeLeaf$1(t1);
      t2._freeNode$1(t1);
      this.proxy = null;
    },
    synchronize$3: function(broadPhase, transformOne, transformTwo) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9;
      if (this.proxy == null)
        return;
      t1 = this._poolOne;
      this.shape.computeAxisAlignedBox$2(t1, transformOne);
      t2 = this._poolTwo;
      this.shape.computeAxisAlignedBox$2(t2, transformTwo);
      t3 = this.box;
      t4 = t3.lowerBound;
      t5 = t1.lowerBound;
      t6 = t5.storage;
      t7 = t6[0];
      t8 = t2.lowerBound.storage;
      t9 = t8[0];
      t7 = t7 < t9 ? t7 : t9;
      t4 = t4.storage;
      t4[0] = t7;
      t7 = t6[1];
      t8 = t8[1];
      t4[1] = t7 < t8 ? t7 : t8;
      t4 = t3.upperBound;
      t1 = t1.upperBound.storage;
      t7 = t1[0];
      t2 = t2.upperBound.storage;
      t8 = t2[0];
      t7 = t7 > t8 ? t7 : t8;
      t4 = t4.storage;
      t4[0] = t7;
      t1 = t1[1];
      t2 = t2[1];
      t4[1] = t1 > t2 ? t1 : t2;
      t1 = transformTwo.position.storage;
      t2 = transformOne.position.storage;
      t6[0] = t1[0] - t2[0];
      t6[1] = t1[1] - t2[1];
      t2 = this.proxy;
      if (broadPhase._tree.moveProxy$3(t2, t3, t5))
        broadPhase.moveBuffer.push(t2);
    },
    get$type: function(_) {
      return this.shape.type;
    }
  },
  FixtureDef: {
    "": "Object;shape,userData,friction,restitution,density,isSensor,filter",
    FixtureDef$0: function() {
      var t1 = this.filter;
      t1.categoryBits = 1;
      t1.maskBits = 65535;
      t1.groupIndex = 0;
    },
    static: {FixtureDef$: function() {
        var t1 = new V.FixtureDef(null, null, 0.2, 0, 0, false, new V.Filter(0, 0, 0));
        t1.FixtureDef$0();
        return t1;
      }}
  },
  Island: {
    "": "Object;listener,bodies,contacts,joints,positions,velocities,bodyCount,jointCount,contactCount,bodyCapacity,contactCapacity,jointCapacity,positionIterationCount,_contactSolver,_translation,impulse",
    init$4: function(argBodyCapacity, argContactCapacity, argJointCapacity, argListener) {
      var t1, t2, old, t3, i;
      this.bodyCapacity = argBodyCapacity;
      this.contactCapacity = argContactCapacity;
      this.jointCapacity = argJointCapacity;
      this.bodyCount = 0;
      this.contactCount = 0;
      this.listener = argListener;
      t1 = this.bodies;
      if (t1 == null || argBodyCapacity > t1.length)
        this.bodies = H.setRuntimeTypeInfo(Array(argBodyCapacity), [V.Body]);
      t1 = this.contacts;
      if (t1 != null) {
        t2 = this.contactCapacity;
        t1 = t1.length;
        if (typeof t2 !== "number")
          return t2.$gt();
        t1 = t2 > t1;
      } else
        t1 = true;
      if (t1) {
        t1 = this.contactCapacity;
        if (typeof t1 !== "number")
          return H.iae(t1);
        this.contacts = H.setRuntimeTypeInfo(Array(t1), [V.Contact]);
      }
      t1 = this.joints;
      if (t1 != null) {
        t2 = this.jointCapacity;
        t1 = t1.length;
        if (typeof t2 !== "number")
          return t2.$gt();
        t1 = t2 > t1;
      } else
        t1 = true;
      if (t1) {
        t1 = this.jointCapacity;
        if (typeof t1 !== "number")
          return H.iae(t1);
        this.joints = H.setRuntimeTypeInfo(Array(t1), [V.Joint]);
      }
      old = this.velocities;
      t1 = old == null;
      if (!t1) {
        t2 = this.bodyCapacity;
        t3 = old.length;
        if (typeof t2 !== "number")
          return t2.$gt();
        t3 = t2 > t3;
        t2 = t3;
      } else
        t2 = true;
      if (t2) {
        if (t1)
          old = H.setRuntimeTypeInfo(Array(0), [V.Velocity]);
        t1 = this.bodyCapacity;
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = Array(t1);
        t1.fixed$length = init;
        t1 = H.setRuntimeTypeInfo(t1, [V.Velocity]);
        this.velocities = t1;
        i = old.length;
        H.IterableMixinWorkaround_setRangeList(t1, 0, i, old, 0);
        for (; t1 = this.velocities, i < t1.length; ++i) {
          t2 = new V.Velocity(null, null);
          t2.v = new T.Vector2(new Float32Array(2));
          t2.a = 0;
          t1[i] = t2;
        }
      }
      old = this.positions;
      t1 = old == null;
      if (!t1) {
        t2 = this.bodyCapacity;
        t3 = old.length;
        if (typeof t2 !== "number")
          return t2.$gt();
        t3 = t2 > t3;
        t2 = t3;
      } else
        t2 = true;
      if (t2) {
        if (t1)
          old = H.setRuntimeTypeInfo(Array(0), [V.Position]);
        t1 = this.bodyCapacity;
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = Array(t1);
        t1.fixed$length = init;
        t1 = H.setRuntimeTypeInfo(t1, [V.Position]);
        this.positions = t1;
        i = old.length;
        H.IterableMixinWorkaround_setRangeList(t1, 0, i, old, 0);
        for (; t1 = this.positions, i < t1.length; ++i) {
          t2 = new V.Position(null, null);
          t2.x = new T.Vector2(new Float32Array(2));
          t2.a = 0;
          t1[i] = t2;
        }
      }
    },
    solve$3: function(step, gravity, allowSleep) {
      var t1, i, t2, b, t3, t4, t5, t6, t7, t8, newAngularVelocity, a, a1, a2, b1, i1, i2, fixtureA, fixtureB, bodyA, bodyB, temp, j, ratio, rotation, t9, contactsOkay, jointsOkay, jointOkay, minSleepTime;
      t1 = gravity.storage;
      i = 0;
      while (true) {
        t2 = this.bodyCount;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        c$0: {
          t2 = this.bodies;
          if (i >= t2.length)
            return H.ioore(t2, i);
          b = t2[i];
          if (b._type !== 2)
            break c$0;
          t2 = b._force.storage;
          t3 = t2[0];
          t4 = b.invMass;
          t5 = t1[0];
          t6 = step.dt;
          t2 = t2[1];
          t7 = t1[1];
          t8 = new Float32Array(2);
          t8[0] = (t3 * t4 + t5) * t6;
          t8[1] = (t2 * t4 + t7) * t6;
          t6 = b._linearVelocity;
          t6.add$1(0, new T.Vector2(t8));
          t8 = b._angularVelocity;
          newAngularVelocity = t8 + step.dt * b.invInertia * b._torque;
          if (b._type !== 0) {
            if (newAngularVelocity * newAngularVelocity > 0)
              b.set$awake(true);
            b._angularVelocity = newAngularVelocity;
            t2 = newAngularVelocity;
          } else
            t2 = t8;
          t3 = step.dt;
          a = 1 - t3 * b.linearDamping;
          t4 = a < 1;
          if (0 > (t4 ? a : 1))
            a1 = 0;
          else
            a1 = t4 ? a : 1;
          t4 = t6.storage;
          t4[1] = t4[1] * a1;
          t4[0] = t4[0] * a1;
          a2 = 1 - t3 * b.angularDamping;
          b1 = a2 < 1 ? a2 : 1;
          t2 *= 0 > b1 ? 0 : b1;
          if (b._type !== 0) {
            if (t2 * t2 > 0)
              b.set$awake(true);
            b._angularVelocity = t2;
          }
        }
        ++i;
      }
      t1 = this.contactCount;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = this.contacts;
      i1 = -1;
      i2 = 0;
      for (; i2 < t1; ++i2) {
        t3 = t2.length;
        if (i2 >= t3)
          return H.ioore(t2, i2);
        t4 = t2[i2];
        fixtureA = t4.fixtureA;
        fixtureB = t4.fixtureB;
        bodyA = J.get$body$x(fixtureA);
        bodyB = J.get$body$x(fixtureB);
        if (bodyA.get$type(bodyA) !== 0 && bodyB.get$type(bodyB) !== 0) {
          ++i1;
          if (i1 >= t3)
            return H.ioore(t2, i1);
          temp = t2[i1];
          t2[i1] = t4;
          t2[i2] = temp;
        }
      }
      t3 = this._contactSolver;
      t3.init$3(t2, t1, step.dtRatio);
      t3.warmStart$0();
      i = 0;
      while (true) {
        t1 = this.jointCount;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        t1 = this.joints;
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i].initVelocityConstraints$1(step);
        ++i;
      }
      for (i = 0; i < step.velocityIterations; ++i) {
        j = 0;
        while (true) {
          t1 = this.jointCount;
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(j < t1))
            break;
          t1 = this.joints;
          if (j >= t1.length)
            return H.ioore(t1, j);
          t1[j].solveVelocityConstraints$1(step);
          ++j;
        }
        t3.solveVelocityConstraints$0();
      }
      t3.storeImpulses$0();
      t1 = new Float32Array(2);
      temp = new T.Vector2(t1);
      t2 = this._translation;
      t4 = t2.storage;
      i = 0;
      while (true) {
        t5 = this.bodyCount;
        if (typeof t5 !== "number")
          return H.iae(t5);
        if (!(i < t5))
          break;
        c$0: {
          t5 = this.bodies;
          if (i >= t5.length)
            return H.ioore(t5, i);
          b = t5[i];
          if (b._type === 0)
            break c$0;
          t5 = b._linearVelocity.storage;
          t4[1] = t5[1];
          t4[0] = t5[0];
          t6 = step.dt;
          t4[1] = t4[1] * t6;
          t4[0] = t4[0] * t6;
          if (t2.dot$1(t2) > 4) {
            ratio = 2 / t2.get$length(t2);
            t5[1] = t5[1] * ratio;
            t5[0] = t5[0] * ratio;
          }
          rotation = step.dt * b._angularVelocity;
          if (rotation * rotation > 2.4674011002723395) {
            t6 = Math.abs(rotation);
            t6 = b._angularVelocity * (1.5707963267948966 / t6);
            if (b._type !== 0) {
              if (t6 * t6 > 0)
                b.set$awake(true);
              b._angularVelocity = t6;
            }
          }
          t6 = b.sweep;
          t7 = t6.center;
          t8 = t6.centerZero.storage;
          t9 = t7.storage;
          t8[1] = t9[1];
          t8[0] = t9[0];
          t6.angleZero = t6.angle;
          t1[1] = t5[1];
          t1[0] = t5[0];
          t5 = step.dt;
          t1[1] = t1[1] * t5;
          t1[0] = t1[0] * t5;
          t7.add$1(0, temp);
          t6.angle = t6.angle + step.dt * b._angularVelocity;
          b.synchronizeTransform$0();
        }
        ++i;
      }
      for (i = 0; i < step.positionIterations; ++i) {
        contactsOkay = t3.solvePositionConstraints$1(0.2);
        jointsOkay = true;
        j = 0;
        while (true) {
          t1 = this.jointCount;
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(j < t1))
            break;
          t1 = this.joints;
          if (j >= t1.length)
            return H.ioore(t1, j);
          jointOkay = t1[j].solvePositionConstraints$1(0.2);
          jointsOkay = jointsOkay && jointOkay;
          ++j;
        }
        if (contactsOkay && jointsOkay)
          break;
      }
      this.report$1(t3.constraints);
      if (allowSleep) {
        minSleepTime = 99999999999999;
        i = 0;
        while (true) {
          t1 = this.bodyCount;
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          c$0: {
            t1 = this.bodies;
            if (i >= t1.length)
              return H.ioore(t1, i);
            b = t1[i];
            if (b._type === 0)
              break c$0;
            t1 = b.flags;
            if (typeof t1 !== "number")
              return t1.$and();
            if ((t1 & 4) === 0) {
              b.sleepTime = 0;
              minSleepTime = 0;
            }
            if ((t1 & 4) !== 0) {
              t1 = b._angularVelocity;
              if (!(t1 * t1 > 0.0012184696791468343)) {
                t1 = b._linearVelocity;
                t1 = t1.dot$1(t1) > 0.0001;
              } else
                t1 = true;
            } else
              t1 = true;
            if (t1) {
              b.sleepTime = 0;
              minSleepTime = 0;
            } else {
              t1 = b.sleepTime + step.dt;
              b.sleepTime = t1;
              minSleepTime = P.min(minSleepTime, t1);
            }
          }
          ++i;
        }
        if (minSleepTime >= 0.5) {
          i = 0;
          while (true) {
            t1 = this.bodyCount;
            if (typeof t1 !== "number")
              return H.iae(t1);
            if (!(i < t1))
              break;
            t1 = this.bodies;
            if (i >= t1.length)
              return H.ioore(t1, i);
            t1[i].set$awake(false);
            ++i;
          }
        }
      }
    },
    report$1: function(constraints) {
      return;
    }
  },
  Position: {
    "": "Object;x*,a"
  },
  Velocity: {
    "": "Object;v,a"
  },
  ConstantVolumeJoint: {
    "": "Joint;bodies,targetLengths,targetVolume,normals,step,_impulse,_world,distanceJoints,frequencyHz,dampingRatio,type,_prev,_next,edgeA,edgeB,bodyA,bodyB,islandFlag,collideConnected,userData,localCenterA,localCenterB,invMassA,invIA,invMassB,invIB",
    destructor$0: function() {
      var t1, i, t2;
      for (t1 = this._world, i = 0; t2 = this.distanceJoints, i < t2.length; ++i)
        t1.destroyJoint$1(t2[i]);
    },
    get$area: function() {
      var t1, t2, t3, t4, t5, t6, result, i, i0;
      t1 = this.bodies;
      t2 = t1.length;
      t3 = t2 - 1;
      if (t3 < 0)
        return H.ioore(t1, t3);
      t3 = t1[t3].get$worldCenter().storage[0];
      t1 = this.bodies;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1 = t1[0].get$worldCenter().storage[1];
      t2 = this.bodies;
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      t2 = t2[0].get$worldCenter().storage[0];
      t4 = this.bodies;
      t5 = t4.length;
      t6 = t5 - 1;
      if (t6 < 0)
        return H.ioore(t4, t6);
      result = 0 + (t3 * t1 - t2 * t4[t6].get$worldCenter().storage[1]);
      for (i = 0; t1 = this.bodies, i < t1.length - 1; i = i0) {
        t1 = t1[i].get$worldCenter().storage[0];
        t2 = this.bodies;
        i0 = i + 1;
        if (i0 >= t2.length)
          return H.ioore(t2, i0);
        t2 = t2[i0].get$worldCenter().storage[1];
        t3 = this.bodies;
        if (i0 >= t3.length)
          return H.ioore(t3, i0);
        t3 = t3[i0].get$worldCenter().storage[0];
        t4 = this.bodies;
        if (i >= t4.length)
          return H.ioore(t4, i);
        result += t1 * t2 - t3 * t4[i].get$worldCenter().storage[1];
      }
      return result * 0.5;
    },
    constrainEdges$1: function(argStep) {
      var perimeter, i, t1, t2, next, dx, dy, dist, delta, t3, toExtrude, done, t4, norm;
      for (perimeter = 0, i = 0; t1 = this.bodies, t2 = t1.length, i < t2; ++i) {
        next = i === t2 - 1 ? 0 : i + 1;
        if (next >= t2)
          return H.ioore(t1, next);
        t1 = t1[next].get$worldCenter().storage[0];
        t2 = this.bodies;
        if (i >= t2.length)
          return H.ioore(t2, i);
        dx = t1 - t2[i].get$worldCenter().storage[0];
        t2 = this.bodies;
        if (next >= t2.length)
          return H.ioore(t2, next);
        t2 = t2[next].get$worldCenter().storage[1];
        t1 = this.bodies;
        if (i >= t1.length)
          return H.ioore(t1, i);
        dy = t2 - t1[i].get$worldCenter().storage[1];
        dist = Math.sqrt(dx * dx + dy * dy);
        if (dist < 1.192e-7)
          dist = 1;
        t1 = this.normals;
        if (i >= t1.length)
          return H.ioore(t1, i);
        J.set$x$x(t1[i], dy / dist);
        t1 = this.normals;
        if (i >= t1.length)
          return H.ioore(t1, i);
        J.set$y$x(t1[i], -dx / dist);
        perimeter += dist;
      }
      t1 = new Float32Array(2);
      delta = new T.Vector2(t1);
      t2 = this.targetVolume;
      t3 = this.get$area();
      if (typeof t2 !== "number")
        return t2.$sub();
      toExtrude = 0.5 * (t2 - t3) / perimeter;
      for (done = true, i = 0; t2 = this.bodies.length, i < t2; ++i) {
        next = i === t2 - 1 ? 0 : i + 1;
        t2 = this.normals;
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2 = J.get$x$x(t2[i]);
        t3 = this.normals;
        if (next >= t3.length)
          return H.ioore(t3, next);
        t3 = J.$add$ns(t2, J.get$x$x(t3[next]));
        if (typeof t3 !== "number")
          return H.iae(t3);
        t2 = this.normals;
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2 = J.get$y$x(t2[i]);
        t4 = this.normals;
        if (next >= t4.length)
          return H.ioore(t4, next);
        t4 = J.get$y$x(t4[next]);
        if (typeof t2 !== "number")
          return t2.$add();
        if (typeof t4 !== "number")
          return H.iae(t4);
        t1[0] = toExtrude * t3;
        t1[1] = toExtrude * (t2 + t4);
        norm = delta.get$length(delta);
        if (norm > 0.2) {
          t2 = 0.2 / norm;
          t1[1] = t1[1] * t2;
          t1[0] = t1[0] * t2;
        }
        if (norm > 0.005)
          done = false;
        t2 = this.bodies;
        if (next >= t2.length)
          return H.ioore(t2, next);
        t2 = t2[next];
        t3 = t2.get$sweep().center.storage;
        t3[0] = t3[0] + t1[0];
        t3 = t2.sweep.center.storage;
        t3[1] = t3[1] + t1[1];
        t2.synchronizeTransform$0();
      }
      return done;
    },
    initVelocityConstraints$1: function(argStep) {
      var d, i, t1, t2, prev, next, t3, t4;
      this.step = argStep;
      d = P.List_List$generate(this.bodies.length, new V.ConstantVolumeJoint_initVelocityConstraints_closure(), true, T.Vector2);
      for (i = 0; t1 = this.bodies, t2 = t1.length, i < t2; ++i) {
        prev = i === 0 ? t2 - 1 : i - 1;
        next = i === t2 - 1 ? 0 : i + 1;
        if (i >= d.length)
          return H.ioore(d, i);
        t3 = d[i];
        if (next >= t2)
          return H.ioore(t1, next);
        t3.setFrom$1(t1[next].get$worldCenter());
        if (i >= d.length)
          return H.ioore(d, i);
        t1 = d[i];
        t3 = this.bodies;
        if (prev < 0 || prev >= t3.length)
          return H.ioore(t3, prev);
        t1.sub$1(t3[prev].get$worldCenter());
      }
      t1 = this.step;
      if (t1.warmStarting) {
        this._impulse = this._impulse * t1.dtRatio;
        for (i = 0; t1 = this.bodies, i < t1.length; ++i) {
          t1 = t1[i];
          t2 = t1.get$linearVelocity().storage;
          t3 = t2[0];
          t1 = t1.get$invMass();
          if (i >= d.length)
            return H.ioore(d, i);
          t4 = J.get$y$x(d[i]);
          if (typeof t4 !== "number")
            return H.iae(t4);
          t2[0] = t3 + t1 * t4 * 0.5 * this._impulse;
          t4 = this.bodies;
          if (i >= t4.length)
            return H.ioore(t4, i);
          t4 = t4[i];
          t1 = t4.get$linearVelocity().storage;
          t3 = t1[1];
          t4 = t4.get$invMass();
          if (i >= d.length)
            return H.ioore(d, i);
          t2 = J.$negate$n(J.get$x$x(d[i]));
          if (typeof t2 !== "number")
            return H.iae(t2);
          t1[1] = t3 + t4 * t2 * 0.5 * this._impulse;
        }
      } else
        this._impulse = 0;
    },
    solvePositionConstraints$1: function(baumgarte) {
      return this.constrainEdges$1(this.step);
    },
    solveVelocityConstraints$1: function(argStep) {
      var d, crossMassSum, dotMassSum, i, t1, t2, prev, next, t3, lambda, t4;
      d = P.List_List$generate(this.bodies.length, new V.ConstantVolumeJoint_solveVelocityConstraints_closure(), true, T.Vector2);
      for (crossMassSum = 0, dotMassSum = 0, i = 0; t1 = this.bodies, t2 = t1.length, i < t2; ++i) {
        prev = i === 0 ? t2 - 1 : i - 1;
        next = i === t2 - 1 ? 0 : i + 1;
        if (i >= d.length)
          return H.ioore(d, i);
        t3 = d[i];
        if (next >= t2)
          return H.ioore(t1, next);
        t3.setFrom$1(t1[next].get$worldCenter());
        if (i >= d.length)
          return H.ioore(d, i);
        t1 = d[i];
        t3 = this.bodies;
        if (prev < 0 || prev >= t3.length)
          return H.ioore(t3, prev);
        t1.sub$1(t3[prev].get$worldCenter());
        if (i >= d.length)
          return H.ioore(d, i);
        t3 = d[i].get$length2();
        t1 = this.bodies;
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1 = t1[i];
        t2 = t1.get$mass();
        if (typeof t2 !== "number")
          return H.iae(t2);
        dotMassSum += t3 / t2;
        t1 = t1.get$linearVelocity();
        if (i >= d.length)
          return H.ioore(d, i);
        t2 = d[i];
        t1 = t1.storage;
        t3 = t1[0];
        t2 = t2.get$storage();
        if (1 >= t2.length)
          return H.ioore(t2, 1);
        crossMassSum += t3 * t2[1] - t1[1] * t2[0];
      }
      lambda = -2 * crossMassSum / dotMassSum;
      this._impulse = this._impulse + lambda;
      for (i = 0; t1 = this.bodies, i < t1.length; ++i) {
        t1 = t1[i];
        t2 = t1.get$linearVelocity().storage;
        t3 = t2[0];
        t1 = t1.get$invMass();
        if (i >= d.length)
          return H.ioore(d, i);
        t4 = J.get$y$x(d[i]);
        if (typeof t4 !== "number")
          return H.iae(t4);
        t2[0] = t3 + t1 * t4 * 0.5 * lambda;
        t4 = this.bodies;
        if (i >= t4.length)
          return H.ioore(t4, i);
        t4 = t4[i];
        t1 = t4.get$linearVelocity().storage;
        t3 = t1[1];
        t4 = t4.get$invMass();
        if (i >= d.length)
          return H.ioore(d, i);
        t2 = J.$negate$n(J.get$x$x(d[i]));
        if (typeof t2 !== "number")
          return H.iae(t2);
        t1[1] = t3 + t4 * t2 * 0.5 * lambda;
      }
    },
    getAnchorA$1: function(argOut) {
      throw H.wrapException(P.UnimplementedError$(null));
    },
    getAnchorB$1: function(argOut) {
      throw H.wrapException(P.UnimplementedError$(null));
    },
    ConstantVolumeJoint$2: function(_world, def) {
      var t1, i, next, t2, temp, dist;
      t1 = def.get$bodies();
      t1.get$length(t1).$le(0, 2);
      t1 = P.List_List$from(t1, true, null);
      this.bodies = t1;
      t1 = H.setRuntimeTypeInfo(Array(t1.length), [J.JSDouble]);
      this.targetLengths = t1;
      for (i = 0; t1 = t1.length, i < t1; ++i) {
        next = i === t1 - 1 ? 0 : i + 1;
        t1 = this.bodies;
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1 = t1[i].get$worldCenter();
        t2 = new Float32Array(2);
        temp = new T.Vector2(t2);
        t1 = t1.storage;
        t2[1] = t1[1];
        t2[0] = t1[0];
        t1 = this.bodies;
        if (next >= t1.length)
          return H.ioore(t1, next);
        temp.sub$1(t1[next].get$worldCenter());
        dist = temp.get$length(temp);
        t1 = this.targetLengths;
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i] = dist;
      }
      this.targetVolume = this.get$area();
      t1 = def.get$joints();
      t1.get$length(t1);
      throw H.wrapException(new P.ArgumentError("Incorrect joint definition.  Joints have to correspond to the bodies"));
    },
    static: {ConstantVolumeJoint$: function(_world, def) {
        var t1, t2, t3, t4, t5, t6;
        t1 = def.type;
        t2 = def.bodyA;
        t3 = def.bodyB;
        t4 = def.collideConnected;
        t5 = def.userData;
        t6 = new Float32Array(2);
        t1 = new V.ConstantVolumeJoint(null, null, null, null, null, 0, _world, null, null, null, t1, null, null, new V.JointEdge(null, null, null, null), new V.JointEdge(null, null, null, null), t2, t3, false, t4, t5, new T.Vector2(t6), new T.Vector2(new Float32Array(2)), null, null, null, null);
        t1.ConstantVolumeJoint$2(_world, def);
        return t1;
      }}
  },
  ConstantVolumeJoint_closure: {
    "": "Closure:13;",
    call$1: function(i) {
      return new T.Vector2(new Float32Array(2));
    }
  },
  ConstantVolumeJoint_initVelocityConstraints_closure: {
    "": "Closure:13;",
    call$1: function(i) {
      return new T.Vector2(new Float32Array(2));
    }
  },
  ConstantVolumeJoint_solveVelocityConstraints_closure: {
    "": "Closure:13;",
    call$1: function(i) {
      return new T.Vector2(new Float32Array(2));
    }
  },
  DistanceJoint: {
    "": "Joint;localAnchor1,localAnchor2,u,impulse,mass<,length>,frequencyHz,dampingRatio,gamma,bias,type,_prev,_next,edgeA,edgeB,bodyA,bodyB,islandFlag,collideConnected,userData,localCenterA,localCenterB,invMassA,invIA,invMassB,invIB",
    getAnchorA$1: function(argOut) {
      this.bodyA.getWorldPointToOut$2(this.localAnchor1, argOut);
    },
    getAnchorB$1: function(argOut) {
      this.bodyB.getWorldPointToOut$2(this.localAnchor2, argOut);
    },
    initVelocityConstraints$1: function(step) {
      var b1, b2, t1, r1, t2, r2, t3, t4, t5, t6, len, cr1u, cr2u, invMass, omega, k, $P;
      b1 = this.bodyA;
      b2 = this.bodyB;
      t1 = new Float32Array(2);
      r1 = new T.Vector2(t1);
      t2 = new Float32Array(2);
      r2 = new T.Vector2(t2);
      r1.setFrom$1(this.localAnchor1).sub$1(b1.get$localCenter());
      r2.setFrom$1(this.localAnchor2).sub$1(b2.get$localCenter());
      b1.get$originTransform().rotation.transformed$2(r1, r1);
      b2.get$originTransform().rotation.transformed$2(r2, r2);
      t3 = this.u;
      t4 = b2.sweep.center.storage;
      t5 = b1.sweep.center.storage;
      t6 = t3.storage;
      t6[0] = t4[0] + t2[0] - t5[0] - t1[0];
      t6[1] = t4[1] + t2[1] - t5[1] - t1[1];
      len = t3.get$length(t3);
      if (len > 0.005) {
        t1 = 1 / len;
        t6[0] = t6[0] * t1;
        t6[1] = t6[1] * t1;
      } else {
        t6[0] = 0;
        t6[1] = 0;
      }
      cr1u = r1.cross$1(t3);
      cr2u = r2.cross$1(t3);
      invMass = b1.invMass + b1.invInertia * cr1u * cr1u + b2.invMass + b2.invInertia * cr2u * cr2u;
      t1 = 1 / invMass;
      this.mass = t1;
      t2 = this.frequencyHz;
      if (t2 > 0) {
        t4 = this.length;
        omega = 6.283185307179586 * t2;
        t2 = this.dampingRatio;
        k = t1 * omega * omega;
        t5 = step.dt;
        t2 = t5 * (2 * t1 * t2 * omega + t5 * k);
        this.gamma = t2;
        t1 = t2 !== 0 ? 1 / t2 : 0;
        this.gamma = t1;
        this.bias = (len - t4) * t5 * k * t1;
        t1 = invMass + t1;
        this.mass = t1;
        this.mass = t1 !== 0 ? 1 / t1 : 0;
      }
      if (step.warmStarting) {
        this.impulse = this.impulse * step.dtRatio;
        t1 = new Float32Array(2);
        $P = new T.Vector2(t1);
        $P.setFrom$1(t3).scale$1(0, this.impulse);
        t3 = b1._linearVelocity.storage;
        t2 = t3[0];
        t4 = b1.invMass;
        t3[0] = t2 - t4 * t1[0];
        t3[1] = t3[1] - t4 * t1[1];
        b1.set$angularVelocity(b1._angularVelocity - b1.invInertia * r1.cross$1($P));
        t4 = b2._linearVelocity.storage;
        t3 = t4[0];
        t2 = b2.invMass;
        t4[0] = t3 + t2 * t1[0];
        t4[1] = t4[1] + t2 * t1[1];
        b2.set$angularVelocity(b2._angularVelocity + b2.invInertia * r2.cross$1($P));
      } else
        this.impulse = 0;
    },
    solveVelocityConstraints$1: function(step) {
      var b1, b2, t1, r1, t2, r2, v1, v2, t3, t4, t5, Cdot, t6, t7, t8, t9, imp, Px, Py;
      b1 = this.bodyA;
      b2 = this.bodyB;
      t1 = new Float32Array(2);
      r1 = new T.Vector2(t1);
      t2 = new Float32Array(2);
      r2 = new T.Vector2(t2);
      r1.setFrom$1(this.localAnchor1).sub$1(b1.get$localCenter());
      r2.setFrom$1(this.localAnchor2).sub$1(b2.get$localCenter());
      b1.get$originTransform().rotation.transformed$2(r1, r1);
      b2.get$originTransform().rotation.transformed$2(r2, r2);
      v1 = new T.Vector2(new Float32Array(2));
      v2 = new T.Vector2(new Float32Array(2));
      V.Vector2_crossVectorAndNumToOut(r1, -b1._angularVelocity, v1);
      V.Vector2_crossVectorAndNumToOut(r2, -b2._angularVelocity, v2);
      t3 = b1._linearVelocity;
      v1.add$1(0, t3);
      t4 = b2._linearVelocity;
      v2.add$1(0, t4);
      t5 = this.u;
      Cdot = t5.dot$1(v2.sub$1(v1));
      t6 = this.mass;
      if (typeof t6 !== "number")
        return t6.$negate();
      t7 = this.bias;
      t8 = this.gamma;
      t9 = this.impulse;
      imp = -t6 * (Cdot + t7 + t8 * t9);
      this.impulse = t9 + imp;
      t5 = t5.storage;
      Px = imp * t5[0];
      Py = imp * t5[1];
      t3 = t3.storage;
      t5 = t3[0];
      t9 = b1.invMass;
      t3[0] = t5 - t9 * Px;
      t3[1] = t3[1] - t9 * Py;
      b1.set$angularVelocity(b1._angularVelocity - b1.invInertia * (t1[0] * Py - t1[1] * Px));
      t4 = t4.storage;
      t1 = t4[0];
      t9 = b2.invMass;
      t4[0] = t1 + t9 * Px;
      t4[1] = t4[1] + t9 * Py;
      b2.set$angularVelocity(b2._angularVelocity + b2.invInertia * (t2[0] * Py - t2[1] * Px));
    },
    solvePositionConstraints$1: function(baumgarte) {
      var b1, b2, t1, r1, t2, r2, t3, d, t4, t5, t6, t7, t8, t9, $C, imp, Px, Py;
      if (this.frequencyHz > 0)
        return true;
      b1 = this.bodyA;
      b2 = this.bodyB;
      t1 = new Float32Array(2);
      r1 = new T.Vector2(t1);
      t2 = new Float32Array(2);
      r2 = new T.Vector2(t2);
      t3 = new Float32Array(2);
      d = new T.Vector2(t3);
      r1.setFrom$1(this.localAnchor1).sub$1(b1.get$localCenter());
      r2.setFrom$1(this.localAnchor2).sub$1(b2.get$localCenter());
      b1.get$originTransform().rotation.transformed$2(r1, r1);
      b2.get$originTransform().rotation.transformed$2(r2, r2);
      t4 = b2.sweep;
      t5 = t4.center.storage;
      t6 = t5[0];
      t7 = t2[0];
      t8 = b1.sweep;
      t9 = t8.center.storage;
      t3[0] = t6 + t7 - t9[0] - t1[0];
      t3[1] = t5[1] + t2[1] - t9[1] - t1[1];
      $C = P.max(-0.2, P.min(d.normalizeLength$0() - this.length, 0.2));
      t3 = this.mass;
      if (typeof t3 !== "number")
        return t3.$negate();
      imp = -t3 * $C;
      t3 = this.u;
      t3.setFrom$1(d);
      t3 = t3.storage;
      Px = imp * t3[0];
      Py = imp * t3[1];
      t3 = t9[0];
      t7 = b1.invMass;
      t9[0] = t3 - t7 * Px;
      t9[1] = t9[1] - t7 * Py;
      t8.angle = t8.angle - b1.invInertia * (t1[0] * Py - t1[1] * Px);
      t1 = t5[0];
      t8 = b2.invMass;
      t5[0] = t1 + t8 * Px;
      t5[1] = t5[1] + t8 * Py;
      t4.angle = t4.angle + b2.invInertia * (t2[0] * Py - t2[1] * Px);
      b1.synchronizeTransform$0();
      b2.synchronizeTransform$0();
      return Math.abs($C) < 0.005;
    }
  },
  FrictionJoint: {
    "": "Joint;_localAnchorA,_localAnchorB,_linearImpulse,_angularImpulse,_maxForce,_maxTorque,type,_prev,_next,edgeA,edgeB,bodyA,bodyB,islandFlag,collideConnected,userData,localCenterA,localCenterB,invMassA,invIA,invMassB,invIB",
    initVelocityConstraints$1: function(step) {
      var t1, r1, t2, r2, t3, t4, t5, t6, t7, t8, t9, $K, linearMass, $P;
      t1 = new Float32Array(2);
      r1 = new T.Vector2(t1);
      t2 = new Float32Array(2);
      r2 = new T.Vector2(t2);
      r1.setFrom$1(this._localAnchorA).sub$1(this.bodyA.get$localCenter());
      r2.setFrom$1(this._localAnchorB).sub$1(this.bodyB.get$localCenter());
      this.bodyA.get$originTransform().rotation.transformed$2(r1, r1);
      this.bodyB.get$originTransform().rotation.transformed$2(r2, r2);
      t3 = this.bodyA;
      t4 = t3.get$invMass();
      t5 = this.bodyB;
      t4 += t5.get$invMass();
      t3 = t3.invInertia;
      t6 = t1[1];
      t5 = t5.invInertia;
      t7 = t2[1];
      t1 = t1[0];
      t2 = t2[0];
      t8 = t5 * t2;
      t9 = -t3 * t1 * t6 - t8 * t7;
      $K = new T.Matrix2(new Float32Array(4));
      $K.setValues$4(t4 + t3 * t6 * t6 + t5 * t7 * t7, t9, t9, t4 + t3 * t1 * t1 + t8 * t2);
      linearMass = new T.Matrix2(new Float32Array(4));
      linearMass.setFrom$1($K);
      linearMass.invert$0();
      if (this.bodyA.get$invInertia() + this.bodyB.get$invInertia() > 0)
        ;
      t1 = this._linearImpulse;
      if (step.warmStarting) {
        t1.scale$1(0, step.dtRatio);
        this._angularImpulse = this._angularImpulse * step.dtRatio;
        t2 = new Float32Array(2);
        $P = new T.Vector2(t2);
        $P.setFrom$1(t1);
        t1 = this.bodyA;
        t3 = t1.get$linearVelocity().storage;
        t4 = t3[0];
        t5 = t1.get$invMass();
        t3[0] = t4 - t5 * t2[0];
        t3[1] = t3[1] - t5 * t2[1];
        t1.set$angularVelocity(t1.get$angularVelocity() - t1.invInertia * (r1.cross$1($P) + this._angularImpulse));
        t1 = this.bodyB;
        t5 = t1.get$linearVelocity().storage;
        t3 = t5[0];
        t4 = t1.get$invMass();
        t5[0] = t3 + t4 * t2[0];
        t5[1] = t5[1] + t4 * t2[1];
        t1.set$angularVelocity(t1.get$angularVelocity() + t1.invInertia * (r2.cross$1($P) + this._angularImpulse));
      } else {
        t1.setZero$0();
        this._angularImpulse = 0;
      }
    },
    solveVelocityConstraints$1: function(step) {
      var t1, t2, t3, t4, angularMass, oldImpulse, maxImpulse, impulse, r1, r2, temp, Cdot, t5, t6, t7, t8, t9, $K, linearMass;
      t1 = this.bodyB;
      t2 = t1.get$angularVelocity();
      t3 = this.bodyA;
      t4 = t3.get$angularVelocity();
      angularMass = t3.get$invInertia() + t1.get$invInertia();
      if (angularMass > 0)
        angularMass = 1 / angularMass;
      oldImpulse = this._angularImpulse;
      maxImpulse = C.JSNumber_methods.$mul(step.dt, this._maxTorque);
      t1 = P.max(-maxImpulse, P.min(this._angularImpulse + -angularMass * (t2 - t4), maxImpulse));
      this._angularImpulse = t1;
      impulse = t1 - oldImpulse;
      t1 = this.bodyA;
      t1.set$angularVelocity(t1.get$angularVelocity() - t1.get$invInertia() * impulse);
      t1 = this.bodyB;
      t1.set$angularVelocity(t1.get$angularVelocity() + t1.get$invInertia() * impulse);
      t1 = new Float32Array(2);
      r1 = new T.Vector2(t1);
      t2 = new Float32Array(2);
      r2 = new T.Vector2(t2);
      r1.setFrom$1(this._localAnchorA).sub$1(this.bodyA.get$localCenter());
      r2.setFrom$1(this._localAnchorB).sub$1(this.bodyB.get$localCenter());
      this.bodyA.get$originTransform().rotation.transformed$2(r1, r1);
      this.bodyB.get$originTransform().rotation.transformed$2(r2, r2);
      temp = new T.Vector2(new Float32Array(2));
      Cdot = new T.Vector2(new Float32Array(2));
      V.Vector2_crossVectorAndNumToOut(r1, -this.bodyA.get$angularVelocity(), temp);
      V.Vector2_crossVectorAndNumToOut(r2, -this.bodyB.get$angularVelocity(), Cdot);
      Cdot.add$1(0, this.bodyB.get$linearVelocity()).sub$1(this.bodyA.get$linearVelocity()).sub$1(temp);
      t3 = this.bodyA;
      t4 = t3.get$invMass();
      t5 = this.bodyB;
      t4 += t5.get$invMass();
      t3 = t3.invInertia;
      t6 = t1[1];
      t5 = t5.invInertia;
      t7 = t2[1];
      t1 = t1[0];
      t2 = t2[0];
      t8 = t5 * t2;
      t9 = -t3 * t1 * t6 - t8 * t7;
      $K = new T.Matrix2(new Float32Array(4));
      $K.setValues$4(t4 + t3 * t6 * t6 + t5 * t7 * t7, t9, t9, t4 + t3 * t1 * t1 + t8 * t2);
      linearMass = new T.Matrix2(new Float32Array(4));
      linearMass.setFrom$1($K);
      linearMass.invert$0();
      t1 = new Float32Array(2);
      impulse = new T.Vector2(t1);
      linearMass.transformed$2(Cdot, impulse);
      impulse.negate$0();
      oldImpulse = new T.Vector2(new Float32Array(2));
      t2 = this._linearImpulse;
      oldImpulse.setFrom$1(t2);
      t2.add$1(0, impulse);
      maxImpulse = C.JSNumber_methods.$mul(step.dt, this._maxForce);
      if (t2.get$length2() > maxImpulse * maxImpulse) {
        t2.normalize$0();
        t2.scale$1(0, maxImpulse);
      }
      impulse.setFrom$1(t2).sub$1(oldImpulse);
      t2 = this.bodyA;
      t3 = t2.get$linearVelocity().storage;
      t4 = t3[0];
      t5 = t1[0];
      t6 = t2.get$invMass();
      t3[0] = t4 - t5 * t6;
      t3[1] = t3[1] - t1[1] * t6;
      t2.set$angularVelocity(t2.get$angularVelocity() - t2.invInertia * r1.cross$1(impulse));
      t2 = this.bodyB;
      t6 = t2.get$linearVelocity().storage;
      t3 = t6[0];
      t5 = t1[0];
      t4 = t2.get$invMass();
      t6[0] = t3 + t5 * t4;
      t6[1] = t6[1] + t1[1] * t4;
      t2.set$angularVelocity(t2.get$angularVelocity() + t2.invInertia * r2.cross$1(impulse));
    },
    solvePositionConstraints$1: function(baumgarte) {
      return true;
    }
  },
  Joint: {
    "": "Object;type,_prev<,_next,edgeA,edgeB,bodyA@,bodyB@,islandFlag,collideConnected<,userData,localCenterA,localCenterB,invMassA,invIA,invMassB,invIB",
    getAnchorA$1: function(argOut) {
    },
    getAnchorB$1: function(argOut) {
    },
    get$active: function() {
      return this.bodyA.get$active() && this.bodyB.get$active();
    },
    destructor$0: function() {
      return;
    },
    static: {Joint_Joint$create: function(argWorld, def) {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11;
        t1 = def.type;
        switch (t1) {
          case 5:
            throw H.wrapException(P.UnimplementedError$(null));
          case 3:
            t2 = def.bodyA;
            t3 = def.bodyB;
            t4 = def.collideConnected;
            t5 = def.userData;
            t6 = new Float32Array(2);
            t7 = new Float32Array(2);
            t8 = def.get$localAnchorA();
            t9 = new T.Vector2(new Float32Array(2));
            t9.setFrom$1(t8);
            t8 = def.get$localAnchorB();
            t10 = new T.Vector2(new Float32Array(2));
            t10.setFrom$1(t8);
            t8 = def.get$length(def);
            return new V.DistanceJoint(t9, t10, new T.Vector2(new Float32Array(2)), 0, null, t8, def.frequencyHz, def.dampingRatio, 0, 0, t1, null, null, new V.JointEdge(null, null, null, null), new V.JointEdge(null, null, null, null), t2, t3, false, t4, t5, new T.Vector2(t6), new T.Vector2(t7), null, null, null, null);
          case 2:
            throw H.wrapException(P.UnimplementedError$(null));
          case 1:
            t2 = def.bodyA;
            t3 = def.bodyB;
            t4 = def.collideConnected;
            t5 = def.userData;
            t6 = new Float32Array(2);
            t7 = new Float32Array(2);
            t8 = new Float32Array(2);
            t9 = new Float32Array(2);
            t10 = new Float32Array(3);
            t1 = new V.RevoluteJoint(new T.Vector2(t8), new T.Vector2(t9), new T.Vector3(t10), 0, new T.Matrix3(new Float32Array(9)), null, null, null, null, null, null, null, null, null, t1, null, null, new V.JointEdge(null, null, null, null), new V.JointEdge(null, null, null, null), t2, t3, false, t4, t5, new T.Vector2(t6), new T.Vector2(t7), null, null, null, null);
            t1.RevoluteJoint$1(def);
            return t1;
          case 8:
            throw H.wrapException(P.UnimplementedError$(null));
          case 9:
            t1 = def.get$localAnchorA();
            t2 = new T.Vector2(new Float32Array(2));
            t2.setFrom$1(t1);
            t1 = def.get$localAnchorB();
            t3 = new T.Vector2(new Float32Array(2));
            t3.setFrom$1(t1);
            t1 = new Float32Array(2);
            t4 = def.get$maxForce();
            t5 = def.get$maxTorque();
            t6 = def.type;
            t7 = def.bodyA;
            t8 = def.bodyB;
            t9 = def.collideConnected;
            t10 = def.userData;
            t11 = new Float32Array(2);
            return new V.FrictionJoint(t2, t3, new T.Vector2(t1), 0, t4, t5, t6, null, null, new V.JointEdge(null, null, null, null), new V.JointEdge(null, null, null, null), t7, t8, false, t9, t10, new T.Vector2(t11), new T.Vector2(new Float32Array(2)), null, null, null, null);
          case 7:
            throw H.wrapException(P.UnimplementedError$(null));
          case 6:
            throw H.wrapException(P.UnimplementedError$(null));
          case 4:
            throw H.wrapException(P.UnimplementedError$(null));
          case 10:
            return V.ConstantVolumeJoint$(argWorld, def);
          default:
        }
        return;
      }}
  },
  JointDef: {
    "": "Object;bodyA@,bodyB@,collideConnected<"
  },
  JointEdge: {
    "": "Object;other,joint<,prev?,next@"
  },
  RevoluteJoint: {
    "": "Joint;localAnchor1,localAnchor2,impulse,_motorImpulse,mass<,motorMass,_enableMotor,_maxMotorTorque,_motorSpeed,_enableLimit,referenceAngle,lowerAngle,upperAngle,limitState,type,_prev,_next,edgeA,edgeB,bodyA,bodyB,islandFlag,collideConnected,userData,localCenterA,localCenterB,invMassA,invIA,invMassB,invIB",
    initVelocityConstraints$1: function(step) {
      var b1, b2, t1, r1, t2, r2, m1, m2, i1, i2, t3, t4, t5, t6, t7, t8, t9, t10, jointAngle, temp, $P;
      b1 = this.bodyA;
      b2 = this.bodyB;
      if (this._enableMotor || this._enableLimit)
        ;
      t1 = new Float32Array(2);
      r1 = new T.Vector2(t1);
      t2 = new Float32Array(2);
      r2 = new T.Vector2(t2);
      r1.setFrom$1(this.localAnchor1).sub$1(b1.get$localCenter());
      r2.setFrom$1(this.localAnchor2).sub$1(b2.get$localCenter());
      b1.get$originTransform().rotation.transformed$2(r1, r1);
      b2.get$originTransform().rotation.transformed$2(r2, r2);
      m1 = b1.invMass;
      m2 = b2.invMass;
      i1 = b1.invInertia;
      i2 = b2.invInertia;
      t3 = m1 + m2;
      t4 = t1[1];
      t5 = t2[1];
      t6 = -t4;
      t1 = t1[0];
      t2 = t2[0];
      t7 = t6 * t1 * i1 - t5 * t2 * i2;
      t6 = t6 * i1 - t5 * i2;
      t8 = t1 * i1 + t2 * i2;
      t9 = i1 + i2;
      t10 = this.mass.storage;
      t10[8] = t9;
      t10[7] = t8;
      t10[6] = t6;
      t10[5] = t8;
      t10[4] = t3 + t1 * t1 * i1 + t2 * t2 * i2;
      t10[3] = t7;
      t10[2] = t6;
      t10[1] = t7;
      t10[0] = t3 + t4 * t4 * i1 + t5 * t5 * i2;
      this.motorMass = t9;
      if (t9 > 0)
        this.motorMass = 1 / t9;
      if (!this._enableMotor)
        this._motorImpulse = 0;
      if (this._enableLimit) {
        jointAngle = b2.sweep.angle - b1.sweep.angle - this.referenceAngle;
        if (Math.abs(this.upperAngle - this.lowerAngle) < 0.06981317007977318)
          this.limitState = 3;
        else if (jointAngle <= this.lowerAngle) {
          if (this.limitState !== 1)
            this.impulse.storage[2] = 0;
          this.limitState = 1;
        } else if (jointAngle >= this.upperAngle) {
          if (this.limitState !== 2)
            this.impulse.storage[2] = 0;
          this.limitState = 2;
        } else {
          this.limitState = 0;
          this.impulse.storage[2] = 0;
        }
      } else
        this.limitState = 0;
      t1 = this.impulse;
      if (step.warmStarting) {
        t2 = step.dtRatio;
        t1 = t1.storage;
        t1[2] = t1[2] * t2;
        t1[1] = t1[1] * t2;
        t1[0] = t1[0] * t2;
        this._motorImpulse = this._motorImpulse * t2;
        temp = new T.Vector2(new Float32Array(2));
        t2 = new Float32Array(2);
        $P = new T.Vector2(t2);
        t3 = t1[0];
        t4 = t1[1];
        t2[0] = t3;
        t2[1] = t4;
        temp.setFrom$1($P).scale$1(0, m1);
        b1._linearVelocity.sub$1(temp);
        b1.set$angularVelocity(b1._angularVelocity - i1 * (r1.cross$1($P) + this._motorImpulse + t1[2]));
        temp.setFrom$1($P).scale$1(0, m2);
        b2._linearVelocity.add$1(0, temp);
        b2.set$angularVelocity(b2._angularVelocity + i2 * (r2.cross$1($P) + this._motorImpulse + t1[2]));
      } else {
        t1 = t1.storage;
        t1[2] = 0;
        t1[1] = 0;
        t1[0] = 0;
        this._motorImpulse = 0;
      }
    },
    solveVelocityConstraints$1: function(step) {
      var b1, b2, v1, w1, v2, w2, m1, m2, i1, i2, t1, t2, oldImpulse, maxImpulse, imp, temp, r1, r2, t3, t4, t5, t6, t7, t8, Cdot1, Cdot, det, $P;
      b1 = this.bodyA;
      b2 = this.bodyB;
      v1 = b1.get$linearVelocity();
      w1 = b1.get$angularVelocity();
      v2 = b2.get$linearVelocity();
      w2 = b2.get$angularVelocity();
      m1 = b1.get$invMass();
      m2 = b2.get$invMass();
      i1 = b1.invInertia;
      i2 = b2.invInertia;
      if (this._enableMotor && this.limitState !== 3) {
        t1 = this._motorSpeed;
        t2 = this.motorMass;
        if (typeof t2 !== "number")
          return t2.$mul();
        oldImpulse = this._motorImpulse;
        maxImpulse = step.dt * this._maxMotorTorque;
        t1 = P.max(-maxImpulse, P.min(oldImpulse + t2 * -(w2 - w1 - t1), maxImpulse));
        this._motorImpulse = t1;
        imp = t1 - oldImpulse;
        w1 -= i1 * imp;
        w2 += i2 * imp;
      }
      t1 = new Float32Array(2);
      temp = new T.Vector2(t1);
      r1 = new T.Vector2(new Float32Array(2));
      r2 = new T.Vector2(new Float32Array(2));
      t2 = this._enableLimit && this.limitState !== 0;
      t3 = b1.sweep;
      t4 = b2.sweep;
      t5 = this.localAnchor1;
      t6 = this.localAnchor2;
      t7 = b1.originTransform;
      t8 = b2.originTransform;
      if (t2) {
        r1.setFrom$1(t5).sub$1(t3.localCenter);
        r2.setFrom$1(t6).sub$1(t4.localCenter);
        t7.rotation.transformed$2(r1, r1);
        t8.rotation.transformed$2(r2, r2);
        t2 = new Float32Array(2);
        Cdot1 = new T.Vector2(t2);
        t3 = new Float32Array(3);
        Cdot = new T.Vector3(t3);
        V.Vector2_crossVectorAndNumToOut(r1, -w1, temp);
        V.Vector2_crossVectorAndNumToOut(r2, -w2, Cdot1);
        Cdot1.add$1(0, v2).sub$1(v1).sub$1(temp);
        Cdot.setValues$3(t2[0], t2[1], w2 - w1);
        t2 = new Float32Array(3);
        imp = new T.Vector3(t2);
        t4 = this.mass;
        t3[2] = -t3[2];
        t3[1] = -t3[1];
        t3[0] = -t3[0];
        t4.getColumn$1(1).crossInto$2(t4.getColumn$1(2), imp);
        det = t4.getColumn$1(0).dot$1(imp);
        if (det !== 0)
          det = 1 / det;
        t4.getColumn$1(1).crossInto$2(t4.getColumn$1(2), imp);
        t3 = Cdot.dot$1(imp);
        Cdot.crossInto$2(t4.getColumn$1(2), imp);
        t5 = t4.getColumn$1(0).dot$1(imp);
        t4.getColumn$1(1).crossInto$2(Cdot, imp);
        t6 = t4.getColumn$1(0).dot$1(imp);
        t2[0] = det * t3;
        t2[1] = det * t5;
        t2[2] = det * t6;
        t3 = this.limitState;
        if (t3 === 3) {
          t1 = this.impulse.storage;
          t1[0] = t1[0] + t2[0];
          t1[1] = t1[1] + t2[1];
          t1[2] = t1[2] + t2[2];
        } else if (t3 === 1) {
          t3 = this.impulse.storage;
          if (t3[2] + t2[2] < 0) {
            V.Matrix3_solve22ToOut(t4, Cdot1.negate$0(), temp);
            t2[0] = t1[0];
            t2[1] = t1[1];
            t2[2] = -t3[2];
            t3[0] = t3[0] + t1[0];
            t3[1] = t3[1] + t1[1];
            t3[2] = 0;
          }
        } else if (t3 === 2) {
          t3 = this.impulse.storage;
          if (t3[2] + t2[2] > 0) {
            V.Matrix3_solve22ToOut(t4, Cdot1.negate$0(), temp);
            t2[0] = t1[0];
            t2[1] = t1[1];
            t2[2] = -t3[2];
            t3[0] = t3[0] + t1[0];
            t3[1] = t3[1] + t1[1];
            t3[2] = 0;
          }
        }
        t1 = new Float32Array(2);
        $P = new T.Vector2(t1);
        t3 = t2[0];
        t4 = t2[1];
        t1[0] = t3;
        t1[1] = t4;
        temp.setFrom$1($P).scale$1(0, m1);
        v1.sub$1(temp);
        w1 -= i1 * (r1.cross$1($P) + t2[2]);
        temp.setFrom$1($P).scale$1(0, m2);
        v2.add$1(0, temp);
        w2 += i2 * (r2.cross$1($P) + t2[2]);
      } else {
        r1.setFrom$1(t5).sub$1(t3.localCenter);
        r2.setFrom$1(t6).sub$1(t4.localCenter);
        t7.rotation.transformed$2(r1, r1);
        t8.rotation.transformed$2(r2, r2);
        Cdot = new T.Vector2(new Float32Array(2));
        t1 = new Float32Array(2);
        imp = new T.Vector2(t1);
        V.Vector2_crossVectorAndNumToOut(r1, -w1, temp);
        V.Vector2_crossVectorAndNumToOut(r2, -w2, Cdot);
        Cdot.add$1(0, v2).sub$1(v1).sub$1(temp);
        V.Matrix3_solve22ToOut(this.mass, Cdot.negate$0(), imp);
        t2 = this.impulse.storage;
        t2[0] = t2[0] + t1[0];
        t2[1] = t2[1] + t1[1];
        temp.setFrom$1(imp).scale$1(0, m1);
        v1.sub$1(temp);
        w1 -= i1 * r1.cross$1(imp);
        temp.setFrom$1(imp).scale$1(0, m2);
        v2.add$1(0, temp);
        w2 += i2 * r2.cross$1(imp);
      }
      b1.set$angularVelocity(w1);
      b2.set$angularVelocity(w2);
    },
    solvePositionConstraints$1: function(baumgarte) {
      var b1, b2, angle, t1, $C, limitImpulse, angularError, C0, imp, t2, r1, t3, r2, t4, t5, t6, t7, positionError, invMass1, invMass2, invI1, invI2, u, m, t8, t9, K1, t10, K2, K3, a11, a12, a21, a22, det;
      b1 = this.bodyA;
      b2 = this.bodyB;
      if (this._enableLimit && this.limitState !== 0) {
        angle = b2.get$sweep().angle - b1.get$sweep().angle - this.referenceAngle;
        t1 = this.limitState;
        if (t1 === 3) {
          $C = P.max(-0.13962634015954636, P.min(angle - this.lowerAngle, 0.13962634015954636));
          t1 = this.motorMass;
          if (typeof t1 !== "number")
            return t1.$negate();
          limitImpulse = -t1 * $C;
          angularError = Math.abs($C);
        } else if (t1 === 1) {
          $C = angle - this.lowerAngle;
          angularError = -$C;
          $C = P.max(-0.13962634015954636, P.min($C + 0.03490658503988659, 0));
          t1 = this.motorMass;
          if (typeof t1 !== "number")
            return t1.$negate();
          limitImpulse = -t1 * $C;
        } else if (t1 === 2) {
          $C = angle - this.upperAngle;
          C0 = P.max(0, P.min($C - 0.03490658503988659, 0.13962634015954636));
          t1 = this.motorMass;
          if (typeof t1 !== "number")
            return t1.$negate();
          limitImpulse = -t1 * C0;
          angularError = $C;
        } else {
          angularError = 0;
          limitImpulse = 0;
        }
        t1 = b1.sweep;
        t1.angle = t1.angle - b1.invInertia * limitImpulse;
        t1 = b2.sweep;
        t1.angle = t1.angle + b2.invInertia * limitImpulse;
        b1.synchronizeTransform$0();
        b2.synchronizeTransform$0();
      } else
        angularError = 0;
      t1 = new Float32Array(2);
      imp = new T.Vector2(t1);
      t2 = new Float32Array(2);
      r1 = new T.Vector2(t2);
      t3 = new Float32Array(2);
      r2 = new T.Vector2(t3);
      $C = new T.Vector2(new Float32Array(2));
      r1.setFrom$1(this.localAnchor1).sub$1(b1.get$localCenter());
      r2.setFrom$1(this.localAnchor2).sub$1(b2.get$localCenter());
      b1.get$originTransform().rotation.transformed$2(r1, r1);
      b2.get$originTransform().rotation.transformed$2(r2, r2);
      t4 = b2.sweep;
      t5 = t4.center;
      $C.setFrom$1(t5).add$1(0, r2);
      t6 = b1.sweep;
      t7 = t6.center;
      $C.sub$1(t7).sub$1(r1);
      positionError = $C.get$length($C);
      invMass1 = b1.invMass;
      invMass2 = b2.invMass;
      invI1 = b1.invInertia;
      invI2 = b2.invInertia;
      if ($C.get$length2() > 0.0025000000000000005) {
        u = new T.Vector2(new Float32Array(2));
        m = invMass1 + invMass2;
        if (m > 0)
          m = 1 / m;
        imp.setFrom$1($C).negate$0().scale$1(0, m);
        u.setFrom$1(imp).scale$1(0, 0.5 * invMass1);
        t7.sub$1(u);
        u.setFrom$1(imp).scale$1(0, 0.5 * invMass2);
        t5.add$1(0, u);
        $C.setFrom$1(t5).add$1(0, r2);
        $C.sub$1(t7).sub$1(r1);
      }
      t8 = invMass1 + invMass2;
      t9 = new Float32Array(4);
      K1 = new T.Matrix2(t9);
      K1.setValues$4(t8, 0, 0, t8);
      t8 = t2[1];
      t2 = t2[0];
      t10 = -invI1 * t2 * t8;
      K2 = new T.Matrix2(new Float32Array(4));
      K2.setValues$4(invI1 * t8 * t8, t10, t10, invI1 * t2 * t2);
      t2 = t3[1];
      t3 = t3[0];
      t8 = -invI2 * t3 * t2;
      K3 = new T.Matrix2(new Float32Array(4));
      K3.setValues$4(invI2 * t2 * t2, t8, t8, invI2 * t3 * t3);
      K1.add$1(0, K2).add$1(0, K3);
      t2 = $C.negate$0();
      a11 = t9[0];
      a12 = t9[2];
      a21 = t9[1];
      a22 = t9[3];
      det = a11 * a22 - a12 * a21;
      if (det !== 0)
        det = 1 / det;
      t2 = t2.storage;
      t3 = t2[1];
      t2 = t2[0];
      t1[0] = det * (a22 * t2 - a12 * t3);
      t1[1] = det * (a11 * t3 - a21 * t2);
      $C.setFrom$1(imp).scale$1(0, b1.invMass);
      t7.sub$1($C);
      t6.angle = t6.angle - b1.invInertia * r1.cross$1(imp);
      $C.setFrom$1(imp).scale$1(0, b2.invMass);
      t5.add$1(0, $C);
      t4.angle = t4.angle + b2.invInertia * r2.cross$1(imp);
      b1.synchronizeTransform$0();
      b2.synchronizeTransform$0();
      return positionError <= 0.005 && angularError <= 0.03490658503988659;
    },
    getAnchorA$1: function(argOut) {
      this.bodyA.getWorldPointToOut$2(this.localAnchor1, argOut);
    },
    getAnchorB$1: function(argOut) {
      this.bodyB.getWorldPointToOut$2(this.localAnchor2, argOut);
    },
    RevoluteJoint$1: function(def) {
      this.localAnchor1.setFrom$1(def.get$localAnchorA());
      this.localAnchor2.setFrom$1(def.get$localAnchorB());
      this.referenceAngle = def.get$referenceAngle();
      this._motorImpulse = 0;
      this.lowerAngle = def.lowerAngle;
      this.upperAngle = def.upperAngle;
      this._maxMotorTorque = def.maxMotorTorque;
      this._motorSpeed = def.motorSpeed;
      this._enableLimit = def.enableLimit;
      this._enableMotor = def.enableMotor;
    }
  },
  RevoluteJointDef: {
    "": "JointDef;localAnchorA<,localAnchorB<,referenceAngle<,enableLimit,lowerAngle,upperAngle,enableMotor,motorSpeed,maxMotorTorque,type,userData,bodyA,bodyB,collideConnected",
    RevoluteJointDef$0: function() {
      this.type = 1;
    }
  },
  TimeStep: {
    "": "Object;dt,inv_dt,dtRatio,velocityIterations,positionIterations,warmStarting"
  },
  World: {
    "": "Object;_flags,_contactManager,_bodyList,_jointList,_bodyCount,_jointCount,_gravity,_allowSleep,_debugDraw,_fixtureDestructionListener,_jointDestructionListener,_pool,_inverseTimestep,_warmStarting,_continuousPhysics,_contactStacks,center,axis,timestep,cA,cB,wqwrapper,toiInput,toiOutput,backup,toiSolver,contacts,island,stack",
    _addType$3: function(creatorStack, type1, type2) {
      var register, t1, t2, register2;
      register = new V.ContactRegister(null, false);
      register.creator = creatorStack;
      register.primary = true;
      t1 = this._contactStacks;
      if (type1 >= 2)
        return H.ioore(t1, type1);
      t2 = t1[type1];
      t2.length;
      if (type2 >= 2)
        return H.ioore(t2, type2);
      t2[type2] = register;
      if (type1 !== type2) {
        register2 = new V.ContactRegister(null, false);
        register2.creator = creatorStack;
        register2.primary = false;
        t1[type2][type1] = register2;
      }
    },
    popContact$2: function(fixtureA, fixtureB) {
      var type1, type2, t1, reg, creator, c;
      type1 = fixtureA.get$type(fixtureA);
      type2 = fixtureB.get$type(fixtureB);
      t1 = this._contactStacks;
      if (type1 >= 2)
        return H.ioore(t1, type1);
      t1 = t1[type1];
      t1.length;
      if (type2 >= 2)
        return H.ioore(t1, type2);
      reg = t1[type2];
      creator = reg.creator;
      if (creator != null) {
        if (creator._head === creator._tail)
          creator = this._getFreshContactStack$2(type1, type2);
        if (reg.primary) {
          c = creator.removeFirst$0();
          c.init$2(fixtureA, fixtureB);
          return c;
        } else {
          c = creator.removeFirst$0();
          c.init$2(fixtureB, fixtureA);
          return c;
        }
      } else
        return;
    },
    _getFreshContactStack$2: function(type1, type2) {
      var t1, t2;
      if (type1 === 0 && type2 === 0)
        return this._pool.getCircleContactStack$0();
      else {
        t1 = type1 === 1 && type2 === 1;
        t2 = this._pool;
        if (t1)
          return t2.getPolyContactStack$0();
        else
          return t2.getPolyCircleContactStack$0();
      }
    },
    createBody$1: function(def) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, b;
      if ((this._flags & 2) === 2)
        return;
      t1 = V.Transform$();
      t2 = V.Sweep$();
      t3 = def.linearVelocity;
      t4 = new T.Vector2(new Float32Array(2));
      t4.setFrom$1(t3);
      t3 = new Float32Array(2);
      t5 = def.userData;
      t6 = V.FixtureDef$();
      t7 = new Float32Array(2);
      t8 = V.Transform$();
      t9 = new Float32Array(2);
      t10 = new Float32Array(2);
      b = new V.Body(this, 0, null, 0, t5, t4, 0, null, null, null, null, null, 0, null, new T.Vector2(t3), 0, 0, 0, def.linearDamping, def.angularDamping, def.type, null, t1, t2, t6, new V.MassData(0, new T.Vector2(t7), 0), t8, new T.Vector2(t9), new T.Vector2(t10));
      b.Body$2(def, this);
      b.prev = null;
      t10 = this._bodyList;
      b.next = t10;
      if (t10 != null)
        t10.prev = b;
      this._bodyList = b;
      this._bodyCount = this._bodyCount + 1;
      return b;
    },
    createJoint$1: function(def) {
      var j, t1, t2, bodyA, bodyB, edge;
      if ((this._flags & 2) === 2)
        return;
      j = V.Joint_Joint$create(this, def);
      j._prev = null;
      t1 = this._jointList;
      j._next = t1;
      if (t1 != null)
        t1._prev = j;
      this._jointList = j;
      this._jointCount = this._jointCount + 1;
      t1 = j.edgeA;
      t1.joint = j;
      t1.other = j.bodyB;
      t1.prev = null;
      t2 = j.bodyA;
      t1.next = t2.get$jointList();
      t2 = t2.get$jointList();
      if (t2 != null)
        t2.set$prev(t1);
      j.bodyA.set$jointList(t1);
      t1 = j.edgeB;
      t1.joint = j;
      t1.other = j.bodyA;
      t1.prev = null;
      t2 = j.bodyB;
      t1.next = t2.get$jointList();
      t2 = t2.get$jointList();
      if (t2 != null)
        t2.set$prev(t1);
      j.bodyB.set$jointList(t1);
      bodyA = def.bodyA;
      bodyB = def.bodyB;
      if (!def.collideConnected) {
        edge = bodyB.get$contactList();
        for (; edge != null;) {
          t1 = edge.get$other();
          if (t1 == null ? bodyA == null : t1 === bodyA) {
            t1 = edge.contact;
            t2 = t1.flags;
            if (typeof t2 !== "number")
              return t2.$or();
            t1.flags = t2 | 8;
          }
          edge = edge.next;
        }
      }
      return j;
    },
    destroyJoint$1: function(joint) {
      var collideConnected, t1, t2, bodyA, bodyB, t3, edge;
      if ((this._flags & 2) === 2)
        return;
      collideConnected = joint.get$collideConnected();
      if (joint.get$_prev() != null)
        joint._prev._next = joint._next;
      t1 = joint._next;
      if (t1 != null)
        t1._prev = joint._prev;
      t2 = this._jointList;
      if (joint == null ? t2 == null : joint === t2)
        this._jointList = t1;
      bodyA = joint.bodyA;
      bodyB = joint.bodyB;
      bodyA.set$awake(true);
      bodyB.set$awake(true);
      t1 = joint.edgeA;
      t2 = t1.prev;
      if (t2 != null)
        t2.next = t1.next;
      t3 = t1.next;
      if (t3 != null)
        t3.set$prev(t2);
      if (t1 === bodyA.get$jointList())
        bodyA.jointList = t1.next;
      t1.prev = null;
      t1.next = null;
      t1 = joint.edgeB;
      t2 = t1.prev;
      if (t2 != null)
        t2.next = t1.next;
      t3 = t1.next;
      if (t3 != null)
        t3.set$prev(t2);
      if (t1 === bodyB.get$jointList())
        bodyB.jointList = t1.next;
      t1.prev = null;
      t1.next = null;
      joint.destructor$0();
      this._jointCount = this._jointCount - 1;
      if (!collideConnected) {
        edge = bodyB.contactList;
        for (; edge != null;) {
          t1 = edge.other;
          if (t1 == null ? bodyA == null : t1 === bodyA) {
            t1 = edge.contact;
            t2 = t1.flags;
            if (typeof t2 !== "number")
              return t2.$or();
            t1.flags = t2 | 8;
          }
          edge = edge.next;
        }
      }
    },
    destroyBody$1: function(body) {
      var je, je0, ce, ce0, f, f0, t1, t2;
      if ((this._flags & 2) === 2)
        return;
      je = body.jointList;
      for (; je != null; je = je0) {
        je0 = je.get$next();
        this.destroyJoint$1(je.get$joint());
      }
      body.jointList = null;
      ce = body.contactList;
      for (; ce != null; ce = ce0) {
        ce0 = ce.next;
        this._contactManager.destroy$1(ce.contact);
      }
      body.contactList = null;
      f = body.fixtureList;
      for (; f != null; f = f0) {
        f0 = f.next;
        f.destroyProxy$1(this._contactManager.broadPhase);
        f.shape = null;
      }
      body.fixtureList = null;
      body.fixtureCount = 0;
      t1 = body.prev;
      if (t1 != null)
        t1.set$next(body.next);
      t1 = body.next;
      if (t1 != null)
        t1.prev = body.prev;
      t2 = this._bodyList;
      if (body == null ? t2 == null : body === t2)
        this._bodyList = t1;
      this._bodyCount = this._bodyCount - 1;
    },
    clearForces$0: function() {
      var body, t1;
      for (body = this._bodyList; body != null; body = body.next) {
        t1 = body._force.storage;
        t1[0] = 0;
        t1[1] = 0;
        body._torque = 0;
      }
    },
    drawDebugData$0: function() {
      var t1, drawFlags, xf, color, b, t2, t3, t4, f, j, bodyA, bodyB, xf1, xf2, x1, x2, p1, p2, c, fixtureA, fixtureB, t5, aabb, vs, i, t6;
      t1 = this._debugDraw;
      if (t1 == null)
        return;
      drawFlags = t1.flags;
      if ((drawFlags & 1) === 1) {
        xf = V.Transform$();
        color = new V.Color3(0, 0, 0);
        for (b = this._bodyList, t1 = xf.position.storage, t2 = xf.rotation; b != null; b = b.next) {
          t3 = b.originTransform;
          t4 = t3.position.storage;
          t1[1] = t4[1];
          t1[0] = t4[0];
          t2.setFrom$1(t3.rotation);
          for (f = b.fixtureList; f != null; f = f.next) {
            t3 = b.flags;
            if (typeof t3 !== "number")
              return t3.$and();
            if ((t3 & 32) !== 32) {
              color.setFromRGBF$3(0.5, 0.5, 0.3);
              this.drawShape$3(f, xf, color);
            } else {
              t4 = b._type;
              if (t4 === 0) {
                color.setFromRGBF$3(0.5, 0.9, 0.3);
                this.drawShape$3(f, xf, color);
              } else if (t4 === 1) {
                color.setFromRGBF$3(0.5, 0.5, 0.9);
                this.drawShape$3(f, xf, color);
              } else if ((t3 & 2) !== 2) {
                color.setFromRGBF$3(0.9, 0.9, 0.9);
                this.drawShape$3(f, xf, color);
              } else {
                color.setFromRGBF$3(0.9, 0.7, 0.7);
                this.drawShape$3(f, xf, color);
              }
            }
          }
        }
      }
      if ((drawFlags & 2) === 2)
        for (j = this._jointList; j != null; j = j._next) {
          bodyA = j.bodyA;
          bodyB = j.bodyB;
          xf1 = bodyA.get$originTransform();
          xf2 = bodyB.get$originTransform();
          t1 = new Float32Array(2);
          x1 = new T.Vector2(t1);
          t2 = xf1.position.storage;
          t1[1] = t2[1];
          t1[0] = t2[0];
          t1 = new Float32Array(2);
          x2 = new T.Vector2(t1);
          t2 = xf2.position.storage;
          t1[1] = t2[1];
          t1[0] = t2[0];
          t1 = new Float32Array(2);
          p1 = new T.Vector2(t1);
          t2 = new Float32Array(2);
          p2 = new T.Vector2(t2);
          j.getAnchorA$1(p1);
          j.getAnchorB$1(p2);
          color = new V.Color3(C.JSInt_methods.toInt$0(C.JSNumber_methods.toInt$0(Math.floor(127.5))), C.JSInt_methods.toInt$0(C.JSNumber_methods.toInt$0(Math.floor(76.5))), C.JSInt_methods.toInt$0(C.JSNumber_methods.toInt$0(Math.floor(76.5))));
          switch (j.type) {
            case 3:
              this._debugDraw.drawSegment$3(p1, p2, color);
              break;
            case 4:
              H.throwExpression(P.UnimplementedError$(null));
              throw H.wrapException(null);
            case 9:
              this._debugDraw.drawSegment$3(x1, x2, color);
              break;
            case 10:
            case 5:
              break;
            default:
              t3 = new Float32Array(2);
              t3[1] = t1[1];
              t3[0] = t1[0];
              t1 = new Float32Array(2);
              t1[1] = t2[1];
              t1[0] = t2[0];
              this._debugDraw.drawSegment$3(x1, p1, color);
              this._debugDraw.drawSegment$3(new T.Vector2(t3), p2, color);
              this._debugDraw.drawSegment$3(x2, new T.Vector2(t1), color);
              break;
          }
        }
      if ((drawFlags & 8) === 8) {
        color = V.Color3$fromRGBF(0.3, 0.9, 0.9);
        for (c = this._contactManager.contactList, t1 = this.cA, t2 = this.cB; c != null; c = c.next) {
          fixtureA = c.fixtureA;
          fixtureB = c.fixtureB;
          t3 = fixtureA.get$box();
          t4 = t3.lowerBound;
          t5 = new Float32Array(2);
          t4 = t4.storage;
          t5[1] = t4[1];
          t5[0] = t4[0];
          new T.Vector2(t5).add$1(0, t3.upperBound);
          t5[1] = t5[1] * 0.5;
          t5[0] = t5[0] * 0.5;
          t3 = t1.storage;
          t3[1] = t5[1];
          t3[0] = t5[0];
          t5 = fixtureB.get$box();
          t3 = t5.lowerBound;
          t4 = new Float32Array(2);
          t3 = t3.storage;
          t4[1] = t3[1];
          t4[0] = t3[0];
          new T.Vector2(t4).add$1(0, t5.upperBound);
          t4[1] = t4[1] * 0.5;
          t4[0] = t4[0] * 0.5;
          t5 = t2.storage;
          t5[1] = t4[1];
          t5[0] = t4[0];
          this._debugDraw.drawSegment$3(t1, t2, color);
        }
      }
      if ((drawFlags & 4) === 4) {
        color = V.Color3$fromRGBF(0.9, 0.3, 0.9);
        for (b = this._bodyList, t1 = 0 !== (drawFlags & 64); b != null; b = b.next) {
          t2 = b.flags;
          if (typeof t2 !== "number")
            return t2.$and();
          if ((t2 & 32) !== 32)
            continue;
          for (f = b.fixtureList; f != null; f = f.next) {
            aabb = f.proxy.box;
            vs = Array(4);
            vs.$builtinTypeInfo = [T.Vector2];
            for (i = 0; i < 4; ++i)
              vs[i] = new T.Vector2(new Float32Array(2));
            t2 = vs[0];
            t3 = aabb.lowerBound.storage;
            t4 = t3[0];
            t5 = t3[1];
            t2 = t2.storage;
            t2[0] = t4;
            t2[1] = t5;
            t5 = vs[1];
            t2 = aabb.upperBound.storage;
            t4 = t2[0];
            t6 = t3[1];
            t5 = t5.storage;
            t5[0] = t4;
            t5[1] = t6;
            t6 = vs[2];
            t5 = t2[0];
            t4 = t2[1];
            t6 = t6.storage;
            t6[0] = t5;
            t6[1] = t4;
            t4 = vs[3];
            t3 = t3[0];
            t2 = t2[1];
            t4 = t4.storage;
            t4[0] = t3;
            t4[1] = t2;
            t2 = this._debugDraw;
            if (t1) {
              t2._pathPolygon$3(vs, 4, color);
              J.stroke$0$x(t2.ctx);
            } else {
              t2._pathPolygon$3(vs, 4, color);
              J.fill$0$x(t2.ctx);
            }
          }
        }
      }
      if ((drawFlags & 16) === 16) {
        xf = V.Transform$();
        color = new V.Color3(1, 0, 0);
        for (b = this._bodyList, t1 = xf.position, t2 = t1.storage, t3 = xf.rotation; b != null; b = b.next) {
          t4 = b.originTransform;
          t5 = t4.position.storage;
          t2[1] = t5[1];
          t2[0] = t5[0];
          t3.setFrom$1(t4.rotation);
          t4 = b.sweep.center.storage;
          t2[1] = t4[1];
          t2[0] = t4[0];
          t4 = this._debugDraw;
          t5 = t4.viewportTransform;
          t6 = t5.scale;
          J.setStrokeColorRgb$4$x(t4.ctx, color.x, color.y, color.z, 0.9);
          J.setFillColorRgb$4$x(t4.ctx, color.x, color.y, color.z, 0.8);
          t5.getWorldToScreen$2(t1, t1);
          J.beginPath$0$x(t4.ctx);
          J.arc$6$x(t4.ctx, t2[0], t2[1], 0.1 * t6, 0, 6.283185307179586, true);
          J.closePath$0$x(t4.ctx);
          J.stroke$0$x(t4.ctx);
        }
      }
    },
    get$contactList: function() {
      return this._contactManager.contactList;
    },
    get$jointList: function() {
      return this._jointList;
    },
    solve$1: function(timeStep) {
      var t1, t2, t3, b, c, j, stackSize, seed, t4, t5, stackCount, ce, contact, sensorA, sensorB, t6, other, stackCount0, je, i;
      t1 = this.island;
      t2 = this._bodyCount;
      t3 = this._contactManager;
      t1.init$4(t2, t3.contactCount, this._jointCount, t3.contactListener);
      for (b = this._bodyList; b != null; b = b.next) {
        t2 = b.flags;
        if (typeof t2 !== "number")
          return t2.$and();
        b.flags = t2 & 4294967294;
      }
      for (c = this._contactManager.contactList; c != null; c = c.next) {
        t2 = c.flags;
        if (typeof t2 !== "number")
          return t2.$and();
        c.flags = t2 & 4294967294;
      }
      for (j = this._jointList; j != null; j = j._next)
        j.islandFlag = false;
      stackSize = this._bodyCount;
      if (this.stack.length < stackSize)
        this.stack = H.setRuntimeTypeInfo(Array(stackSize), [V.Body]);
      for (seed = this._bodyList, t2 = this._gravity, t3 = this._allowSleep; seed != null; seed = seed.next) {
        t4 = seed.flags;
        if (typeof t4 !== "number")
          return t4.$and();
        if ((t4 & 1) === 1)
          continue;
        if ((t4 & 2) !== 2 || (t4 & 32) !== 32)
          continue;
        if (seed._type === 0)
          continue;
        t1.bodyCount = 0;
        t1.contactCount = 0;
        t1.jointCount = 0;
        t5 = this.stack;
        if (0 >= t5.length)
          return H.ioore(t5, 0);
        t5[0] = seed;
        seed.flags = t4 | 1;
        for (stackCount = 1; stackCount > 0;) {
          t4 = this.stack;
          --stackCount;
          if (stackCount >= t4.length)
            return H.ioore(t4, stackCount);
          b = t4[stackCount];
          t4 = t1.bodyCount;
          b.islandIndex = t4;
          t5 = t1.bodies;
          if (typeof t4 !== "number")
            return t4.$add();
          t1.bodyCount = t4 + 1;
          if (t4 >= t5.length)
            return H.ioore(t5, t4);
          t5[t4] = b;
          b.set$awake(true);
          if (b._type === 0)
            continue;
          for (ce = b.contactList; ce != null; ce = ce.next) {
            contact = ce.contact;
            t4 = contact.flags;
            if (typeof t4 !== "number")
              return t4.$and();
            if ((t4 & 1) === 1)
              continue;
            if ((t4 & 4) !== 4 || (t4 & 2) !== 2)
              continue;
            sensorA = contact.fixtureA.get$isSensor();
            sensorB = contact.fixtureB.get$isSensor();
            if (sensorA === true || sensorB === true)
              continue;
            t5 = t1.contacts;
            t6 = t1.contactCount;
            if (typeof t6 !== "number")
              return t6.$add();
            t1.contactCount = t6 + 1;
            if (t6 >= t5.length)
              return H.ioore(t5, t6);
            t5[t6] = contact;
            contact.flags = t4 | 1;
            other = ce.other;
            t4 = other.get$flags();
            if (typeof t4 !== "number")
              return t4.$and();
            if ((t4 & 1) === 1)
              continue;
            t4 = this.stack;
            stackCount0 = stackCount + 1;
            if (stackCount >= t4.length)
              return H.ioore(t4, stackCount);
            t4[stackCount] = other;
            t4 = other.flags;
            if (typeof t4 !== "number")
              return t4.$or();
            other.flags = t4 | 1;
            stackCount = stackCount0;
          }
          for (je = b.jointList; je != null; je = je.next) {
            if (je.get$joint().islandFlag)
              continue;
            other = je.other;
            if (!other.get$active())
              continue;
            t4 = je.joint;
            t5 = t1.joints;
            t6 = t1.jointCount;
            if (typeof t6 !== "number")
              return t6.$add();
            t1.jointCount = t6 + 1;
            if (t6 >= t5.length)
              return H.ioore(t5, t6);
            t5[t6] = t4;
            t4.islandFlag = true;
            t4 = other.get$flags();
            if (typeof t4 !== "number")
              return t4.$and();
            if ((t4 & 1) === 1)
              continue;
            t4 = this.stack;
            stackCount0 = stackCount + 1;
            if (stackCount >= t4.length)
              return H.ioore(t4, stackCount);
            t4[stackCount] = other;
            t4 = other.flags;
            if (typeof t4 !== "number")
              return t4.$or();
            other.flags = t4 | 1;
            stackCount = stackCount0;
          }
        }
        t1.solve$3(timeStep, t2, t3);
        i = 0;
        while (true) {
          t4 = t1.bodyCount;
          if (typeof t4 !== "number")
            return H.iae(t4);
          if (!(i < t4))
            break;
          t4 = t1.bodies;
          if (i >= t4.length)
            return H.ioore(t4, i);
          b = t4[i];
          if (b._type === 0) {
            t4 = b.flags;
            if (typeof t4 !== "number")
              return t4.$and();
            b.flags = t4 & 4294967294;
          }
          ++i;
        }
      }
      for (b = this._bodyList; b != null; b = b.next) {
        t1 = b.flags;
        if (typeof t1 !== "number")
          return t1.$and();
        if ((t1 & 1) === 0)
          continue;
        if (b._type === 0)
          continue;
        b.synchronizeFixtures$0();
      }
      t1 = this._contactManager;
      t1.broadPhase.updatePairs$1(t1.get$_addPair());
    },
    solveTimeOfImpact$0: function() {
      var c, t1, body, t2;
      for (c = this._contactManager.contactList; c != null; c = c.next) {
        t1 = c.flags;
        if (typeof t1 !== "number")
          return t1.$or();
        c.flags = t1 | 4;
        c.toiCount = 0;
      }
      for (body = this._bodyList; body != null; body = body.next) {
        t1 = body.flags;
        if (typeof t1 !== "number")
          return t1.$and();
        if ((t1 & 1) !== 0) {
          t2 = body._type;
          t2 = t2 === 1 || t2 === 0;
        } else
          t2 = true;
        if (t2)
          body.flags = t1 | 64;
        else
          body.flags = t1 & 4294967231;
      }
      for (body = this._bodyList; body != null; body = body.next) {
        t1 = body.flags;
        if (typeof t1 !== "number")
          return t1.$and();
        if ((t1 & 64) === 64 || (t1 & 8) === 8)
          continue;
        this.solveTimeOfImpactGivenBody$1(body);
        t1 = body.flags;
        if (typeof t1 !== "number")
          return t1.$or();
        body.flags = t1 | 64;
      }
      for (body = this._bodyList; body != null; body = body.next) {
        t1 = body.flags;
        if (typeof t1 !== "number")
          return t1.$and();
        if ((t1 & 64) === 64 || (t1 & 8) !== 8)
          continue;
        this.solveTimeOfImpactGivenBody$1(body);
        t1 = body.flags;
        if (typeof t1 !== "number")
          return t1.$or();
        body.flags = t1 | 64;
      }
    },
    solveTimeOfImpactGivenBody$1: function(body) {
      var t1, bullet, t2, t3, t4, t5, t6, t7, toiContact, toi, toiOther, iter, ce, found, count, toiContact0, other, type, t8, fixtureA, fixtureB, bodyA, bodyB, contact, i;
      t1 = body.flags;
      if (typeof t1 !== "number")
        return t1.$and();
      bullet = (t1 & 8) === 8;
      t1 = this.toiOutput;
      t2 = this.toiInput;
      t3 = t2.proxyA;
      t4 = t2.proxyB;
      t5 = t2.sweepA;
      t6 = t2.sweepB;
      t7 = this._pool;
      toiContact = null;
      toi = 1;
      toiOther = null;
      iter = 0;
      do {
        for (ce = body.contactList, found = false, count = 0; ce != null; ce = ce.next) {
          toiContact0 = ce.contact;
          if (toiContact0 == null ? toiContact == null : toiContact0 === toiContact)
            continue;
          other = ce.other;
          type = other.get$type(other);
          if (bullet) {
            t8 = other.flags;
            if (typeof t8 !== "number")
              return t8.$and();
            if ((t8 & 64) === 0)
              continue;
            if (type !== 0) {
              t8 = toiContact0.flags;
              if (typeof t8 !== "number")
                return t8.$and();
              t8 = (t8 & 16) !== 0;
            } else
              t8 = false;
            if (t8)
              continue;
          } else if (type === 2)
            continue;
          t8 = toiContact0.flags;
          if (typeof t8 !== "number")
            return t8.$and();
          if ((t8 & 4) === 4) {
            t8 = toiContact0.toiCount;
            if (typeof t8 !== "number")
              return t8.$gt();
            t8 = t8 > 10;
          } else
            t8 = true;
          if (t8)
            continue;
          fixtureA = toiContact0.fixtureA;
          fixtureB = toiContact0.fixtureB;
          if (fixtureA.get$isSensor() === true || fixtureB.get$isSensor() === true)
            continue;
          bodyA = fixtureA.body;
          t8 = J.getInterceptor$x(fixtureB);
          bodyB = t8.get$body(fixtureB);
          t3.setFromShape$1(fixtureA.shape);
          t4.setFromShape$1(t8.get$shape(fixtureB));
          t5.setFrom$1(bodyA.sweep);
          t6.setFrom$1(bodyB.get$sweep());
          t2.tMax = toi;
          t7.timeOfImpact.timeOfImpact$2(t1, t2);
          if (t1.state === 3 && t1.t < toi) {
            toi = t1.t;
            toiOther = other;
            toiContact = toiContact0;
            found = true;
          }
          ++count;
        }
        ++iter;
      } while (found && count > 1 && iter < 50);
      if (toiContact == null) {
        t1 = body.sweep;
        t1.advance$1(1);
        t2 = t1.center.storage;
        t3 = t1.centerZero.storage;
        t2[1] = t3[1];
        t2[0] = t3[0];
        t1.angle = t1.angleZero;
        body.synchronizeTransform$0();
        return;
      }
      t1 = this.backup;
      t2 = body.sweep;
      t1.setFrom$1(t2);
      t2.advance$1(toi);
      t3 = t2.center.storage;
      t4 = t2.centerZero.storage;
      t3[1] = t4[1];
      t3[0] = t4[0];
      t2.angle = t2.angleZero;
      body.synchronizeTransform$0();
      toiContact.update$1(this._contactManager.contactListener);
      t3 = toiContact.flags;
      if (typeof t3 !== "number")
        return t3.$and();
      if ((t3 & 4) !== 4) {
        t2.setFrom$1(t1);
        this.solveTimeOfImpactGivenBody$1(body);
      }
      t1 = toiContact.toiCount;
      if (typeof t1 !== "number")
        return t1.$add();
      toiContact.toiCount = t1 + 1;
      ce = body.contactList;
      count = 0;
      while (true) {
        if (!(ce != null && count < 32))
          break;
        c$0: {
          other = ce.other;
          if (other.get$type(other) === 2)
            break c$0;
          contact = ce.contact;
          t1 = contact.flags;
          if (typeof t1 !== "number")
            return t1.$and();
          if ((t1 & 4) !== 4)
            break c$0;
          fixtureA = contact.fixtureA;
          fixtureB = contact.fixtureB;
          if (fixtureA.get$isSensor() === true || fixtureB.get$isSensor() === true)
            break c$0;
          if (contact == null ? toiContact != null : contact !== toiContact)
            contact.update$1(this._contactManager.contactListener);
          t1 = contact.flags;
          if (typeof t1 !== "number")
            return t1.$and();
          if ((t1 & 4) !== 4 || (t1 & 2) !== 2)
            break c$0;
          t1 = this.contacts;
          if (count >= 32)
            return H.ioore(t1, count);
          t1[count] = contact;
          ++count;
        }
        ce = ce.next;
      }
      t1 = this.toiSolver;
      t1.initialize$3(0, this.contacts, count, body);
      for (i = 0; i < 20; ++i)
        if (t1.solve$1(0.75))
          break;
      if (toiOther.get$type(toiOther) !== 0) {
        t1 = toiContact.flags;
        if (typeof t1 !== "number")
          return t1.$or();
        toiContact.flags = t1 | 16;
      }
    },
    drawShape$3: function(fixture, xf, color) {
      var t1, t2, radius, t3, t4, t5, t6, t7, t8, t9, vertexCount, vertices, i;
      t1 = fixture.shape;
      switch (t1.type) {
        case 0:
          t2 = this.center;
          V.Transform_mulToOut(xf, t1.get$position(t1), t2);
          radius = t1.radius;
          t1 = xf.rotation.storage;
          t3 = t1[0];
          t1 = t1[1];
          t4 = this.axis.storage;
          t4[0] = t3;
          t4[1] = t1;
          t1 = this._debugDraw;
          t3 = t1.flags;
          t4 = t2.storage;
          t5 = color.x;
          t6 = t1.viewportTransform;
          t7 = color.y;
          t8 = t1.ctx;
          t9 = color.z;
          if (0 !== (t3 & 64)) {
            t3 = t6.scale;
            J.setStrokeColorRgb$4$x(t8, t5, t7, t9, 0.9);
            J.setFillColorRgb$4$x(t1.ctx, color.x, color.y, color.z, 0.8);
            t6.getWorldToScreen$2(t2, t2);
            J.beginPath$0$x(t1.ctx);
            J.arc$6$x(t1.ctx, t4[0], t4[1], radius * t3, 0, 6.283185307179586, true);
            J.closePath$0$x(t1.ctx);
            J.stroke$0$x(t1.ctx);
          } else {
            t3 = t6.scale;
            J.setStrokeColorRgb$4$x(t8, t5, t7, t9, 0.9);
            J.setFillColorRgb$4$x(t1.ctx, color.x, color.y, color.z, 0.8);
            t6.getWorldToScreen$2(t2, t2);
            J.beginPath$0$x(t1.ctx);
            J.arc$6$x(t1.ctx, t4[0], t4[1], radius * t3, 0, 6.283185307179586, true);
            J.closePath$0$x(t1.ctx);
            J.fill$0$x(t1.ctx);
          }
          break;
        case 1:
          vertexCount = t1.get$vertexCount();
          vertices = P.List_List$generate(vertexCount, new V.World_drawShape_closure(), true, T.Vector2);
          for (t1 = t1.vertices, i = 0; i < vertexCount; ++i) {
            if (i >= 8)
              return H.ioore(t1, i);
            t2 = t1[i];
            if (i >= vertices.length)
              return H.ioore(vertices, i);
            V.Transform_mulToOut(xf, t2, vertices[i]);
          }
          t1 = this._debugDraw;
          if (0 !== (t1.flags & 64)) {
            t1._pathPolygon$3(vertices, vertexCount, color);
            J.stroke$0$x(t1.ctx);
          } else if (vertexCount > 2) {
            t1._pathPolygon$3(vertices, vertexCount, color);
            J.fill$0$x(t1.ctx);
          } else {
            t1._pathPolygon$3(vertices, vertexCount, color);
            J.stroke$0$x(t1.ctx);
          }
          break;
        default:
      }
    },
    World$3: function(gravity, doSleep, argPool) {
      var t1, i, t2;
      this._contactManager = new V.ContactManager(V.BroadPhase$(), null, 0, new V.ContactFilter(), null, this);
      for (t1 = this._contactStacks, i = 0; i < 2; ++i) {
        t2 = Array(2);
        t2.$builtinTypeInfo = [V.ContactRegister];
        t1[i] = t2;
      }
      t1 = this._pool;
      this._addType$3(t1.getCircleContactStack$0(), 0, 0);
      this._addType$3(t1.getPolyCircleContactStack$0(), 1, 0);
      this._addType$3(t1.getPolyContactStack$0(), 1, 1);
    },
    static: {"": "World_WORLD_POOL_SIZE,World_WORLD_POOL_CONTAINER_SIZE,World_NEW_FIXTURE,World_LOCKED,World_CLEAR_FORCES", World$: function(gravity, doSleep, argPool) {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13;
        t1 = H.setRuntimeTypeInfo(Array(2), [[J.JSArray, V.ContactRegister]]);
        t2 = new Float32Array(2);
        t3 = new Float32Array(2);
        t4 = new Float32Array(2);
        t5 = new Float32Array(2);
        t6 = V.DistanceProxy$();
        t7 = V.DistanceProxy$();
        t8 = V.Sweep$();
        t9 = V.Sweep$();
        t10 = V.Sweep$();
        t11 = V.TimeOfImpactSolver$();
        t12 = H.setRuntimeTypeInfo(Array(32), [V.Contact]);
        t13 = V.ContactSolver$();
        t1 = new V.World(4, null, null, null, 0, 0, gravity, doSleep, null, null, null, argPool, 0, true, true, t1, new T.Vector2(t2), new T.Vector2(t3), new V.TimeStep(0, 0, 0, 0, 0, true), new T.Vector2(t4), new T.Vector2(t5), new V.WorldQueryWrapper(null, null), new V.TimeOfImpactInput(t6, t7, t8, t9, 0), new V.TimeOfImpactOutput(0, 0), t10, t11, t12, new V.Island(null, null, null, null, null, null, null, null, null, null, null, null, null, t13, new T.Vector2(new Float32Array(2)), new V.ContactImpulse(H.setRuntimeTypeInfo(Array(2), [J.JSDouble]), H.setRuntimeTypeInfo(Array(2), [J.JSDouble]))), H.setRuntimeTypeInfo(Array(10), [V.Body]));
        t1.World$3(gravity, doSleep, argPool);
        return t1;
      }}
  },
  World_drawShape_closure: {
    "": "Closure:13;",
    call$1: function(i) {
      return new T.Vector2(new Float32Array(2));
    }
  },
  WorldQueryWrapper: {
    "": "Object;broadPhase,callback"
  },
  DefaultWorldPool: {
    "": "Object;collision,timeOfImpact,distance",
    getCircleContactStack$0: function() {
      var t1, queue, i;
      t1 = V.CircleContact;
      queue = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [t1]);
      queue.ListQueue$1(null, t1);
      for (i = 0; i < 10; ++i)
        queue.addFirst$1(new V.CircleContact(null, null, null, new V.ContactEdge(null, null, null, null), new V.ContactEdge(null, null, null, null), null, null, V.Manifold$(), null, this, V.Manifold$()));
      return queue;
    },
    getPolyCircleContactStack$0: function() {
      var t1, queue, i;
      t1 = V.PolygonAndCircleContact;
      queue = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [t1]);
      queue.ListQueue$1(null, t1);
      for (i = 0; i < 10; ++i)
        queue.addFirst$1(new V.PolygonAndCircleContact(null, null, null, new V.ContactEdge(null, null, null, null), new V.ContactEdge(null, null, null, null), null, null, V.Manifold$(), null, this, V.Manifold$()));
      return queue;
    },
    getPolyContactStack$0: function() {
      var t1, queue, i;
      t1 = V.PolygonContact;
      queue = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [t1]);
      queue.ListQueue$1(null, t1);
      for (i = 0; i < 10; ++i)
        queue.addFirst$1(new V.PolygonContact(null, null, null, new V.ContactEdge(null, null, null, null), new V.ContactEdge(null, null, null, null), null, null, V.Manifold$(), null, this, V.Manifold$()));
      return queue;
    },
    DefaultWorldPool$0: function() {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24;
      t1 = V.SimplexVertex$();
      t2 = V.SimplexVertex$();
      t3 = V.SimplexVertex$();
      t4 = H.setRuntimeTypeInfo(Array(3), [V.SimplexVertex]);
      t5 = new Float32Array(2);
      t6 = new Float32Array(2);
      t7 = new Float32Array(2);
      t8 = new Float32Array(2);
      t9 = new Float32Array(2);
      t10 = new Float32Array(2);
      t1 = new V.Simplex(t1, t2, t3, t4, 0, new T.Vector2(t5), new T.Vector2(t7), new T.Vector2(t6), new T.Vector2(t8), new T.Vector2(t9), new T.Vector2(t10), new T.Vector2(new Float32Array(2)));
      t1.Simplex$0();
      t2 = H.setRuntimeTypeInfo(Array(3), [J.JSInt]);
      t3 = H.setRuntimeTypeInfo(Array(3), [J.JSInt]);
      t4 = new Float32Array(2);
      t5 = new Float32Array(2);
      t6 = new Float32Array(2);
      this.distance = new V.Distance(0, 0, 20, t1, t2, t3, new T.Vector2(t4), new T.Vector2(t5), new T.Vector2(t6), new T.Vector2(new Float32Array(2)));
      t1 = V.DistanceInput$();
      t2 = V.SimplexCache$();
      t3 = V.DistanceOutput$();
      t4 = H.setRuntimeTypeInfo(Array(2), [V.ClipVertex]);
      t5 = new Float32Array(2);
      t6 = new Float32Array(2);
      t7 = new Float32Array(2);
      t8 = new Float32Array(2);
      t9 = new Float32Array(2);
      t10 = new Float32Array(2);
      t11 = new Float32Array(2);
      t1 = new V.Collision(this, t2, t1, t3, new V.EdgeResults(0, 0), new V.EdgeResults(0, 0), t4, new T.Vector2(t5), new T.Vector2(t6), new T.Vector2(t7), new T.Vector2(t8), new T.Vector2(t9), new T.Vector2(t10), new T.Vector2(t11), new T.Vector2(new Float32Array(2)), H.setRuntimeTypeInfo(Array(2), [V.ClipVertex]), H.setRuntimeTypeInfo(Array(2), [V.ClipVertex]));
      t1.Collision$_construct$1(this);
      this.collision = t1;
      t1 = V.SimplexCache$();
      t2 = V.DistanceInput$();
      t3 = V.Transform$();
      t4 = V.Transform$();
      t5 = V.DistanceOutput$();
      t6 = V.DistanceProxy$();
      t7 = V.DistanceProxy$();
      t8 = new Float32Array(2);
      t9 = new Float32Array(2);
      t10 = V.Sweep$();
      t11 = V.Sweep$();
      t12 = new Float32Array(2);
      t13 = new Float32Array(2);
      t14 = new Float32Array(2);
      t15 = new Float32Array(2);
      t16 = new Float32Array(2);
      t17 = new Float32Array(2);
      t18 = new Float32Array(2);
      t19 = new Float32Array(2);
      t20 = new Float32Array(2);
      t21 = new Float32Array(2);
      t22 = V.Transform$();
      t23 = V.Transform$();
      t24 = new Float32Array(2);
      t1 = new V.TimeOfImpact(t1, t2, t3, t4, t5, new V.SeparationFunction(t6, t7, 0, new T.Vector2(t8), new T.Vector2(t9), t10, t11, new T.Vector2(t12), new T.Vector2(t13), new T.Vector2(t14), new T.Vector2(t15), new T.Vector2(t16), new T.Vector2(t17), new T.Vector2(t18), new T.Vector2(t19), new T.Vector2(t20), new T.Vector2(t24), new T.Vector2(new Float32Array(2)), new T.Vector2(t21), t22, t23), H.setRuntimeTypeInfo(Array(2), [J.JSInt]), V.Sweep$(), V.Sweep$(), this);
      t1.TimeOfImpact$_construct$1(this);
      this.timeOfImpact = t1;
    }
  }
}],
["box2d_browser", "package:box2d/box2d_browser.dart", , Y, {
  "": "",
  CanvasDraw: {
    "": "DebugDraw;ctx,flags,viewportTransform",
    _pathPolygon$3: function(vertices, vertexCount, color) {
      var t1, i, t2;
      this.set$_color(color);
      for (t1 = this.viewportTransform, i = 0; i < vertexCount; ++i) {
        if (i >= vertices.length)
          return H.ioore(vertices, i);
        t2 = vertices[i];
        t1.getWorldToScreen$2(t2, t2);
      }
      J.beginPath$0$x(this.ctx);
      t1 = this.ctx;
      if (0 >= vertices.length)
        return H.ioore(vertices, 0);
      t2 = J.get$x$x(vertices[0]);
      if (0 >= vertices.length)
        return H.ioore(vertices, 0);
      J.moveTo$2$x(t1, t2, J.get$y$x(vertices[0]));
      for (i = 1; t1 = this.ctx, t2 = vertices.length, i < vertexCount; ++i) {
        if (i >= t2)
          return H.ioore(vertices, i);
        t2 = J.get$x$x(vertices[i]);
        if (i >= vertices.length)
          return H.ioore(vertices, i);
        J.lineTo$2$x(t1, t2, J.get$y$x(vertices[i]));
      }
      if (0 >= t2)
        return H.ioore(vertices, 0);
      t2 = J.get$x$x(vertices[0]);
      if (0 >= vertices.length)
        return H.ioore(vertices, 0);
      J.lineTo$2$x(t1, t2, J.get$y$x(vertices[0]));
      J.closePath$0$x(this.ctx);
    },
    drawSegment$3: function(p1, p2, color) {
      var t1;
      this.set$_color(color);
      t1 = this.viewportTransform;
      t1.getWorldToScreen$2(p1, p1);
      t1.getWorldToScreen$2(p2, p2);
      J.beginPath$0$x(this.ctx);
      t1 = p1.storage;
      J.moveTo$2$x(this.ctx, t1[0], t1[1]);
      t1 = p2.storage;
      J.lineTo$2$x(this.ctx, t1[0], t1[1]);
      J.closePath$0$x(this.ctx);
      J.stroke$0$x(this.ctx);
    },
    set$_color: function(color) {
      J.setStrokeColorRgb$4$x(this.ctx, color.x, color.y, color.z, 0.9);
      J.setFillColorRgb$4$x(this.ctx, color.x, color.y, color.z, 0.8);
    },
    CanvasDraw$2: function(viewport, ctx) {
    }
  },
  CanvasViewportTransform: {
    "": "ViewportTransform;yFlip,extents,scale,center",
    static: {"": "CanvasViewportTransform_DEFAULT_DRAWING_SCALE"}
  }
}],
["dart._internal", "dart:_internal", , H, {
  "": "",
  IterableMixinWorkaround_forEach: function(iterable, f) {
    var t1;
    for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
      f.call$1(t1.__internal$_current);
  },
  IterableMixinWorkaround_any: function(iterable, f) {
    var t1;
    for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
      if (f.call$1(t1.__internal$_current) === true)
        return true;
    return false;
  },
  IterableMixinWorkaround_toStringIterable: function(iterable, leftDelimiter, rightDelimiter) {
    var result, i, t1;
    for (i = 0; t1 = $.get$IterableMixinWorkaround__toStringList(), i < t1.length; ++i)
      if (t1[i] === iterable)
        return H.S(leftDelimiter) + "..." + H.S(rightDelimiter);
    result = P.StringBuffer$("");
    try {
      $.get$IterableMixinWorkaround__toStringList().push(iterable);
      result.write$1(leftDelimiter);
      result.writeAll$2(iterable, ", ");
      result.write$1(rightDelimiter);
    } finally {
      t1 = $.get$IterableMixinWorkaround__toStringList();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    return result.get$_contents();
  },
  IterableMixinWorkaround__rangeCheck: function(list, start, end) {
    if (start < 0 || start > list.length)
      throw H.wrapException(P.RangeError$range(start, 0, list.length));
    if (end < start || end > list.length)
      throw H.wrapException(P.RangeError$range(end, start, list.length));
  },
  IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
    var $length;
    H.IterableMixinWorkaround__rangeCheck(list, start, end);
    $length = end - start;
    if ($length === 0)
      return;
    if (skipCount < 0)
      throw H.wrapException(new P.ArgumentError(skipCount));
    if (skipCount + $length > from.length)
      throw H.wrapException(P.StateError$("Not enough elements"));
    H.Lists_copy(from, skipCount, list, start, $length);
  },
  Lists_copy: function(src, srcStart, dst, dstStart, count) {
    var i, j, t1;
    if (srcStart < dstStart)
      for (i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j) {
        if (i < 0 || i >= src.length)
          return H.ioore(src, i);
        C.JSArray_methods.$indexSet(dst, j, src[i]);
      }
    else
      for (t1 = srcStart + count, j = dstStart, i = srcStart; i < t1; ++i, ++j) {
        if (i < 0 || i >= src.length)
          return H.ioore(src, i);
        C.JSArray_methods.$indexSet(dst, j, src[i]);
      }
  },
  Lists_indexOf: function(a, element, startIndex, endIndex) {
    var i;
    if (startIndex >= a.length)
      return -1;
    for (i = startIndex; i < endIndex; ++i) {
      if (i >= a.length)
        return H.ioore(a, i);
      if (J.$eq(a[i], element))
        return i;
    }
    return -1;
  },
  Sort__doSort: function(a, left, right, compare) {
    if (right - left <= 32)
      H.Sort__insertionSort(a, left, right, compare);
    else
      H.Sort__dualPivotQuicksort(a, left, right, compare);
  },
  Sort__insertionSort: function(a, left, right, compare) {
    var i, t1, el, j, j0;
    for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
      el = t1.$index(a, i);
      j = i;
      while (true) {
        if (!(j > left && J.$gt$n(compare.call$2(t1.$index(a, j - 1), el), 0)))
          break;
        j0 = j - 1;
        t1.$indexSet(a, j, t1.$index(a, j0));
        j = j0;
      }
      t1.$indexSet(a, j, el);
    }
  },
  Sort__dualPivotQuicksort: function(a, left, right, compare) {
    var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, t2, great0, less0, pivots_are_equal;
    sixth = C.JSInt_methods._tdivFast$1(right - left + 1, 6);
    index1 = left + sixth;
    index5 = right - sixth;
    index3 = C.JSInt_methods._tdivFast$1(left + right, 2);
    index2 = index3 - sixth;
    index4 = index3 + sixth;
    t1 = J.getInterceptor$asx(a);
    el1 = t1.$index(a, index1);
    el2 = t1.$index(a, index2);
    el3 = t1.$index(a, index3);
    el4 = t1.$index(a, index4);
    el5 = t1.$index(a, index5);
    if (J.$gt$n(compare.call$2(el1, el2), 0)) {
      t0 = el2;
      el2 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el4, el5), 0)) {
      t0 = el5;
      el5 = el4;
      el4 = t0;
    }
    if (J.$gt$n(compare.call$2(el1, el3), 0)) {
      t0 = el3;
      el3 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el3), 0)) {
      t0 = el3;
      el3 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el1, el4), 0)) {
      t0 = el4;
      el4 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el3, el4), 0)) {
      t0 = el4;
      el4 = el3;
      el3 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el5), 0)) {
      t0 = el5;
      el5 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el3), 0)) {
      t0 = el3;
      el3 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el4, el5), 0)) {
      t0 = el5;
      el5 = el4;
      el4 = t0;
    }
    t1.$indexSet(a, index1, el1);
    t1.$indexSet(a, index3, el3);
    t1.$indexSet(a, index5, el5);
    t1.$indexSet(a, index2, t1.$index(a, left));
    t1.$indexSet(a, index4, t1.$index(a, right));
    less = left + 1;
    great = right - 1;
    if (J.$eq(compare.call$2(el2, el4), 0)) {
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        comp = compare.call$2(ak, el2);
        t2 = J.getInterceptor(comp);
        if (t2.$eq(comp, 0))
          continue;
        if (t2.$lt(comp, 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else
          for (; true;) {
            comp = compare.call$2(t1.$index(a, great), el2);
            t2 = J.getInterceptor$n(comp);
            if (t2.$gt(comp, 0)) {
              --great;
              continue;
            } else {
              great0 = great - 1;
              if (t2.$lt(comp, 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
                break;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                break;
              }
            }
          }
      }
      pivots_are_equal = true;
    } else {
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        if (J.$lt$n(compare.call$2(ak, el2), 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else if (J.$gt$n(compare.call$2(ak, el4), 0))
          for (; true;)
            if (J.$gt$n(compare.call$2(t1.$index(a, great), el4), 0)) {
              --great;
              if (great < k)
                break;
              continue;
            } else {
              great0 = great - 1;
              if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
              }
              break;
            }
      }
      pivots_are_equal = false;
    }
    t2 = less - 1;
    t1.$indexSet(a, left, t1.$index(a, t2));
    t1.$indexSet(a, t2, el2);
    t2 = great + 1;
    t1.$indexSet(a, right, t1.$index(a, t2));
    t1.$indexSet(a, t2, el4);
    H.Sort__doSort(a, left, less - 2, compare);
    H.Sort__doSort(a, great + 2, right, compare);
    if (pivots_are_equal)
      return;
    if (less < index1 && great > index5) {
      for (; J.$eq(compare.call$2(t1.$index(a, less), el2), 0);)
        ++less;
      for (; J.$eq(compare.call$2(t1.$index(a, great), el4), 0);)
        --great;
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        if (J.$eq(compare.call$2(ak, el2), 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else if (J.$eq(compare.call$2(ak, el4), 0))
          for (; true;)
            if (J.$eq(compare.call$2(t1.$index(a, great), el4), 0)) {
              --great;
              if (great < k)
                break;
              continue;
            } else {
              great0 = great - 1;
              if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
              }
              break;
            }
      }
      H.Sort__doSort(a, less, great, compare);
    } else
      H.Sort__doSort(a, less, great, compare);
  },
  Symbol_getName: function(symbol) {
    return symbol.get$_name();
  },
  ListIterable: {
    "": "IterableBase;",
    get$iterator: function(_) {
      return new H.ListIterator(this, this.get$length(this), 0, null);
    },
    forEach$1: function(_, action) {
      var $length, i;
      $length = this.get$length(this);
      for (i = 0; i < $length; ++i) {
        action.call$1(this.elementAt$1(0, i));
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    $isEfficientLength: true
  },
  SubListIterable: {
    "": "ListIterable;_iterable,__internal$_start,_endOrLength",
    get$_endIndex: function() {
      var $length, t1, t2;
      $length = J.get$length$asx(this._iterable);
      t1 = this._endOrLength;
      if (t1 != null) {
        if (typeof t1 !== "number")
          return t1.$gt();
        t2 = t1 > $length;
      } else
        t2 = true;
      if (t2)
        return $length;
      return t1;
    },
    get$_startIndex: function() {
      var $length, t1;
      $length = J.get$length$asx(this._iterable);
      t1 = this.__internal$_start;
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length: function(_) {
      var $length, t1, t2, t3;
      $length = J.get$length$asx(this._iterable);
      t1 = this.__internal$_start;
      if (t1 >= $length)
        return 0;
      t2 = this._endOrLength;
      if (t2 != null) {
        if (typeof t2 !== "number")
          return t2.$ge();
        t3 = t2 >= $length;
      } else
        t3 = true;
      if (t3)
        return $length - t1;
      if (typeof t2 !== "number")
        return t2.$sub();
      return t2 - t1;
    },
    elementAt$1: function(_, index) {
      var realIndex, t1;
      realIndex = this.get$_startIndex() + index;
      if (index >= 0) {
        t1 = this.get$_endIndex();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = realIndex >= t1;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.RangeError$range(index, 0, this.get$length(this)));
      return J.elementAt$1$ax(this._iterable, realIndex);
    },
    SubListIterable$3: function(_iterable, _start, _endOrLength, $E) {
      var t1, t2;
      t1 = this.__internal$_start;
      if (t1 < 0)
        throw H.wrapException(P.RangeError$value(t1));
      t2 = this._endOrLength;
      if (t2 != null) {
        if (typeof t2 !== "number")
          return t2.$lt();
        if (t1 > t2)
          throw H.wrapException(P.RangeError$range(t1, 0, t2));
      }
    },
    static: {SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
        var t1 = H.setRuntimeTypeInfo(new H.SubListIterable(_iterable, _start, _endOrLength), [$E]);
        t1.SubListIterable$3(_iterable, _start, _endOrLength, $E);
        return t1;
      }}
  },
  ListIterator: {
    "": "Object;_iterable,_length,_index,__internal$_current",
    get$current: function() {
      return this.__internal$_current;
    },
    moveNext$0: function() {
      var t1, t2, $length, t3;
      t1 = this._iterable;
      t2 = J.getInterceptor$asx(t1);
      $length = t2.get$length(t1);
      if (this._length !== $length)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = this._index;
      if (t3 >= $length) {
        this.__internal$_current = null;
        return false;
      }
      this.__internal$_current = t2.elementAt$1(t1, t3);
      this._index = this._index + 1;
      return true;
    }
  },
  MappedIterable: {
    "": "IterableBase;_iterable,_f",
    get$iterator: function(_) {
      var t1 = this._iterable;
      t1 = new H.MappedIterator(null, t1.get$iterator(t1), this._f);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    get$length: function(_) {
      var t1 = this._iterable;
      return t1.get$length(t1);
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    static: {MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
        if (!!iterable.$isEfficientLength)
          return H.setRuntimeTypeInfo(new H.EfficientLengthMappedIterable(iterable, $function), [$S, $T]);
        return H.setRuntimeTypeInfo(new H.MappedIterable(iterable, $function), [$S, $T]);
      }}
  },
  EfficientLengthMappedIterable: {
    "": "MappedIterable;_iterable,_f",
    $isEfficientLength: true
  },
  MappedIterator: {
    "": "Iterator;__internal$_current,_iterator,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    moveNext$0: function() {
      var t1 = this._iterator;
      if (t1.moveNext$0()) {
        this.__internal$_current = this._f$1(t1.get$current());
        return true;
      }
      this.__internal$_current = null;
      return false;
    },
    get$current: function() {
      return this.__internal$_current;
    }
  },
  MappedListIterable: {
    "": "ListIterable;_source,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      return this._f$1(J.elementAt$1$ax(this._source, index));
    },
    $asListIterable: function($S, $T) {
      return [$T];
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    $isEfficientLength: true
  },
  WhereIterable: {
    "": "IterableBase;_iterable,_f",
    get$iterator: function(_) {
      var t1 = new H.WhereIterator(J.get$iterator$ax(this._iterable), this._f);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    }
  },
  WhereIterator: {
    "": "Iterator;_iterator,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    moveNext$0: function() {
      for (var t1 = this._iterator; t1.moveNext$0();)
        if (this._f$1(t1.get$current()) === true)
          return true;
      return false;
    },
    get$current: function() {
      return this._iterator.get$current();
    }
  },
  FixedLengthListMixin: {
    "": "Object;"
  }
}],
["dart._js_names", "dart:_js_names", , H, {
  "": "",
  extractKeys: function(victim) {
    var t1 = H.setRuntimeTypeInfo((function(victim, hasOwnProperty) {
  var result = [];
  for (var key in victim) {
    if (hasOwnProperty.call(victim, key)) result.push(key);
  }
  return result;
})(victim, Object.prototype.hasOwnProperty), [null]);
    t1.fixed$length = init;
    return t1;
  }
}],
["dart.async", "dart:async", , P, {
  "": "",
  _invokeErrorHandler: function(errorHandler, error, stackTrace) {
    var t1 = H.getDynamicRuntimeType();
    t1 = H.buildFunctionType(t1, [t1, t1])._isTest$1(errorHandler);
    if (t1)
      return errorHandler.call$2(error, stackTrace);
    else
      return errorHandler.call$1(error);
  },
  _registerErrorHandler: function(errorHandler, zone) {
    var t1 = H.getDynamicRuntimeType();
    t1 = H.buildFunctionType(t1, [t1, t1])._isTest$1(errorHandler);
    zone.toString;
    if (t1)
      return errorHandler;
    else
      return errorHandler;
  },
  _asyncRunCallback: [function() {
    var callback, t1, exception, milliseconds;
    for (; t1 = $.get$_asyncCallbacks(), t1._head !== t1._tail;) {
      callback = t1.removeFirst$0();
      try {
        callback.call$0();
      } catch (exception) {
        H.unwrapException(exception);
        milliseconds = C.JSInt_methods._tdivFast$1(C.Duration_0._duration, 1000);
        H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, P._asyncRunCallback$closure());
        throw exception;
      }

    }
    $._callbacksAreEnqueued = false;
  }, "call$0", "_asyncRunCallback$closure", 0, 0, 0],
  _scheduleAsyncCallback: function(callback) {
    $.get$_asyncCallbacks()._add$1(callback);
    if (!$._callbacksAreEnqueued) {
      P._createTimer(C.Duration_0, P._asyncRunCallback$closure());
      $._callbacksAreEnqueued = true;
    }
  },
  scheduleMicrotask: function(callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone) {
      t1.toString;
      P._rootScheduleMicrotask(t1, null, t1, callback);
      return;
    }
    P._rootScheduleMicrotask(t1, null, t1, t1.bindCallback$2$runGuarded(callback, true));
  },
  StreamController_StreamController: function(onCancel, onListen, onPause, onResume, sync, $T) {
    return sync ? H.setRuntimeTypeInfo(new P._SyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null), [$T]) : H.setRuntimeTypeInfo(new P._AsyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null), [$T]);
  },
  _runGuarded: function(notificationHandler) {
    var result, e, s, t1, t2, exception;
    if (notificationHandler == null)
      return;
    try {
      result = notificationHandler.call$0();
      t1 = result;
      t2 = J.getInterceptor(t1);
      if (typeof t1 === "object" && t1 !== null && !!t2.$isFuture)
        return result;
      return;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      t1 = $.Zone__current;
      t1.toString;
      P._rootHandleUncaughtError(t1, null, t1, e, s);
    }

  },
  _nullDataHandler: [function(value) {
  }, "call$1", "_nullDataHandler$closure", 2, 0, 1],
  _nullErrorHandler: [function(error, stackTrace) {
    var t1 = $.Zone__current;
    t1.toString;
    P._rootHandleUncaughtError(t1, null, t1, error, stackTrace);
  }, function(error) {
    return P._nullErrorHandler(error, null);
  }, null, "call$2", "call$1", "_nullErrorHandler$closure", 2, 2, 2, 3],
  _nullDoneHandler: [function() {
    return;
  }, "call$0", "_nullDoneHandler$closure", 0, 0, 0],
  _runUserCode: function(userCode, onSuccess, onError) {
    var e, s, exception, t1;
    try {
      onSuccess.call$1(userCode.call$0());
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      onError.call$2(e, s);
    }

  },
  _cancelAndError: function(subscription, future, error, stackTrace) {
    var cancelFuture, t1;
    cancelFuture = subscription.cancel$0();
    t1 = J.getInterceptor(cancelFuture);
    if (typeof cancelFuture === "object" && cancelFuture !== null && !!t1.$isFuture)
      cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
    else
      future._completeError$2(error, stackTrace);
  },
  _cancelAndErrorClosure: function(subscription, future) {
    return new P._cancelAndErrorClosure_closure(subscription, future);
  },
  Timer_Timer: function(duration, callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone) {
      t1.toString;
      return P._rootCreateTimer(t1, null, t1, duration, callback);
    }
    return P._rootCreateTimer(t1, null, t1, duration, t1.bindCallback$2$runGuarded(callback, true));
  },
  Timer_Timer$periodic: function(duration, callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone) {
      t1.toString;
      return P._rootCreatePeriodicTimer(t1, null, t1, duration, callback);
    }
    return P._rootCreatePeriodicTimer(t1, null, t1, duration, t1.bindUnaryCallback$2$runGuarded(callback, true));
  },
  _createTimer: function(duration, callback) {
    var milliseconds = C.JSInt_methods._tdivFast$1(duration._duration, 1000);
    return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
  },
  _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
    P._rootRun($self, null, $self, new P._rootHandleUncaughtError_closure(error, stackTrace));
  },
  _rootRun: function($self, $parent, zone, f) {
    var old, t1, t2;
    t1 = $.Zone__current;
    t2 = zone;
    if (t1 == null ? t2 == null : t1 === t2)
      return f.call$0();
    old = t1;
    try {
      $.Zone__current = zone;
      t1 = f.call$0();
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootRunUnary: function($self, $parent, zone, f, arg) {
    var old, t1, t2;
    t1 = $.Zone__current;
    t2 = zone;
    if (t1 == null ? t2 == null : t1 === t2)
      return f.call$1(arg);
    old = t1;
    try {
      $.Zone__current = zone;
      t1 = f.call$1(arg);
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootScheduleMicrotask: function($self, $parent, zone, f) {
    P._scheduleAsyncCallback(C.C__RootZone !== zone ? zone.bindCallback$1(f) : f);
  },
  _rootCreateTimer: function($self, $parent, zone, duration, callback) {
    return P._createTimer(duration, C.C__RootZone !== zone ? zone.bindCallback$1(callback) : callback);
  },
  _rootCreatePeriodicTimer: function($self, $parent, zone, duration, callback) {
    var milliseconds;
    if (C.C__RootZone !== zone)
      callback = zone.bindUnaryCallback$1(callback);
    milliseconds = C.JSInt_methods._tdivFast$1(duration._duration, 1000);
    return H.TimerImpl$periodic(milliseconds < 0 ? 0 : milliseconds, callback);
  },
  _AsyncError: {
    "": "Object;error>,stackTrace<",
    $isError: true
  },
  Future: {
    "": "Object;",
    $isFuture: true
  },
  _Future: {
    "": "Object;_state,_zone<,_resultOrListeners,_nextListener<,_onValueCallback,_errorTestCallback,_onErrorCallback,_whenCompleteActionCallback",
    get$_isComplete: function() {
      return this._state >= 4;
    },
    get$_hasError: function() {
      return this._state === 8;
    },
    set$_isChained: function(value) {
      if (value)
        this._state = 2;
      else
        this._state = 0;
    },
    get$_onValue: function() {
      return this._state === 2 ? null : this._onValueCallback;
    },
    _onValue$1: function(arg0) {
      return this.get$_onValue().call$1(arg0);
    },
    get$_whenCompleteAction: function() {
      return this._state === 2 ? null : this._whenCompleteActionCallback;
    },
    _whenCompleteAction$0: function() {
      return this.get$_whenCompleteAction().call$0();
    },
    then$2$onError: function(f, onError) {
      var t1, result;
      t1 = $.Zone__current;
      t1.toString;
      result = H.setRuntimeTypeInfo(new P._Future(0, t1, null, null, f, null, P._registerErrorHandler(onError, t1), null), [null]);
      this._addListener$1(result);
      return result;
    },
    whenComplete$1: function(action) {
      var t1, result;
      t1 = $.Zone__current;
      t1.toString;
      result = new P._Future(0, t1, null, null, null, null, null, action);
      result.$builtinTypeInfo = this.$builtinTypeInfo;
      this._addListener$1(result);
      return result;
    },
    get$_async$_value: function() {
      return this._resultOrListeners;
    },
    get$_error: function() {
      return this._resultOrListeners;
    },
    _setValue$1: function(value) {
      this._state = 4;
      this._resultOrListeners = value;
    },
    _setError$2: function(error, stackTrace) {
      this._state = 8;
      this._resultOrListeners = new P._AsyncError(error, stackTrace);
    },
    _addListener$1: function(listener) {
      var t1;
      if (this._state >= 4) {
        t1 = this._zone;
        t1.toString;
        P._rootScheduleMicrotask(t1, null, t1, new P._Future__addListener_closure(this, listener));
      } else {
        listener._nextListener = this._resultOrListeners;
        this._resultOrListeners = listener;
      }
    },
    _removeListeners$0: function() {
      var current, prev, next;
      current = this._resultOrListeners;
      this._resultOrListeners = null;
      for (prev = null; current != null; prev = current, current = next) {
        next = current.get$_nextListener();
        current._nextListener = prev;
      }
      return prev;
    },
    _complete$1: function(value) {
      var t1, listeners;
      t1 = J.getInterceptor(value);
      if (typeof value === "object" && value !== null && !!t1.$isFuture) {
        P._Future__chainFutures(value, this);
        return;
      }
      listeners = this._removeListeners$0();
      this._setValue$1(value);
      P._Future__propagateToListeners(this, listeners);
    },
    _completeError$2: [function(error, stackTrace) {
      var listeners = this._removeListeners$0();
      this._setError$2(error, stackTrace);
      P._Future__propagateToListeners(this, listeners);
    }, function(error) {
      return this._completeError$2(error, null);
    }, "_completeError$1", "call$2", "call$1", "get$_completeError", 2, 2, 2, 3],
    _asyncComplete$1: function(value) {
      var t1;
      if (this._state !== 0)
        H.throwExpression(new P.StateError("Future already completed"));
      this._state = 1;
      t1 = this._zone;
      t1.toString;
      P._rootScheduleMicrotask(t1, null, t1, new P._Future__asyncComplete_closure(this, value));
    },
    $is_Future: true,
    $isFuture: true,
    static: {"": "_Future__INCOMPLETE,_Future__PENDING_COMPLETE,_Future__CHAINED,_Future__VALUE,_Future__ERROR", _Future$: function($T) {
        return H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null, null, null, null, null, null), [$T]);
      }, _Future__chainFutures: function(source, target) {
        var t1;
        target._state = 2;
        t1 = J.getInterceptor(source);
        if (typeof source === "object" && source !== null && !!t1.$is_Future)
          if (source._state >= 4)
            P._Future__propagateToListeners(source, target);
          else
            source._addListener$1(target);
        else
          source.then$2$onError(new P._Future__chainFutures_closure(target), new P._Future__chainFutures_closure0(target));
      }, _Future__propagateMultipleListeners: function(source, listeners) {
        var listeners0;
        do {
          listeners0 = listeners.get$_nextListener();
          listeners._nextListener = null;
          P._Future__propagateToListeners(source, listeners);
          if (listeners0 != null) {
            listeners = listeners0;
            continue;
          } else
            break;
        } while (true);
      }, _Future__propagateToListeners: function(source, listeners) {
        var t1, t2, t3, hasError, asyncError, t4, t5, chainSource, listeners0;
        t1 = {};
        t1.source_4 = source;
        for (t2 = source; true;) {
          t3 = {};
          if (!t2.get$_isComplete())
            return;
          hasError = t1.source_4.get$_hasError();
          if (hasError && listeners == null) {
            t2 = t1.source_4;
            asyncError = t2.get$_error();
            t2 = t2._zone;
            t3 = J.get$error$x(asyncError);
            t4 = asyncError.get$stackTrace();
            t2.toString;
            P._rootHandleUncaughtError(t2, null, t2, t3, t4);
            return;
          }
          if (listeners == null)
            return;
          if (listeners._nextListener != null) {
            P._Future__propagateMultipleListeners(t1.source_4, listeners);
            return;
          }
          if (hasError) {
            t2 = t1.source_4.get$_zone();
            t4 = listeners._zone;
            t2.toString;
            t4.toString;
            t2 = t4 == null ? t2 != null : t4 !== t2;
          } else
            t2 = false;
          if (t2) {
            t2 = t1.source_4;
            asyncError = t2.get$_error();
            t2 = t2._zone;
            t3 = J.get$error$x(asyncError);
            t4 = asyncError.get$stackTrace();
            t2.toString;
            P._rootHandleUncaughtError(t2, null, t2, t3, t4);
            return;
          }
          t2 = $.Zone__current;
          t4 = listeners._zone;
          if (t2 == null ? t4 != null : t2 !== t4) {
            t4.toString;
            P._rootRun(t4, null, t4, new P._Future__propagateToListeners_closure(t1, listeners));
            return;
          }
          t3.listenerHasValue_1 = null;
          t3.listenerValueOrError_2 = null;
          t3.isPropagationAborted_3 = false;
          t4.toString;
          P._rootRun(t4, null, t4, new P._Future__propagateToListeners_closure0(t1, t3, hasError, listeners));
          if (t3.isPropagationAborted_3)
            return;
          t2 = t3.listenerHasValue_1 === true;
          if (t2) {
            t4 = t3.listenerValueOrError_2;
            t5 = J.getInterceptor(t4);
            t5 = typeof t4 === "object" && t4 !== null && !!t5.$isFuture;
            t4 = t5;
          } else
            t4 = false;
          if (t4) {
            chainSource = t3.listenerValueOrError_2;
            t2 = J.getInterceptor(chainSource);
            if (typeof chainSource === "object" && chainSource !== null && !!t2.$is_Future && chainSource._state >= 4) {
              listeners._state = 2;
              t1.source_4 = chainSource;
              t2 = chainSource;
              continue;
            }
            P._Future__chainFutures(chainSource, listeners);
            return;
          }
          if (t2) {
            listeners0 = listeners._removeListeners$0();
            t2 = t3.listenerValueOrError_2;
            listeners._state = 4;
            listeners._resultOrListeners = t2;
          } else {
            listeners0 = listeners._removeListeners$0();
            asyncError = t3.listenerValueOrError_2;
            t2 = J.get$error$x(asyncError);
            t3 = asyncError.get$stackTrace();
            listeners._state = 8;
            listeners._resultOrListeners = new P._AsyncError(t2, t3);
          }
          t1.source_4 = listeners;
          t2 = listeners;
          listeners = listeners0;
        }
      }}
  },
  _Future__addListener_closure: {
    "": "Closure:11;this_0,listener_1",
    call$0: function() {
      P._Future__propagateToListeners(this.this_0, this.listener_1);
    }
  },
  _Future__chainFutures_closure: {
    "": "Closure:13;target_0",
    call$1: function(value) {
      this.target_0._complete$1(value);
    }
  },
  _Future__chainFutures_closure0: {
    "": "Closure:17;target_1",
    call$2: function(error, stackTrace) {
      this.target_1._completeError$2(error, stackTrace);
    },
    call$1: function(error) {
      return this.call$2(error, null);
    }
  },
  _Future__asyncComplete_closure: {
    "": "Closure:11;this_0,value_1",
    call$0: function() {
      this.this_0._complete$1(this.value_1);
    }
  },
  _Future__propagateToListeners_closure: {
    "": "Closure:11;box_2,listener_3",
    call$0: function() {
      P._Future__propagateToListeners(this.box_2.source_4, this.listener_3);
    }
  },
  _Future__propagateToListeners_closure0: {
    "": "Closure:11;box_2,box_1,hasError_4,listener_5",
    call$0: function() {
      var t1, value, asyncError, test, matchesTest, errorCallback, e, s, t2, t3, t4, t5, completeResult, exception;
      t1 = {};
      try {
        t2 = this.box_2;
        if (!this.hasError_4) {
          value = t2.source_4.get$_async$_value();
          t3 = this.listener_5;
          t4 = t3._state === 2 ? null : t3._onValueCallback;
          t5 = this.box_1;
          if (t4 != null) {
            t5.listenerValueOrError_2 = t3._onValue$1(value);
            t5.listenerHasValue_1 = true;
          } else {
            t5.listenerValueOrError_2 = value;
            t5.listenerHasValue_1 = true;
          }
          t4 = t5;
        } else {
          asyncError = t2.source_4.get$_error();
          t3 = this.listener_5;
          test = t3._state === 2 ? null : t3._errorTestCallback;
          matchesTest = true;
          if (test != null)
            matchesTest = test.call$1(J.get$error$x(asyncError));
          if (matchesTest === true)
            t4 = (t3._state === 2 ? null : t3._onErrorCallback) != null;
          else
            t4 = false;
          if (t4) {
            errorCallback = t3._state === 2 ? null : t3._onErrorCallback;
            t4 = this.box_1;
            t4.listenerValueOrError_2 = P._invokeErrorHandler(errorCallback, J.get$error$x(asyncError), asyncError.get$stackTrace());
            t4.listenerHasValue_1 = true;
          } else {
            t4 = this.box_1;
            t4.listenerValueOrError_2 = asyncError;
            t4.listenerHasValue_1 = false;
          }
        }
        if ((t3._state === 2 ? null : t3._whenCompleteActionCallback) != null) {
          completeResult = t3._whenCompleteAction$0();
          t1.completeResult_0 = completeResult;
          t5 = J.getInterceptor(completeResult);
          if (typeof completeResult === "object" && completeResult !== null && !!t5.$isFuture) {
            t3.set$_isChained(true);
            t1.completeResult_0.then$2$onError(new P._Future__propagateToListeners__closure(t2, t3), new P._Future__propagateToListeners__closure0(t1, t3));
            t4.isPropagationAborted_3 = true;
          }
        }
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        if (this.hasError_4) {
          t1 = J.get$error$x(this.box_2.source_4.get$_error());
          t2 = e;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        t2 = this.box_1;
        if (t1)
          t2.listenerValueOrError_2 = this.box_2.source_4.get$_error();
        else
          t2.listenerValueOrError_2 = new P._AsyncError(e, s);
        t2.listenerHasValue_1 = false;
      }

    }
  },
  _Future__propagateToListeners__closure: {
    "": "Closure:13;box_2,listener_6",
    call$1: function(ignored) {
      P._Future__propagateToListeners(this.box_2.source_4, this.listener_6);
    }
  },
  _Future__propagateToListeners__closure0: {
    "": "Closure:17;box_0,listener_7",
    call$2: function(error, stackTrace) {
      var t1, t2, t3, completeResult;
      t1 = this.box_0;
      t2 = t1.completeResult_0;
      t3 = J.getInterceptor(t2);
      if (typeof t2 !== "object" || t2 === null || !t3.$is_Future) {
        completeResult = P._Future$(null);
        t1.completeResult_0 = completeResult;
        completeResult._setError$2(error, stackTrace);
      }
      P._Future__propagateToListeners(t1.completeResult_0, this.listener_7);
    },
    call$1: function(error) {
      return this.call$2(error, null);
    }
  },
  Stream: {
    "": "Object;",
    forEach$1: function(_, action) {
      var t1, future;
      t1 = {};
      future = P._Future$(null);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
      return future;
    },
    get$length: function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(J.JSInt);
      t1.count_0 = 0;
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    }
  },
  Stream_forEach_closure: {
    "": "Closure;box_0,this_1,action_2,future_3",
    call$1: function(element) {
      P._runUserCode(new P.Stream_forEach__closure(this.action_2, element), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this.box_0.subscription_0, this.future_3));
    },
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_forEach__closure: {
    "": "Closure:11;action_4,element_5",
    call$0: function() {
      return this.action_4.call$1(this.element_5);
    }
  },
  Stream_forEach__closure0: {
    "": "Closure:13;",
    call$1: function(_) {
    }
  },
  Stream_forEach_closure0: {
    "": "Closure:11;future_6",
    call$0: function() {
      this.future_6._complete$1(null);
    }
  },
  Stream_length_closure: {
    "": "Closure:13;box_0",
    call$1: function(_) {
      var t1 = this.box_0;
      t1.count_0 = t1.count_0 + 1;
    }
  },
  Stream_length_closure0: {
    "": "Closure:11;box_0,future_1",
    call$0: function() {
      this.future_1._complete$1(this.box_0.count_0);
    }
  },
  StreamSubscription: {
    "": "Object;"
  },
  _StreamController: {
    "": "Object;",
    get$_pendingEvents: function() {
      if ((this._state & 8) === 0)
        return this._varData;
      return this._varData.get$varData();
    },
    _ensurePendingEvents$0: function() {
      if ((this._state & 8) === 0) {
        var t1 = this._varData;
        if (t1 == null) {
          t1 = new P._StreamImplEvents(null, null, 0);
          this._varData = t1;
        }
        return t1;
      }
      t1 = this._varData.get$varData();
      return t1;
    },
    get$_subscription: function() {
      if ((this._state & 8) !== 0)
        return this._varData.get$varData();
      return this._varData;
    },
    _badEventState$0: function() {
      if ((this._state & 4) !== 0)
        return new P.StateError("Cannot add event after closing");
      return new P.StateError("Cannot add event while adding a stream");
    },
    add$1: [function(_, value) {
      var t1 = this._state;
      if (t1 >= 4)
        throw H.wrapException(this._badEventState$0());
      if ((t1 & 1) !== 0)
        this._sendData$1(value);
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, new P._DelayedData(value, null));
    }, "call$1", "get$add", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__T", void: true, args: [T]};
      }, this.$receiver, "_StreamController");
    }],
    close$0: function(_) {
      var t1, t2;
      t1 = this._state;
      if ((t1 & 4) !== 0)
        return this._doneFuture;
      if (t1 >= 4)
        throw H.wrapException(this._badEventState$0());
      t1 |= 4;
      this._state = t1;
      if (this._doneFuture == null) {
        t2 = P._Future$(null);
        this._doneFuture = t2;
        if ((t1 & 2) !== 0)
          t2._complete$1(null);
      }
      t1 = this._state;
      if ((t1 & 1) !== 0)
        this._sendDone$0();
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, C.C__DelayedDone);
      return this._doneFuture;
    },
    _subscribe$1: function(cancelOnError) {
      var t1, t2, subscription, pendingEvents, addState;
      if ((this._state & 3) !== 0)
        throw H.wrapException(new P.StateError("Stream has already been listened to."));
      t1 = $.Zone__current;
      t2 = cancelOnError ? 1 : 0;
      subscription = H.setRuntimeTypeInfo(new P._ControllerSubscription(this, null, null, null, t1, t2, null, null), [null]);
      pendingEvents = this.get$_pendingEvents();
      t2 = this._state | 1;
      this._state = t2;
      if ((t2 & 8) !== 0) {
        addState = this._varData;
        addState.set$varData(subscription);
        addState.resume$0();
      } else
        this._varData = subscription;
      subscription._setPendingEvents$1(pendingEvents);
      subscription._guardCallback$1(new P._StreamController__subscribe_closure(this));
      return subscription;
    },
    _recordCancel$1: function(subscription) {
      var t1, future;
      if ((this._state & 8) !== 0)
        this._varData.cancel$0();
      this._varData = null;
      this._state = this._state & 4294967286 | 2;
      t1 = new P._StreamController__recordCancel_complete(this);
      future = P._runGuarded(this.get$_onCancel());
      if (future != null)
        future = future.whenComplete$1(t1);
      else
        t1.call$0();
      return future;
    }
  },
  _StreamController__subscribe_closure: {
    "": "Closure:11;this_0",
    call$0: function() {
      P._runGuarded(this.this_0.get$_onListen());
    }
  },
  _StreamController__recordCancel_complete: {
    "": "Closure:0;this_0",
    call$0: function() {
      var t1 = this.this_0._doneFuture;
      if (t1 != null && t1._state === 0)
        t1._asyncComplete$1(null);
    }
  },
  _SyncStreamControllerDispatch: {
    "": "Object;",
    _sendData$1: function(data) {
      this.get$_subscription()._async$_add$1(data);
    },
    _sendDone$0: function() {
      this.get$_subscription()._close$0();
    }
  },
  _AsyncStreamControllerDispatch: {
    "": "Object;",
    _sendData$1: function(data) {
      this.get$_subscription()._addPending$1(new P._DelayedData(data, null));
    },
    _sendDone$0: function() {
      this.get$_subscription()._addPending$1(C.C__DelayedDone);
    }
  },
  _AsyncStreamController: {
    "": "_StreamController__AsyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture"
  },
  _StreamController__AsyncStreamControllerDispatch: {
    "": "_StreamController+_AsyncStreamControllerDispatch;"
  },
  _SyncStreamController: {
    "": "_StreamController__SyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture"
  },
  _StreamController__SyncStreamControllerDispatch: {
    "": "_StreamController+_SyncStreamControllerDispatch;"
  },
  _ControllerStream: {
    "": "_StreamImpl;_async$_controller",
    _createSubscription$1: function(cancelOnError) {
      return this._async$_controller._subscribe$1(cancelOnError);
    },
    get$hashCode: function(_) {
      return (H.Primitives_objectHashCode(this._async$_controller) ^ 892482866) >>> 0;
    },
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      t1 = J.getInterceptor(other);
      if (typeof other !== "object" || other === null || !t1.$is_ControllerStream)
        return false;
      return other._async$_controller === this._async$_controller;
    },
    $is_ControllerStream: true
  },
  _ControllerSubscription: {
    "": "_BufferingStreamSubscription;_async$_controller,_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
    _onCancel$0: function() {
      return this._async$_controller._recordCancel$1(this);
    },
    _onPause$0: [function() {
      var t1 = this._async$_controller;
      if ((t1._state & 8) !== 0)
        t1._varData.pause$0(0);
      P._runGuarded(t1.get$_onPause());
    }, "call$0", "get$_onPause", 0, 0, 0],
    _onResume$0: [function() {
      var t1 = this._async$_controller;
      if ((t1._state & 8) !== 0)
        t1._varData.resume$0();
      P._runGuarded(t1.get$_onResume());
    }, "call$0", "get$_onResume", 0, 0, 0]
  },
  _EventSink: {
    "": "Object;"
  },
  _BufferingStreamSubscription: {
    "": "Object;_onData,_onError,_onDone,_zone<,_state,_cancelFuture,_pending",
    _setPendingEvents$1: function(pendingEvents) {
      if (pendingEvents == null)
        return;
      this._pending = pendingEvents;
      if (!pendingEvents.get$isEmpty(pendingEvents)) {
        this._state = (this._state | 64) >>> 0;
        pendingEvents.schedule$1(this);
      }
    },
    onData$1: function(handleData) {
      this._zone.toString;
      this._onData = handleData;
    },
    onError$1: function(_, handleError) {
      this._onError = P._registerErrorHandler(handleError, this._zone);
    },
    onDone$1: function(handleDone) {
      this._zone.toString;
      this._onDone = handleDone;
    },
    pause$1: function(_, resumeSignal) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      this._state = (t1 + 128 | 4) >>> 0;
      if (t1 < 128 && this._pending != null)
        this._pending.cancelSchedule$0();
      if ((t1 & 4) === 0 && (this._state & 32) === 0)
        this._guardCallback$1(this.get$_onPause());
    },
    pause$0: function($receiver) {
      return this.pause$1($receiver, null);
    },
    resume$0: function() {
      var t1, t2;
      t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 >= 128) {
        t1 -= 128;
        this._state = t1;
        if (t1 < 128) {
          if ((t1 & 64) !== 0) {
            t2 = this._pending;
            t2 = !t2.get$isEmpty(t2);
          } else
            t2 = false;
          if (t2)
            this._pending.schedule$1(this);
          else {
            t1 = (t1 & 4294967291) >>> 0;
            this._state = t1;
            if ((t1 & 32) === 0)
              this._guardCallback$1(this.get$_onResume());
          }
        }
      }
    },
    cancel$0: function() {
      var t1 = (this._state & 4294967279) >>> 0;
      this._state = t1;
      if ((t1 & 8) !== 0)
        return this._cancelFuture;
      this._cancel$0();
      return this._cancelFuture;
    },
    _cancel$0: function() {
      var t1 = (this._state | 8) >>> 0;
      this._state = t1;
      if ((t1 & 64) !== 0)
        this._pending.cancelSchedule$0();
      if ((this._state & 32) === 0)
        this._pending = null;
      this._cancelFuture = this._onCancel$0();
    },
    _async$_add$1: function(data) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendData$1(data);
      else
        this._addPending$1(new P._DelayedData(data, null));
    },
    _close$0: function() {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      t1 = (t1 | 2) >>> 0;
      this._state = t1;
      if (t1 < 32)
        this._sendDone$0();
      else
        this._addPending$1(C.C__DelayedDone);
    },
    _onPause$0: [function() {
    }, "call$0", "get$_onPause", 0, 0, 0],
    _onResume$0: [function() {
    }, "call$0", "get$_onResume", 0, 0, 0],
    _onCancel$0: function() {
    },
    _addPending$1: function($event) {
      var pending, t1;
      pending = this._pending;
      if (pending == null) {
        pending = new P._StreamImplEvents(null, null, 0);
        this._pending = pending;
      }
      pending.add$1(0, $event);
      t1 = this._state;
      if ((t1 & 64) === 0) {
        t1 = (t1 | 64) >>> 0;
        this._state = t1;
        if (t1 < 128)
          this._pending.schedule$1(this);
      }
    },
    _sendData$1: function(data) {
      var t1 = this._state;
      this._state = (t1 | 32) >>> 0;
      this._zone.runUnaryGuarded$2(this._onData, data);
      this._state = (this._state & 4294967263) >>> 0;
      this._checkState$1((t1 & 4) !== 0);
    },
    _sendDone$0: function() {
      var t1, t2, t3;
      t1 = new P._BufferingStreamSubscription__sendDone_sendDone(this);
      this._cancel$0();
      this._state = (this._state | 16) >>> 0;
      t2 = this._cancelFuture;
      t3 = J.getInterceptor(t2);
      if (typeof t2 === "object" && t2 !== null && !!t3.$isFuture)
        t2.whenComplete$1(t1);
      else
        t1.call$0();
    },
    _guardCallback$1: function(callback) {
      var t1 = this._state;
      this._state = (t1 | 32) >>> 0;
      callback.call$0();
      this._state = (this._state & 4294967263) >>> 0;
      this._checkState$1((t1 & 4) !== 0);
    },
    _checkState$1: function(wasInputPaused) {
      var t1, t2, isInputPaused;
      t1 = this._state;
      if ((t1 & 64) !== 0) {
        t2 = this._pending;
        t2 = t2.get$isEmpty(t2);
      } else
        t2 = false;
      if (t2) {
        t1 = (t1 & 4294967231) >>> 0;
        this._state = t1;
        if ((t1 & 4) !== 0)
          if (t1 < 128) {
            t2 = this._pending;
            t2 = t2 == null || t2.get$isEmpty(t2);
          } else
            t2 = false;
        else
          t2 = false;
        if (t2) {
          t1 = (t1 & 4294967291) >>> 0;
          this._state = t1;
        }
      }
      for (; true; wasInputPaused = isInputPaused) {
        if ((t1 & 8) !== 0) {
          this._pending = null;
          return;
        }
        isInputPaused = (t1 & 4) !== 0;
        if (wasInputPaused === isInputPaused)
          break;
        this._state = (t1 ^ 32) >>> 0;
        if (isInputPaused)
          this._onPause$0();
        else
          this._onResume$0();
        t1 = (this._state & 4294967263) >>> 0;
        this._state = t1;
      }
      if ((t1 & 64) !== 0 && t1 < 128)
        this._pending.schedule$1(this);
    },
    static: {"": "_BufferingStreamSubscription__STATE_CANCEL_ON_ERROR,_BufferingStreamSubscription__STATE_CLOSED,_BufferingStreamSubscription__STATE_INPUT_PAUSED,_BufferingStreamSubscription__STATE_CANCELED,_BufferingStreamSubscription__STATE_WAIT_FOR_CANCEL,_BufferingStreamSubscription__STATE_IN_CALLBACK,_BufferingStreamSubscription__STATE_HAS_PENDING,_BufferingStreamSubscription__STATE_PAUSE_COUNT,_BufferingStreamSubscription__STATE_PAUSE_COUNT_SHIFT"}
  },
  _BufferingStreamSubscription__sendDone_sendDone: {
    "": "Closure:0;this_0",
    call$0: function() {
      var t1, t2;
      t1 = this.this_0;
      t2 = t1._state;
      if ((t2 & 16) === 0)
        return;
      t1._state = (t2 | 42) >>> 0;
      t1._zone.runGuarded$1(t1._onDone);
      t1._state = (t1._state & 4294967263) >>> 0;
    }
  },
  _StreamImpl: {
    "": "Stream;",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var subscription = this._createSubscription$1(true === cancelOnError);
      subscription.onData$1(onData);
      subscription.onError$1(0, onError);
      subscription.onDone$1(onDone);
      return subscription;
    },
    _createSubscription$1: function(cancelOnError) {
      var t1, t2;
      t1 = $.Zone__current;
      t2 = cancelOnError ? 1 : 0;
      return new P._BufferingStreamSubscription(null, null, null, t1, t2, null, null);
    }
  },
  _DelayedEvent: {
    "": "Object;next@"
  },
  _DelayedData: {
    "": "_DelayedEvent;value,next",
    perform$1: function(dispatch) {
      dispatch._sendData$1(this.value);
    }
  },
  _DelayedDone: {
    "": "Object;",
    perform$1: function(dispatch) {
      dispatch._sendDone$0();
    },
    get$next: function() {
      return;
    },
    set$next: function(_) {
      throw H.wrapException(P.StateError$("No events after a done."));
    }
  },
  _PendingEvents: {
    "": "Object;",
    schedule$1: function(dispatch) {
      var t1 = this._state;
      if (t1 === 1)
        return;
      if (t1 >= 1) {
        this._state = 1;
        return;
      }
      P.scheduleMicrotask(new P._PendingEvents_schedule_closure(this, dispatch));
      this._state = 1;
    },
    cancelSchedule$0: function() {
      if (this._state === 1)
        this._state = 3;
    }
  },
  _PendingEvents_schedule_closure: {
    "": "Closure:11;this_0,dispatch_1",
    call$0: function() {
      var t1, oldState;
      t1 = this.this_0;
      oldState = t1._state;
      t1._state = 0;
      if (oldState === 3)
        return;
      t1.handleNext$1(this.dispatch_1);
    }
  },
  _StreamImplEvents: {
    "": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
    get$isEmpty: function(_) {
      return this.lastPendingEvent == null;
    },
    add$1: function(_, $event) {
      var t1 = this.lastPendingEvent;
      if (t1 == null) {
        this.lastPendingEvent = $event;
        this.firstPendingEvent = $event;
      } else {
        t1.set$next($event);
        this.lastPendingEvent = $event;
      }
    },
    handleNext$1: function(dispatch) {
      var $event, t1;
      $event = this.firstPendingEvent;
      t1 = $event.get$next();
      this.firstPendingEvent = t1;
      if (t1 == null)
        this.lastPendingEvent = null;
      $event.perform$1(dispatch);
    }
  },
  _cancelAndError_closure: {
    "": "Closure:11;future_0,error_1,stackTrace_2",
    call$0: function() {
      return this.future_0._completeError$2(this.error_1, this.stackTrace_2);
    }
  },
  _cancelAndErrorClosure_closure: {
    "": "Closure:18;subscription_0,future_1",
    call$2: function(error, stackTrace) {
      return P._cancelAndError(this.subscription_0, this.future_1, error, stackTrace);
    }
  },
  Timer: {
    "": "Object;"
  },
  _BaseZone: {
    "": "Object;",
    runGuarded$1: function(f) {
      var e, s, t1, exception;
      try {
        t1 = this.run$1(f);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return this.handleUncaughtError$2(e, s);
      }

    },
    runUnaryGuarded$2: function(f, arg) {
      var e, s, t1, exception;
      try {
        t1 = this.runUnary$2(f, arg);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return this.handleUncaughtError$2(e, s);
      }

    },
    bindCallback$2$runGuarded: function(f, runGuarded) {
      var registered = this.registerCallback$1(f);
      if (runGuarded)
        return new P._BaseZone_bindCallback_closure(this, registered);
      else
        return new P._BaseZone_bindCallback_closure0(this, registered);
    },
    bindCallback$1: function(f) {
      return this.bindCallback$2$runGuarded(f, true);
    },
    bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
      var registered = this.registerUnaryCallback$1(f);
      if (runGuarded)
        return new P._BaseZone_bindUnaryCallback_closure(this, registered);
      else
        return new P._BaseZone_bindUnaryCallback_closure0(this, registered);
    },
    bindUnaryCallback$1: function(f) {
      return this.bindUnaryCallback$2$runGuarded(f, true);
    }
  },
  _BaseZone_bindCallback_closure: {
    "": "Closure:11;this_0,registered_1",
    call$0: function() {
      return this.this_0.runGuarded$1(this.registered_1);
    }
  },
  _BaseZone_bindCallback_closure0: {
    "": "Closure:11;this_2,registered_3",
    call$0: function() {
      return this.this_2.run$1(this.registered_3);
    }
  },
  _BaseZone_bindUnaryCallback_closure: {
    "": "Closure:13;this_0,registered_1",
    call$1: function(arg) {
      return this.this_0.runUnaryGuarded$2(this.registered_1, arg);
    }
  },
  _BaseZone_bindUnaryCallback_closure0: {
    "": "Closure:13;this_2,registered_3",
    call$1: function(arg) {
      return this.this_2.runUnary$2(this.registered_3, arg);
    }
  },
  _rootHandleUncaughtError_closure: {
    "": "Closure:11;error_0,stackTrace_1",
    call$0: function() {
      P._scheduleAsyncCallback(new P._rootHandleUncaughtError__closure(this.error_0, this.stackTrace_1));
    }
  },
  _rootHandleUncaughtError__closure: {
    "": "Closure:11;error_2,stackTrace_3",
    call$0: function() {
      var t1, trace, t2;
      t1 = this.error_2;
      P.print("Uncaught Error: " + H.S(t1));
      trace = this.stackTrace_3;
      if (trace == null) {
        t2 = J.getInterceptor(t1);
        t2 = typeof t1 === "object" && t1 !== null && !!t2.$isError;
      } else
        t2 = false;
      if (t2)
        trace = t1.get$stackTrace();
      if (trace != null)
        P.print("Stack Trace: \n" + H.S(trace) + "\n");
      throw H.wrapException(t1);
    }
  },
  _RootZone: {
    "": "_BaseZone;",
    $index: function(_, key) {
      return;
    },
    handleUncaughtError$2: function(error, stackTrace) {
      return P._rootHandleUncaughtError(this, null, this, error, stackTrace);
    },
    run$1: function(f) {
      return P._rootRun(this, null, this, f);
    },
    runUnary$2: function(f, arg) {
      return P._rootRunUnary(this, null, this, f, arg);
    },
    registerCallback$1: function(f) {
      return f;
    },
    registerUnaryCallback$1: function(f) {
      return f;
    }
  }
}],
["dart.collection", "dart:collection", , P, {
  "": "",
  _defaultEquals: [function(a, b) {
    return J.$eq(a, b);
  }, "call$2", "_defaultEquals$closure", 4, 0, 4],
  _defaultHashCode: [function(a) {
    return J.get$hashCode$(a);
  }, "call$1", "_defaultHashCode$closure", 2, 0, 5],
  HashMap_HashMap: function(equals, hashCode, isValidKey, $K, $V) {
    return H.setRuntimeTypeInfo(new P._HashMap(0, null, null, null, null), [$K, $V]);
  },
  HashSet_HashSet$identity: function($E) {
    return H.setRuntimeTypeInfo(new P._IdentityHashSet(0, null, null, null, null), [$E]);
  },
  _iterableToString: function(iterable) {
    var parts, t1;
    if ($.get$_toStringVisiting().contains$1(0, iterable))
      return "(...)";
    $.get$_toStringVisiting().add$1(0, iterable);
    parts = [];
    try {
      P._iterablePartsToStrings(iterable, parts);
    } finally {
      $.get$_toStringVisiting().remove$1(0, iterable);
    }
    t1 = P.StringBuffer$("(");
    t1.writeAll$2(parts, ", ");
    t1.write$1(")");
    return t1._contents;
  },
  _iterablePartsToStrings: function(iterable, parts) {
    var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
    it = iterable.get$iterator(iterable);
    $length = 0;
    count = 0;
    while (true) {
      if (!($length < 80 || count < 3))
        break;
      if (!it.moveNext$0())
        return;
      next = H.S(it.get$current());
      parts.push(next);
      $length += next.length + 2;
      ++count;
    }
    if (!it.moveNext$0()) {
      if (count <= 5)
        return;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      ultimateString = parts.pop();
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      penultimateString = parts.pop();
    } else {
      penultimate = it.get$current();
      ++count;
      if (!it.moveNext$0()) {
        if (count <= 4) {
          parts.push(H.S(penultimate));
          return;
        }
        ultimateString = H.S(penultimate);
        if (0 >= parts.length)
          return H.ioore(parts, 0);
        penultimateString = parts.pop();
        $length += ultimateString.length + 2;
      } else {
        ultimate = it.get$current();
        ++count;
        for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
          ultimate0 = it.get$current();
          ++count;
          if (count > 100) {
            while (true) {
              if (!($length > 75 && count > 3))
                break;
              if (0 >= parts.length)
                return H.ioore(parts, 0);
              $length -= parts.pop().length + 2;
              --count;
            }
            parts.push("...");
            return;
          }
        }
        penultimateString = H.S(penultimate);
        ultimateString = H.S(ultimate);
        $length += ultimateString.length + penultimateString.length + 4;
      }
    }
    if (count > parts.length + 2) {
      $length += 5;
      elision = "...";
    } else
      elision = null;
    while (true) {
      if (!($length > 80 && parts.length > 3))
        break;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      $length -= parts.pop().length + 2;
      if (elision == null) {
        $length += 5;
        elision = "...";
      }
    }
    if (elision != null)
      parts.push(elision);
    parts.push(penultimateString);
    parts.push(ultimateString);
  },
  LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
    return H.setRuntimeTypeInfo(new P._LinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]);
  },
  LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
    return H.setRuntimeTypeInfo(new P._LinkedHashSet(0, null, null, null, null, null, 0), [$E]);
  },
  Maps_mapToString: function(m) {
    var t1, result, i, t2;
    t1 = {};
    for (i = 0; t2 = $.get$Maps__toStringList(), i < t2.length; ++i)
      if (t2[i] === m)
        return "{...}";
    result = P.StringBuffer$("");
    try {
      $.get$Maps__toStringList().push(m);
      result.write$1("{");
      t1.first_0 = true;
      J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
      result.write$1("}");
    } finally {
      t1 = $.get$Maps__toStringList();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    return result.get$_contents();
  },
  _HashMap: {
    "": "Object;_collection$_length,_strings,_nums,_rest,_keys",
    get$length: function(_) {
      return this._collection$_length;
    },
    get$keys: function() {
      return H.setRuntimeTypeInfo(new P.HashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      return H.MappedIterable_MappedIterable(H.setRuntimeTypeInfo(new P.HashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]), new P._HashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    $index: function(_, key) {
      var strings, t1, entry, nums, rest, bucket, index;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          t1 = null;
        else {
          entry = strings[key];
          t1 = entry === strings ? null : entry;
        }
        return t1;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          t1 = null;
        else {
          entry = nums[key];
          t1 = entry === nums ? null : entry;
        }
        return t1;
      } else {
        rest = this._rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(key)];
        index = this._findBucketIndex$2(bucket, key);
        return index < 0 ? null : bucket[index + 1];
      }
    },
    $indexSet: function(_, key, value) {
      var strings, nums, rest, hash, bucket, index;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          strings = P._HashMap__newHashTable();
          this._strings = strings;
        }
        this._addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          nums = P._HashMap__newHashTable();
          this._nums = nums;
        }
        this._addHashTableEntry$3(nums, key, value);
      } else {
        rest = this._rest;
        if (rest == null) {
          rest = P._HashMap__newHashTable();
          this._rest = rest;
        }
        hash = this._computeHashCode$1(key);
        bucket = rest[hash];
        if (bucket == null) {
          P._HashMap__setTableEntry(rest, hash, [key, value]);
          this._collection$_length = this._collection$_length + 1;
          this._keys = null;
        } else {
          index = this._findBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index + 1] = value;
          else {
            bucket.push(key, value);
            this._collection$_length = this._collection$_length + 1;
            this._keys = null;
          }
        }
      }
    },
    forEach$1: function(_, action) {
      var keys, $length, i, key;
      keys = this._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        key = keys[i];
        action.call$2(key, this.$index(0, key));
        if (keys !== this._keys)
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    _computeKeys$0: function() {
      var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
      t1 = this._keys;
      if (t1 != null)
        return t1;
      result = Array(this._collection$_length);
      result.fixed$length = init;
      strings = this._strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = this._nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = this._rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; i0 += 2) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      this._keys = result;
      return result;
    },
    _addHashTableEntry$3: function(table, key, value) {
      if (table[key] == null) {
        this._collection$_length = this._collection$_length + 1;
        this._keys = null;
      }
      P._HashMap__setTableEntry(table, key, value);
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2)
        if (J.$eq(bucket[i], key))
          return i;
      return -1;
    },
    $isMap: true,
    static: {_HashMap__setTableEntry: function(table, key, value) {
        if (value == null)
          table[key] = table;
        else
          table[key] = value;
      }, _HashMap__newHashTable: function() {
        var table = Object.create(null);
        P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  _HashMap_values_closure: {
    "": "Closure:13;this_0",
    call$1: function(each) {
      return this.this_0.$index(0, each);
    }
  },
  HashMapKeyIterable: {
    "": "IterableBase;_map",
    get$length: function(_) {
      return this._map._collection$_length;
    },
    get$iterator: function(_) {
      var t1 = this._map;
      return new P.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null);
    },
    forEach$1: function(_, f) {
      var t1, keys, $length, i;
      t1 = this._map;
      keys = t1._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        f.call$1(keys[i]);
        if (keys !== t1._keys)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
      }
    },
    $isEfficientLength: true
  },
  HashMapKeyIterator: {
    "": "Object;_map,_keys,_offset,_current",
    get$current: function() {
      return this._current;
    },
    moveNext$0: function() {
      var keys, offset, t1;
      keys = this._keys;
      offset = this._offset;
      t1 = this._map;
      if (keys !== t1._keys)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= keys.length) {
        this._current = null;
        return false;
      } else {
        this._current = keys[offset];
        this._offset = offset + 1;
        return true;
      }
    }
  },
  _LinkedHashMap: {
    "": "Object;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$keys: function() {
      return H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      return H.MappedIterable_MappedIterable(H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]), new P._LinkedHashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    containsKey$1: function(key) {
      var nums, rest;
      if ((key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[key] != null;
      } else {
        rest = this._rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
      }
    },
    $index: function(_, key) {
      var strings, cell, nums, rest, bucket, index;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return;
        cell = strings[key];
        return cell == null ? null : cell.get$_value();
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return;
        cell = nums[key];
        return cell == null ? null : cell.get$_value();
      } else {
        rest = this._rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(key)];
        index = this._findBucketIndex$2(bucket, key);
        if (index < 0)
          return;
        return bucket[index].get$_value();
      }
    },
    $indexSet: function(_, key, value) {
      var strings, nums, rest, hash, bucket, index;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          strings = P._LinkedHashMap__newHashTable();
          this._strings = strings;
        }
        this._addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          nums = P._LinkedHashMap__newHashTable();
          this._nums = nums;
        }
        this._addHashTableEntry$3(nums, key, value);
      } else {
        rest = this._rest;
        if (rest == null) {
          rest = P._LinkedHashMap__newHashTable();
          this._rest = rest;
        }
        hash = this._computeHashCode$1(key);
        bucket = rest[hash];
        if (bucket == null)
          rest[hash] = [this._newLinkedCell$2(key, value)];
        else {
          index = this._findBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index].set$_value(value);
          else
            bucket.push(this._newLinkedCell$2(key, value));
        }
      }
    },
    remove$1: function(_, key) {
      var rest, bucket, index, cell;
      if (typeof key === "string" && key !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, key);
      else if (typeof key === "number" && (key & 0x3ffffff) === key)
        return this._removeHashTableEntry$2(this._nums, key);
      else {
        rest = this._rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(key)];
        index = this._findBucketIndex$2(bucket, key);
        if (index < 0)
          return;
        cell = bucket.splice(index, 1)[0];
        this._unlinkCell$1(cell);
        return cell.get$_value();
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$2(cell.get$_key(), cell._value);
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell._collection$_next;
      }
    },
    _addHashTableEntry$3: function(table, key, value) {
      var cell = table[key];
      if (cell == null)
        table[key] = this._newLinkedCell$2(key, value);
      else
        cell.set$_value(value);
    },
    _removeHashTableEntry$2: function(table, key) {
      var cell;
      if (table == null)
        return;
      cell = table[key];
      if (cell == null)
        return;
      this._unlinkCell$1(cell);
      delete table[key];
      return cell.get$_value();
    },
    _newLinkedCell$2: function(key, value) {
      var cell, last;
      cell = new P.LinkedHashMapCell(key, value, null, null);
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell._previous = last;
        last.set$_collection$_next(cell);
        this._last = cell;
      }
      this._collection$_length = this._collection$_length + 1;
      this._modifications = this._modifications + 1 & 67108863;
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var previous, next;
      previous = cell.get$_previous();
      next = cell.get$_collection$_next();
      if (previous == null)
        this._first = next;
      else
        previous.set$_collection$_next(next);
      if (next == null)
        this._last = previous;
      else
        next.set$_previous(previous);
      this._collection$_length = this._collection$_length - 1;
      this._modifications = this._modifications + 1 & 67108863;
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i].get$_key(), key))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    $isMap: true,
    static: {_LinkedHashMap__newHashTable: function() {
        var table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  _LinkedHashMap_values_closure: {
    "": "Closure:13;this_0",
    call$1: function(each) {
      return this.this_0.$index(0, each);
    }
  },
  LinkedHashMapCell: {
    "": "Object;_key<,_value@,_collection$_next@,_previous@"
  },
  LinkedHashMapKeyIterable: {
    "": "IterableBase;_map",
    get$length: function(_) {
      return this._map._collection$_length;
    },
    get$iterator: function(_) {
      var t1, t2;
      t1 = this._map;
      t2 = new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
      t2._cell = t1._first;
      return t2;
    },
    forEach$1: function(_, f) {
      var t1, cell, modifications;
      t1 = this._map;
      cell = t1._first;
      modifications = t1._modifications;
      for (; cell != null;) {
        f.call$1(cell.get$_key());
        if (modifications !== t1._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
        cell = cell._collection$_next;
      }
    },
    $isEfficientLength: true
  },
  LinkedHashMapKeyIterator: {
    "": "Object;_map,_modifications,_cell,_current",
    get$current: function() {
      return this._current;
    },
    moveNext$0: function() {
      var t1 = this._map;
      if (this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._cell;
        if (t1 == null) {
          this._current = null;
          return false;
        } else {
          this._current = t1.get$_key();
          this._cell = t1._collection$_next;
          return true;
        }
      }
    }
  },
  _HashSet: {
    "": "_HashSetBase;",
    get$iterator: function(_) {
      return new P.HashSetIterator(this, this._computeElements$0(), 0, null);
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    contains$1: function(_, object) {
      var strings, nums, rest;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._strings;
        return strings == null ? false : strings[object] != null;
      } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
        nums = this._nums;
        return nums == null ? false : nums[object] != null;
      } else {
        rest = this._rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
      }
    },
    lookup$1: function(object) {
      var t1, rest, bucket, index;
      if (!(typeof object === "string" && object !== "__proto__"))
        t1 = typeof object === "number" && (object & 0x3ffffff) === object;
      else
        t1 = true;
      if (t1)
        return this.contains$1(0, object) ? object : null;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return;
      return J.$index$asx(bucket, index);
    },
    add$1: function(_, element) {
      var rest, table, hash, bucket;
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [element];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(element);
      }
      this._collection$_length = this._collection$_length + 1;
      this._elements = null;
      return true;
    },
    remove$1: function(_, object) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      this._collection$_length = this._collection$_length - 1;
      this._elements = null;
      bucket.splice(index, 1);
      return true;
    },
    _computeElements$0: function() {
      var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
      t1 = this._elements;
      if (t1 != null)
        return t1;
      result = Array(this._collection$_length);
      result.fixed$length = init;
      strings = this._strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = this._nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = this._rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; ++i0) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      this._elements = result;
      return result;
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i], element))
          return i;
      return -1;
    },
    $isEfficientLength: true
  },
  _IdentityHashSet: {
    "": "_HashSet;_collection$_length,_strings,_nums,_rest,_elements",
    _computeHashCode$1: function(key) {
      return H.objectHashCode(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i) {
        t1 = bucket[i];
        if (t1 == null ? element == null : t1 === element)
          return i;
      }
      return -1;
    }
  },
  HashSetIterator: {
    "": "Object;_set,_elements,_offset,_current",
    get$current: function() {
      return this._current;
    },
    moveNext$0: function() {
      var elements, offset, t1;
      elements = this._elements;
      offset = this._offset;
      t1 = this._set;
      if (elements !== t1._elements)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= elements.length) {
        this._current = null;
        return false;
      } else {
        this._current = elements[offset];
        this._offset = offset + 1;
        return true;
      }
    }
  },
  _LinkedHashSet: {
    "": "_HashSetBase;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
    get$iterator: function(_) {
      var t1 = new P.LinkedHashSetIterator(this, this._modifications, null, null);
      t1._cell = this._first;
      return t1;
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    contains$1: function(_, object) {
      var strings, nums, rest;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[object] != null;
      } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[object] != null;
      } else {
        rest = this._rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
      }
    },
    lookup$1: function(object) {
      var t1, rest, bucket, index;
      if (!(typeof object === "string" && object !== "__proto__"))
        t1 = typeof object === "number" && (object & 0x3ffffff) === object;
      else
        t1 = true;
      if (t1)
        return this.contains$1(0, object) ? object : null;
      else {
        rest = this._rest;
        if (rest == null)
          return;
        bucket = rest[this._computeHashCode$1(object)];
        index = this._findBucketIndex$2(bucket, object);
        if (index < 0)
          return;
        return J.$index$asx(bucket, index).get$_collection$_element();
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$1(cell.get$_collection$_element());
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell._collection$_next;
      }
    },
    add$1: function(_, element) {
      var strings, table, nums, rest, hash, bucket;
      if (typeof element === "string" && element !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._strings = table;
          strings = table;
        }
        return this._addHashTableEntry$2(strings, element);
      } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
        nums = this._nums;
        if (nums == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._nums = table;
          nums = table;
        }
        return this._addHashTableEntry$2(nums, element);
      } else {
        rest = this._rest;
        if (rest == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._rest = table;
          rest = table;
        }
        hash = this._computeHashCode$1(element);
        bucket = rest[hash];
        if (bucket == null)
          rest[hash] = [this._newLinkedCell$1(element)];
        else {
          if (this._findBucketIndex$2(bucket, element) >= 0)
            return false;
          bucket.push(this._newLinkedCell$1(element));
        }
        return true;
      }
    },
    addAll$1: function(_, objects) {
      var t1;
      for (t1 = J.get$iterator$ax(objects); t1.moveNext$0();)
        this.add$1(0, t1.__internal$_current);
    },
    _addHashTableEntry$2: function(table, element) {
      if (table[element] != null)
        return false;
      table[element] = this._newLinkedCell$1(element);
      return true;
    },
    _newLinkedCell$1: function(element) {
      var cell, last;
      cell = new P.LinkedHashSetCell(element, null, null);
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell._previous = last;
        last.set$_collection$_next(cell);
        this._last = cell;
      }
      this._collection$_length = this._collection$_length + 1;
      this._modifications = this._modifications + 1 & 67108863;
      return cell;
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i].get$_collection$_element(), element))
          return i;
      return -1;
    },
    $isEfficientLength: true
  },
  LinkedHashSetCell: {
    "": "Object;_collection$_element<,_collection$_next@,_previous@"
  },
  LinkedHashSetIterator: {
    "": "Object;_set,_modifications,_cell,_current",
    get$current: function() {
      return this._current;
    },
    moveNext$0: function() {
      var t1 = this._set;
      if (this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._cell;
        if (t1 == null) {
          this._current = null;
          return false;
        } else {
          this._current = t1.get$_collection$_element();
          this._cell = t1._collection$_next;
          return true;
        }
      }
    }
  },
  _HashSetBase: {
    "": "IterableBase;",
    toString$0: function(_) {
      return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
    },
    $isEfficientLength: true
  },
  IterableBase: {
    "": "Object;",
    forEach$1: function(_, f) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1.get$current());
    },
    toList$1$growable: function(_, growable) {
      return P.List_List$from(this, growable, H.getRuntimeTypeArgument(this, "IterableBase", 0));
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$length: function(_) {
      var it, count;
      it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$single: function(_) {
      var it, result;
      it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(P.StateError$("No elements"));
      result = it.get$current();
      if (it.moveNext$0())
        throw H.wrapException(P.StateError$("More than one element"));
      return result;
    },
    elementAt$1: function(_, index) {
      var t1, remaining, element;
      if (index < 0)
        throw H.wrapException(P.RangeError$value(index));
      for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0();) {
        element = t1.get$current();
        if (remaining === 0)
          return element;
        --remaining;
      }
      throw H.wrapException(P.RangeError$value(index));
    },
    toString$0: function(_) {
      return P._iterableToString(this);
    }
  },
  ListBase: {
    "": "Object+ListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  },
  ListMixin: {
    "": "Object;",
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, this.get$length(receiver), 0, null);
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    forEach$1: function(receiver, action) {
      var $length, i;
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        action.call$1(this.$index(receiver, i));
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    where$1: function(receiver, test) {
      return H.setRuntimeTypeInfo(new H.WhereIterable(receiver, test), [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    },
    toString$0: function(receiver) {
      var result;
      if ($.get$_toStringVisiting().contains$1(0, receiver))
        return "[...]";
      result = P.StringBuffer$("");
      try {
        $.get$_toStringVisiting().add$1(0, receiver);
        result.write$1("[");
        result.writeAll$2(receiver, ", ");
        result.write$1("]");
      } finally {
        $.get$_toStringVisiting().remove$1(0, receiver);
      }
      return result.get$_contents();
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  },
  Maps_mapToString_closure: {
    "": "Closure:12;box_0,result_1",
    call$2: function(k, v) {
      var t1 = this.box_0;
      if (!t1.first_0)
        this.result_1.write$1(", ");
      t1.first_0 = false;
      t1 = this.result_1;
      t1.write$1(k);
      t1.write$1(": ");
      t1.write$1(v);
    }
  },
  ListQueue: {
    "": "IterableBase;_table,_head,_tail,_modificationCount",
    get$iterator: function(_) {
      return new P._ListQueueIterator(this, this._tail, this._modificationCount, this._head, null);
    },
    forEach$1: function(_, action) {
      var modificationCount, i, t1;
      modificationCount = this._modificationCount;
      for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
        t1 = this._table;
        if (i < 0 || i >= t1.length)
          return H.ioore(t1, i);
        action.call$1(t1[i]);
        if (modificationCount !== this._modificationCount)
          H.throwExpression(P.ConcurrentModificationError$(this));
      }
    },
    get$length: function(_) {
      return (this._tail - this._head & this._table.length - 1) >>> 0;
    },
    toString$0: function(_) {
      return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
    },
    addFirst$1: function(element) {
      var t1, t2, t3;
      t1 = this._head;
      t2 = this._table;
      t3 = t2.length;
      t1 = (t1 - 1 & t3 - 1) >>> 0;
      this._head = t1;
      if (t1 < 0 || t1 >= t3)
        return H.ioore(t2, t1);
      t2[t1] = element;
      if (t1 === this._tail)
        this._grow$0();
      this._modificationCount = this._modificationCount + 1;
    },
    removeFirst$0: function() {
      var t1, t2, t3, result;
      t1 = this._head;
      if (t1 === this._tail)
        throw H.wrapException(P.StateError$("No elements"));
      this._modificationCount = this._modificationCount + 1;
      t2 = this._table;
      t3 = t2.length;
      if (t1 >= t3)
        return H.ioore(t2, t1);
      result = t2[t1];
      this._head = (t1 + 1 & t3 - 1) >>> 0;
      return result;
    },
    _add$1: function(element) {
      var t1, t2, t3;
      t1 = this._table;
      t2 = this._tail;
      t3 = t1.length;
      if (t2 < 0 || t2 >= t3)
        return H.ioore(t1, t2);
      t1[t2] = element;
      t3 = (t2 + 1 & t3 - 1) >>> 0;
      this._tail = t3;
      if (this._head === t3)
        this._grow$0();
      this._modificationCount = this._modificationCount + 1;
    },
    _grow$0: function() {
      var t1, newTable, t2, split;
      t1 = Array(this._table.length * 2);
      t1.fixed$length = init;
      newTable = H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
      t1 = this._table;
      t2 = this._head;
      split = t1.length - t2;
      H.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
      t1 = this._head;
      t2 = this._table;
      H.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
      this._head = 0;
      this._tail = this._table.length;
      this._table = newTable;
    },
    ListQueue$1: function(initialCapacity, $E) {
      var t1 = Array(8);
      t1.fixed$length = init;
      this._table = H.setRuntimeTypeInfo(t1, [$E]);
    },
    $isEfficientLength: true,
    static: {"": "ListQueue__INITIAL_CAPACITY"}
  },
  _ListQueueIterator: {
    "": "Object;_queue,_end,_modificationCount,_position,_current",
    get$current: function() {
      return this._current;
    },
    moveNext$0: function() {
      var t1, t2, t3;
      t1 = this._queue;
      if (this._modificationCount !== t1._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(t1));
      t2 = this._position;
      if (t2 === this._end) {
        this._current = null;
        return false;
      }
      t1 = t1._table;
      t3 = t1.length;
      if (t2 >= t3)
        return H.ioore(t1, t2);
      this._current = t1[t2];
      this._position = (t2 + 1 & t3 - 1) >>> 0;
      return true;
    }
  }
}],
["dart.core", "dart:core", , P, {
  "": "",
  _symbolToString: function(symbol) {
    return H.Symbol_getName(symbol);
  },
  Comparable_compare: [function(a, b) {
    return J.compareTo$1$ns(a, b);
  }, "call$2", "Comparable_compare$closure", 4, 0, 6],
  Error_safeToString: function(object) {
    var buffer, t1, i, t2, codeUnit, charCodes;
    if (typeof object === "number" || typeof object === "boolean" || null == object)
      return J.toString$0(object);
    if (typeof object === "string") {
      buffer = new P.StringBuffer("");
      buffer._contents = "\"";
      for (t1 = object.length, i = 0, t2 = "\""; i < t1; ++i) {
        codeUnit = C.JSString_methods.codeUnitAt$1(object, i);
        if (codeUnit <= 31)
          if (codeUnit === 10) {
            t2 = buffer._contents + "\\n";
            buffer._contents = t2;
          } else if (codeUnit === 13) {
            t2 = buffer._contents + "\\r";
            buffer._contents = t2;
          } else if (codeUnit === 9) {
            t2 = buffer._contents + "\\t";
            buffer._contents = t2;
          } else {
            t2 = buffer._contents + "\\x";
            buffer._contents = t2;
            if (codeUnit < 16)
              buffer._contents = t2 + "0";
            else {
              buffer._contents = t2 + "1";
              codeUnit -= 16;
            }
            t2 = codeUnit < 10 ? 48 + codeUnit : 87 + codeUnit;
            charCodes = P.List_List$filled(1, t2, J.JSInt);
            t2 = H.Primitives_stringFromCharCodes(charCodes);
            t2 = buffer._contents + t2;
            buffer._contents = t2;
          }
        else if (codeUnit === 92) {
          t2 = buffer._contents + "\\\\";
          buffer._contents = t2;
        } else if (codeUnit === 34) {
          t2 = buffer._contents + "\\\"";
          buffer._contents = t2;
        } else {
          charCodes = P.List_List$filled(1, codeUnit, J.JSInt);
          t2 = H.Primitives_stringFromCharCodes(charCodes);
          t2 = buffer._contents + t2;
          buffer._contents = t2;
        }
      }
      t1 = t2 + "\"";
      buffer._contents = t1;
      return t1;
    }
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  },
  Exception_Exception: function(message) {
    return new P._ExceptionImplementation(message);
  },
  identical: [function(a, b) {
    return a == null ? b == null : a === b;
  }, "call$2", "identical$closure", 4, 0, 7],
  identityHashCode: [function(object) {
    return H.objectHashCode(object);
  }, "call$1", "identityHashCode$closure", 2, 0, 8],
  List_List$filled: function($length, fill, $E) {
    var result, t1, i;
    result = J.JSArray_JSArray$fixed($length, $E);
    if ($length !== 0 && true)
      for (t1 = result.length, i = 0; i < t1; ++i)
        result[i] = fill;
    return result;
  },
  List_List$from: function(other, growable, $E) {
    var list, t1, $length, fixedList, t2, i, t3;
    list = H.setRuntimeTypeInfo([], [$E]);
    for (t1 = J.get$iterator$ax(other); t1.moveNext$0();)
      list.push(t1.get$current());
    if (growable)
      return list;
    $length = list.length;
    t1 = Array($length);
    t1.fixed$length = init;
    fixedList = H.setRuntimeTypeInfo(t1, [$E]);
    for (t1 = list.length, t2 = fixedList.length, i = 0; i < $length; ++i) {
      if (i >= t1)
        return H.ioore(list, i);
      t3 = list[i];
      if (i >= t2)
        return H.ioore(fixedList, i);
      fixedList[i] = t3;
    }
    return fixedList;
  },
  List_List$generate: function($length, generator, growable, $E) {
    var result, t1, i;
    if (growable) {
      result = H.setRuntimeTypeInfo([], [$E]);
      C.JSArray_methods.set$length(result, $length);
    } else {
      t1 = Array($length);
      t1.fixed$length = init;
      result = H.setRuntimeTypeInfo(t1, [$E]);
    }
    for (i = 0; i < $length; ++i) {
      t1 = generator.call$1(i);
      if (i >= result.length)
        return H.ioore(result, i);
      result[i] = t1;
    }
    return result;
  },
  print: function(object) {
    var line = H.S(object);
    H.printString(line);
  },
  NoSuchMethodError_toString_closure: {
    "": "Closure:19;box_0",
    call$2: function(key, value) {
      var t1 = this.box_0;
      if (t1.i_1 > 0)
        t1.sb_0.write$1(", ");
      t1.sb_0.write$1(P._symbolToString(key));
    }
  },
  Comparable: {
    "": "Object;"
  },
  DateTime: {
    "": "Object;"
  },
  Duration: {
    "": "Object;_duration<",
    $add: function(_, other) {
      return P.Duration$(0, 0, this._duration + other.get$_duration(), 0, 0, 0);
    },
    $sub: function(_, other) {
      return P.Duration$(0, 0, this._duration - other.get$_duration(), 0, 0, 0);
    },
    $mul: function(_, factor) {
      return P.Duration$(0, 0, C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(this._duration * factor)), 0, 0, 0);
    },
    $lt: function(_, other) {
      return this._duration < other.get$_duration();
    },
    $gt: function(_, other) {
      return C.JSInt_methods.$gt(this._duration, other.get$_duration());
    },
    $ge: function(_, other) {
      return C.JSInt_methods.$ge(this._duration, other.get$_duration());
    },
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (typeof other !== "object" || other === null || !t1.$isDuration)
        return false;
      return this._duration === other._duration;
    },
    get$hashCode: function(_) {
      return this._duration & 0x1FFFFFFF;
    },
    compareTo$1: function(_, other) {
      return C.JSInt_methods.compareTo$1(this._duration, other.get$_duration());
    },
    toString$0: function(_) {
      var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
      t1 = new P.Duration_toString_twoDigits();
      t2 = this._duration;
      if (t2 < 0)
        return "-" + H.S(P.Duration$(0, 0, -t2, 0, 0, 0));
      twoDigitMinutes = t1.call$1(C.JSInt_methods.remainder$1(C.JSInt_methods._tdivFast$1(t2, 60000000), 60));
      twoDigitSeconds = t1.call$1(C.JSInt_methods.remainder$1(C.JSInt_methods._tdivFast$1(t2, 1000000), 60));
      sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSInt_methods.remainder$1(t2, 1000000));
      return "" + C.JSInt_methods._tdivFast$1(t2, 3600000000) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
    },
    $isDuration: true,
    static: {"": "Duration_MICROSECONDS_PER_MILLISECOND,Duration_MILLISECONDS_PER_SECOND,Duration_SECONDS_PER_MINUTE,Duration_MINUTES_PER_HOUR,Duration_HOURS_PER_DAY,Duration_MICROSECONDS_PER_SECOND,Duration_MICROSECONDS_PER_MINUTE,Duration_MICROSECONDS_PER_HOUR,Duration_MICROSECONDS_PER_DAY,Duration_MILLISECONDS_PER_MINUTE,Duration_MILLISECONDS_PER_HOUR,Duration_MILLISECONDS_PER_DAY,Duration_SECONDS_PER_HOUR,Duration_SECONDS_PER_DAY,Duration_MINUTES_PER_DAY,Duration_ZERO", Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
        return new P.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
      }}
  },
  Duration_toString_sixDigits: {
    "": "Closure:20;",
    call$1: function(n) {
      if (n >= 100000)
        return "" + n;
      if (n >= 10000)
        return "0" + n;
      if (n >= 1000)
        return "00" + n;
      if (n >= 100)
        return "000" + n;
      if (n >= 10)
        return "0000" + n;
      return "00000" + n;
    }
  },
  Duration_toString_twoDigits: {
    "": "Closure:20;",
    call$1: function(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    }
  },
  Error: {
    "": "Object;",
    get$stackTrace: function() {
      return new H._StackTrace(this.$thrownJsError, null);
    },
    $isError: true
  },
  NullThrownError: {
    "": "Error;",
    toString$0: function(_) {
      return "Throw of null.";
    }
  },
  ArgumentError: {
    "": "Error;message",
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Illegal argument(s): " + H.S(t1);
      return "Illegal argument(s)";
    },
    static: {ArgumentError$: function(message) {
        return new P.ArgumentError(message);
      }}
  },
  RangeError: {
    "": "ArgumentError;message",
    toString$0: function(_) {
      return "RangeError: " + H.S(this.message);
    },
    static: {RangeError$value: function(value) {
        return new P.RangeError("value " + H.S(value));
      }, RangeError$range: function(value, start, end) {
        return new P.RangeError("value " + H.S(value) + " not in range " + start + ".." + H.S(end));
      }}
  },
  UnsupportedError: {
    "": "Error;message",
    toString$0: function(_) {
      return "Unsupported operation: " + this.message;
    },
    static: {UnsupportedError$: function(message) {
        return new P.UnsupportedError(message);
      }}
  },
  UnimplementedError: {
    "": "Error;message",
    toString$0: function(_) {
      var t1 = this.message;
      return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
    },
    $isError: true,
    static: {UnimplementedError$: function(message) {
        return new P.UnimplementedError(message);
      }}
  },
  StateError: {
    "": "Error;message",
    toString$0: function(_) {
      return "Bad state: " + this.message;
    },
    static: {StateError$: function(message) {
        return new P.StateError(message);
      }}
  },
  ConcurrentModificationError: {
    "": "Error;modifiedObject",
    toString$0: function(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
    },
    static: {ConcurrentModificationError$: function(modifiedObject) {
        return new P.ConcurrentModificationError(modifiedObject);
      }}
  },
  StackOverflowError: {
    "": "Object;",
    toString$0: function(_) {
      return "Stack Overflow";
    },
    get$stackTrace: function() {
      return;
    },
    $isError: true
  },
  CyclicInitializationError: {
    "": "Error;variableName",
    toString$0: function(_) {
      return "Reading static variable '" + this.variableName + "' during its initialization";
    },
    static: {CyclicInitializationError$: function(variableName) {
        return new P.CyclicInitializationError(variableName);
      }}
  },
  _ExceptionImplementation: {
    "": "Object;message",
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 == null)
        return "Exception";
      return "Exception: " + H.S(t1);
    }
  },
  Expando: {
    "": "Object;name",
    toString$0: function(_) {
      return "Expando:" + H.S(this.name);
    },
    $index: function(_, object) {
      var values = H.Primitives_getProperty(object, "expando$values");
      return values == null ? null : H.Primitives_getProperty(values, this._getKey$0());
    },
    $indexSet: function(_, object, value) {
      var values = H.Primitives_getProperty(object, "expando$values");
      if (values == null) {
        values = new P.Object();
        H.Primitives_setProperty(object, "expando$values", values);
      }
      H.Primitives_setProperty(values, this._getKey$0(), value);
    },
    _getKey$0: function() {
      var key, t1;
      key = H.Primitives_getProperty(this, "expando$key");
      if (key == null) {
        t1 = $.Expando__keyCount;
        $.Expando__keyCount = t1 + 1;
        key = "expando$key$" + t1;
        H.Primitives_setProperty(this, "expando$key", key);
      }
      return key;
    },
    static: {"": "Expando__KEY_PROPERTY_NAME,Expando__EXPANDO_PROPERTY_NAME,Expando__keyCount"}
  },
  Iterator: {
    "": "Object;"
  },
  Null: {
    "": "Object;",
    toString$0: function(_) {
      return "null";
    }
  },
  Object: {
    "": ";",
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return H.Primitives_objectToString(this);
    }
  },
  StackTrace: {
    "": "Object;"
  },
  Stopwatch: {
    "": "Object;_start,_stop",
    start$0: function(_) {
      var t1, t2, t3;
      t1 = this._start == null;
      if (!t1 && this._stop == null)
        return;
      if (t1)
        this._start = H.Primitives_numMicroseconds();
      else {
        t1 = H.Primitives_numMicroseconds();
        t2 = this._stop;
        t3 = this._start;
        if (typeof t2 !== "number")
          return t2.$sub();
        if (typeof t3 !== "number")
          return H.iae(t3);
        this._start = t1 - (t2 - t3);
        this._stop = null;
      }
    },
    reset$0: function(_) {
      var t1;
      if (this._start == null)
        return;
      t1 = H.Primitives_numMicroseconds();
      this._start = t1;
      if (this._stop != null)
        this._stop = t1;
    },
    get$elapsedTicks: function() {
      var t1, t2;
      t1 = this._start;
      if (t1 == null)
        return 0;
      t2 = this._stop;
      if (t2 == null) {
        t1 = H.Primitives_numMicroseconds();
        t2 = this._start;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = t1 - t2;
        t1 = t2;
      } else {
        if (typeof t2 !== "number")
          return t2.$sub();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = t2 - t1;
      }
      return t1;
    }
  },
  StringBuffer: {
    "": "Object;_contents<",
    get$length: function(_) {
      return this._contents.length;
    },
    write$1: function(obj) {
      var str = typeof obj === "string" ? obj : H.S(obj);
      this._contents = this._contents + str;
    },
    writeAll$2: function(objects, separator) {
      var iterator, str;
      iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return;
      if (separator.length === 0)
        do {
          str = iterator.get$current();
          str = typeof str === "string" ? str : H.S(str);
          this._contents = this._contents + str;
        } while (iterator.moveNext$0());
      else {
        this.write$1(iterator.get$current());
        for (; iterator.moveNext$0();) {
          this._contents = this._contents + separator;
          str = iterator.get$current();
          str = typeof str === "string" ? str : H.S(str);
          this._contents = this._contents + str;
        }
      }
    },
    toString$0: function(_) {
      return this._contents;
    },
    StringBuffer$1: function($content) {
      this._contents = $content;
    },
    static: {StringBuffer$: function($content) {
        var t1 = new P.StringBuffer("");
        t1.StringBuffer$1($content);
        return t1;
      }}
  },
  Symbol: {
    "": "Object;"
  }
}],
["dart.dom.html", "dart:html", , W, {
  "": "",
  Element_Element$html: function(html, treeSanitizer, validator) {
    var fragment, t1;
    fragment = J.createFragment$3$treeSanitizer$validator$x(document.body, html, treeSanitizer, validator);
    fragment.toString;
    t1 = new W._ChildNodeListLazy(fragment);
    t1 = t1.where$1(t1, new W.Element_Element$html_closure());
    return t1.get$single(t1);
  },
  _ElementFactoryProvider_createElement_tag: function(tag, typeExtension) {
    return document.createElement(tag);
  },
  Window__isDartLocation: function(thing) {
    var t1, t2, exception;
    try {
      t1 = thing;
      t2 = J.getInterceptor(t1);
      return typeof t1 === "object" && t1 !== null && !!t2.$isLocation;
    } catch (exception) {
      H.unwrapException(exception);
      return false;
    }

  },
  _wrapZone: function(callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone)
      return callback;
    return t1.bindUnaryCallback$2$runGuarded(callback, true);
  },
  HtmlElement: {
    "": "Element;",
    "%": "HTMLAppletElement|HTMLBRElement|HTMLBaseFontElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDirectoryElement|HTMLDivElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLImageElement|HTMLLabelElement|HTMLLegendElement|HTMLMarqueeElement|HTMLMenuElement|HTMLModElement|HTMLOListElement|HTMLOptGroupElement|HTMLParagraphElement|HTMLPreElement|HTMLQuoteElement|HTMLScriptElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableHeaderCellElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement;HTMLElement"
  },
  AnchorElement: {
    "": "HtmlElement;hostname=,href},port=,protocol=",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "HTMLAnchorElement"
  },
  AreaElement: {
    "": "HtmlElement;hostname=,href},port=,protocol=",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "HTMLAreaElement"
  },
  BaseElement: {
    "": "HtmlElement;href}",
    "%": "HTMLBaseElement"
  },
  BodyElement: {
    "": "HtmlElement;",
    $isBodyElement: true,
    "%": "HTMLBodyElement"
  },
  ButtonElement: {
    "": "HtmlElement;name=,value=",
    "%": "HTMLButtonElement"
  },
  CanvasElement: {
    "": "HtmlElement;",
    getContext$2: function(receiver, contextId, attrs) {
      return receiver.getContext(contextId);
    },
    getContext$1: function($receiver, contextId) {
      return this.getContext$2($receiver, contextId, null);
    },
    $isCanvasElement: true,
    "%": "HTMLCanvasElement"
  },
  CanvasRenderingContext: {
    "": "Interceptor;",
    "%": "WebGLRenderingContext;CanvasRenderingContext"
  },
  CanvasRenderingContext2D: {
    "": "CanvasRenderingContext;fillStyle},font},textAlign}",
    beginPath$0: function(receiver) {
      return receiver.beginPath();
    },
    clearRect$4: function(receiver, x, y, width, height) {
      return receiver.clearRect(x, y, width, height);
    },
    closePath$0: function(receiver) {
      return receiver.closePath();
    },
    fill$1: function(receiver, winding) {
      return receiver.fill(winding);
    },
    fill$0: function($receiver) {
      return $receiver.fill();
    },
    lineTo$2: function(receiver, x, y) {
      return receiver.lineTo(x, y);
    },
    moveTo$2: function(receiver, x, y) {
      return receiver.moveTo(x, y);
    },
    stroke$0: function(receiver) {
      return receiver.stroke();
    },
    setFillColorRgb$4: function(receiver, r, g, b, a) {
      receiver.fillStyle = "rgba(" + H.S(r) + ", " + H.S(g) + ", " + b + ", " + H.S(a) + ")";
    },
    setStrokeColorRgb$4: function(receiver, r, g, b, a) {
      receiver.strokeStyle = "rgba(" + H.S(r) + ", " + H.S(g) + ", " + b + ", " + H.S(a) + ")";
    },
    arc$6: function(receiver, x, y, radius, startAngle, endAngle, anticlockwise) {
      receiver.arc(x, y, radius, startAngle, endAngle, anticlockwise);
    },
    fillText$4: function(receiver, text, x, y, maxWidth) {
      receiver.fillText(text, x, y);
    },
    fillText$3: function($receiver, text, x, y) {
      return this.fillText$4($receiver, text, x, y, null);
    },
    "%": "CanvasRenderingContext2D"
  },
  CharacterData: {
    "": "Node;length=",
    "%": "CDATASection|CharacterData|Comment|ProcessingInstruction|Text"
  },
  Document: {
    "": "Node;",
    "%": "SVGDocument;Document"
  },
  DomException: {
    "": "Interceptor;",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "DOMException"
  },
  Element: {
    "": "Node;",
    get$attributes: function(receiver) {
      return new W._ElementAttributeMap(receiver);
    },
    toString$0: function(receiver) {
      return receiver.localName;
    },
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var t1, t2, base, contextElement, fragment;
      if (treeSanitizer == null) {
        t1 = $.Element__defaultValidator;
        if (t1 == null) {
          t1 = H.setRuntimeTypeInfo([], [W.NodeValidator]);
          t2 = new W.NodeValidatorBuilder(t1);
          t1.push(W._Html5NodeValidator$(null));
          t1.push(W._TemplatingNodeValidator$());
          $.Element__defaultValidator = t2;
          validator = t2;
        } else
          validator = t1;
        t1 = $.Element__defaultSanitizer;
        if (t1 == null) {
          t1 = new W._ValidatingTreeSanitizer(validator);
          $.Element__defaultSanitizer = t1;
          treeSanitizer = t1;
        } else {
          t1.validator = validator;
          treeSanitizer = t1;
        }
      }
      if ($.Element__parseDocument == null) {
        t1 = document.implementation.createHTMLDocument("");
        $.Element__parseDocument = t1;
        $.Element__parseRange = t1.createRange();
        base = $.Element__parseDocument.createElement("base", null);
        J.set$href$x(base, document.baseURI);
        $.Element__parseDocument.head.appendChild(base);
      }
      t1 = $.Element__parseDocument;
      if (!!this.$isBodyElement)
        contextElement = t1.body;
      else {
        contextElement = t1.createElement(receiver.tagName, null);
        $.Element__parseDocument.body.appendChild(contextElement);
      }
      if ("createContextualFragment" in window.Range.prototype) {
        $.Element__parseRange.selectNodeContents(contextElement);
        fragment = $.Element__parseRange.createContextualFragment(html);
      } else {
        contextElement.innerHTML = html;
        fragment = $.Element__parseDocument.createDocumentFragment();
        for (; t1 = contextElement.firstChild, t1 != null;)
          fragment.appendChild(t1);
      }
      t1 = $.Element__parseDocument.body;
      if (contextElement == null ? t1 != null : contextElement !== t1)
        J.remove$0$ax(contextElement);
      treeSanitizer.sanitizeTree$1(fragment);
      document.adoptNode(fragment);
      return fragment;
    },
    createFragment$2$treeSanitizer: function($receiver, html, treeSanitizer) {
      return this.createFragment$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
    },
    set$innerHtml: function(receiver, html) {
      this.setInnerHtml$1(receiver, html);
    },
    setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      receiver.textContent = null;
      receiver.appendChild(this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator));
    },
    setInnerHtml$1: function($receiver, html) {
      return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, null);
    },
    $isElement: true,
    "%": ";Element"
  },
  EmbedElement: {
    "": "HtmlElement;name=",
    "%": "HTMLEmbedElement"
  },
  ErrorEvent: {
    "": "Event;error=",
    "%": "ErrorEvent"
  },
  Event: {
    "": "Interceptor;",
    "%": "AudioProcessingEvent|AutocompleteErrorEvent|BeforeLoadEvent|BeforeUnloadEvent|CSSFontFaceLoadEvent|CloseEvent|CompositionEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|DragEvent|FocusEvent|HashChangeEvent|IDBVersionChangeEvent|KeyboardEvent|MIDIConnectionEvent|MIDIMessageEvent|MSPointerEvent|MediaKeyEvent|MediaKeyMessageEvent|MediaKeyNeededEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MouseEvent|MouseScrollEvent|MouseWheelEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PointerEvent|PopStateEvent|ProgressEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|ResourceProgressEvent|SVGZoomEvent|SecurityPolicyViolationEvent|SpeechInputEvent|SpeechRecognitionEvent|SpeechSynthesisEvent|StorageEvent|TextEvent|TouchEvent|TrackEvent|TransitionEvent|UIEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent|WheelEvent|XMLHttpRequestProgressEvent;Event"
  },
  EventTarget: {
    "": "Interceptor;",
    "%": "MediaStream;EventTarget"
  },
  FieldSetElement: {
    "": "HtmlElement;name=",
    "%": "HTMLFieldSetElement"
  },
  FormElement: {
    "": "HtmlElement;length=,name=",
    "%": "HTMLFormElement"
  },
  HtmlDocument: {
    "": "Document;body=",
    "%": "HTMLDocument"
  },
  IFrameElement: {
    "": "HtmlElement;name=",
    "%": "HTMLIFrameElement"
  },
  InputElement: {
    "": "HtmlElement;name=,value=",
    $isElement: true,
    "%": "HTMLInputElement"
  },
  KeygenElement: {
    "": "HtmlElement;name=",
    "%": "HTMLKeygenElement"
  },
  LIElement: {
    "": "HtmlElement;value=",
    "%": "HTMLLIElement"
  },
  LinkElement: {
    "": "HtmlElement;href}",
    "%": "HTMLLinkElement"
  },
  Location: {
    "": "Interceptor;hostname=,port=,protocol=",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    $isLocation: true,
    "%": "Location"
  },
  MapElement: {
    "": "HtmlElement;name=",
    "%": "HTMLMapElement"
  },
  MediaElement: {
    "": "HtmlElement;error=",
    "%": "HTMLAudioElement|HTMLMediaElement|HTMLVideoElement"
  },
  MetaElement: {
    "": "HtmlElement;name=",
    "%": "HTMLMetaElement"
  },
  MeterElement: {
    "": "HtmlElement;value=",
    "%": "HTMLMeterElement"
  },
  MidiOutput: {
    "": "MidiPort;",
    send$2: function(receiver, data, timestamp) {
      return receiver.send(data, timestamp);
    },
    send$1: function($receiver, data) {
      return $receiver.send(data);
    },
    "%": "MIDIOutput"
  },
  MidiPort: {
    "": "EventTarget;",
    "%": "MIDIInput;MIDIPort"
  },
  Node: {
    "": "EventTarget;",
    get$nodes: function(receiver) {
      return new W._ChildNodeListLazy(receiver);
    },
    remove$0: function(receiver) {
      var t1 = receiver.parentNode;
      if (t1 != null)
        t1.removeChild(receiver);
    },
    toString$0: function(receiver) {
      var t1 = receiver.nodeValue;
      return t1 == null ? J.Interceptor.prototype.toString$0.call(this, receiver) : t1;
    },
    "%": "DocumentFragment|DocumentType|Entity|Notation|ShadowRoot;Node"
  },
  NodeList: {
    "": "Interceptor_ListMixin_ImmutableListMixin;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isJavaScriptIndexingBehavior: true,
    "%": "NodeList|RadioNodeList"
  },
  ObjectElement: {
    "": "HtmlElement;name=",
    "%": "HTMLObjectElement"
  },
  OptionElement: {
    "": "HtmlElement;value=",
    "%": "HTMLOptionElement"
  },
  OutputElement: {
    "": "HtmlElement;name=,value=",
    "%": "HTMLOutputElement"
  },
  ParamElement: {
    "": "HtmlElement;name=,value=",
    "%": "HTMLParamElement"
  },
  ProgressElement: {
    "": "HtmlElement;position=,value=",
    "%": "HTMLProgressElement"
  },
  Range: {
    "": "Interceptor;",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "Range"
  },
  SelectElement: {
    "": "HtmlElement;length=,name=,value=",
    "%": "HTMLSelectElement"
  },
  SpeechRecognitionError: {
    "": "Event;error=",
    "%": "SpeechRecognitionError"
  },
  TableElement: {
    "": "HtmlElement;",
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var table, fragment;
      if ("createContextualFragment" in window.Range.prototype)
        return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
      table = W.Element_Element$html("<table>" + html + "</table>", treeSanitizer, validator);
      fragment = document.createDocumentFragment();
      fragment.toString;
      new W._ChildNodeListLazy(fragment).addAll$1(0, J.get$nodes$x(table));
      return fragment;
    },
    "%": "HTMLTableElement"
  },
  TableRowElement: {
    "": "HtmlElement;",
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var fragment, t1, section, row;
      if ("createContextualFragment" in window.Range.prototype)
        return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
      fragment = document.createDocumentFragment();
      t1 = J.createFragment$3$treeSanitizer$validator$x(document.createElement("table", null), html, treeSanitizer, validator);
      t1.toString;
      t1 = new W._ChildNodeListLazy(t1);
      section = t1.get$single(t1);
      section.toString;
      t1 = new W._ChildNodeListLazy(section);
      row = t1.get$single(t1);
      fragment.toString;
      row.toString;
      new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(row));
      return fragment;
    },
    "%": "HTMLTableRowElement"
  },
  TableSectionElement: {
    "": "HtmlElement;",
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var fragment, t1, section;
      if ("createContextualFragment" in window.Range.prototype)
        return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
      fragment = document.createDocumentFragment();
      t1 = J.createFragment$3$treeSanitizer$validator$x(document.createElement("table", null), html, treeSanitizer, validator);
      t1.toString;
      t1 = new W._ChildNodeListLazy(t1);
      section = t1.get$single(t1);
      fragment.toString;
      section.toString;
      new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(section));
      return fragment;
    },
    "%": "HTMLTableSectionElement"
  },
  TemplateElement: {
    "": "HtmlElement;",
    setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var fragment;
      receiver.textContent = null;
      fragment = this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator);
      receiver.content.appendChild(fragment);
    },
    setInnerHtml$1: function($receiver, html) {
      return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, null);
    },
    $isTemplateElement: true,
    "%": "HTMLTemplateElement"
  },
  TextAreaElement: {
    "": "HtmlElement;name=,value=",
    "%": "HTMLTextAreaElement"
  },
  Window: {
    "": "EventTarget;",
    get$location: function(receiver) {
      var result = receiver.location;
      if (W.Window__isDartLocation(result) === true)
        return result;
      if (null == receiver._location_wrapper)
        receiver._location_wrapper = new W._LocationWrapper(result);
      return receiver._location_wrapper;
    },
    _requestAnimationFrame$1: function(receiver, callback) {
      return receiver.requestAnimationFrame(H.convertDartClosureToJS(callback, 1));
    },
    _ensureRequestAnimationFrame$0: function(receiver) {
      if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
        return;
        (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(receiver);
    },
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "DOMWindow|Window"
  },
  _Attr: {
    "": "Node;name=,value=",
    "%": "Attr"
  },
  _NamedNodeMap: {
    "": "Interceptor_ListMixin_ImmutableListMixin0;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isJavaScriptIndexingBehavior: true,
    "%": "MozNamedAttrMap|NamedNodeMap"
  },
  Console: {
    "": "Object;",
    error$1: [function(_, arg) {
      return typeof console != "undefined" ? console.error(arg) : null;
    }, "call$1", "get$error", 2, 0, 21],
    static: {"": "Console__safeConsole"}
  },
  Element_Element$html_closure: {
    "": "Closure:13;",
    call$1: function(e) {
      var t1 = J.getInterceptor(e);
      return typeof e === "object" && e !== null && !!t1.$isElement;
    }
  },
  _ChildNodeListLazy: {
    "": "ListBase;_this",
    get$single: function(_) {
      var t1, l;
      t1 = this._this;
      l = t1.childNodes.length;
      if (l === 0)
        throw H.wrapException(P.StateError$("No elements"));
      if (l > 1)
        throw H.wrapException(P.StateError$("More than one element"));
      return t1.firstChild;
    },
    addAll$1: function(_, iterable) {
      var t1, t2, len, i;
      t1 = iterable._this;
      t2 = this._this;
      if (t1 !== t2)
        for (len = t1.childNodes.length, i = 0; i < len; ++i)
          t2.appendChild(t1.firstChild);
      return;
    },
    $indexSet: function(_, index, value) {
      var t1, t2;
      t1 = this._this;
      t2 = t1.childNodes;
      if (index >>> 0 !== index || index >= t2.length)
        return H.ioore(t2, index);
      t1.replaceChild(value, t2[index]);
    },
    get$iterator: function(_) {
      return C.NodeList_methods.get$iterator(this._this.childNodes);
    },
    get$length: function(_) {
      return this._this.childNodes.length;
    },
    $index: function(_, index) {
      var t1 = this._this.childNodes;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $asListBase: function() {
      return [W.Node];
    },
    $asList: function() {
      return [W.Node];
    }
  },
  Interceptor_ListMixin: {
    "": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin: {
    "": "Interceptor_ListMixin+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin0: {
    "": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin0: {
    "": "Interceptor_ListMixin0+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true
  },
  _AttributeMap: {
    "": "Object;",
    forEach$1: function(_, f) {
      var t1, key;
      for (t1 = this.get$keys(), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        key = t1.__internal$_current;
        f.call$2(key, this.$index(0, key));
      }
    },
    get$keys: function() {
      var attributes, keys, len, i, t1;
      attributes = this._element.attributes;
      keys = H.setRuntimeTypeInfo([], [J.JSString]);
      for (len = attributes.length, i = 0; i < len; ++i) {
        if (i >= attributes.length)
          return H.ioore(attributes, i);
        t1 = attributes[i];
        if (this._matches$1(t1))
          keys.push(J.get$name$x(t1));
      }
      return keys;
    },
    get$values: function(_) {
      var attributes, values, len, i, t1;
      attributes = this._element.attributes;
      values = H.setRuntimeTypeInfo([], [J.JSString]);
      for (len = attributes.length, i = 0; i < len; ++i) {
        if (i >= attributes.length)
          return H.ioore(attributes, i);
        t1 = attributes[i];
        if (this._matches$1(t1))
          values.push(J.get$value$x(t1));
      }
      return values;
    },
    $isMap: true,
    $asMap: function() {
      return [J.JSString, J.JSString];
    }
  },
  _ElementAttributeMap: {
    "": "_AttributeMap;_element",
    $index: function(_, key) {
      return this._element.getAttribute(key);
    },
    $indexSet: function(_, key, value) {
      this._element.setAttribute(key, value);
    },
    get$length: function(_) {
      return this.get$keys().length;
    },
    _matches$1: function(node) {
      return node.namespaceURI == null;
    }
  },
  _Html5NodeValidator: {
    "": "Object;uriPolicy<",
    allowsElement$1: function(element) {
      return $.get$_Html5NodeValidator__allowedElements().contains$1(0, element.tagName);
    },
    allowsAttribute$3: function(element, attributeName, value) {
      var tagName, t1, validator;
      tagName = element.tagName;
      t1 = $.get$_Html5NodeValidator__attributeValidators();
      validator = t1.$index(0, tagName + "::" + attributeName);
      if (validator == null)
        validator = t1.$index(0, "*::" + attributeName);
      if (validator == null)
        return false;
      return validator.call$4(element, attributeName, value, this);
    },
    _Html5NodeValidator$1$uriPolicy: function(uriPolicy) {
      var t1, t2;
      t1 = $.get$_Html5NodeValidator__attributeValidators();
      if (t1.get$isEmpty(t1)) {
        for (t2 = new H.ListIterator(C.List_1GN, 261, 0, null); t2.moveNext$0();)
          t1.$indexSet(0, t2.__internal$_current, W._Html5NodeValidator__standardAttributeValidator$closure());
        for (t2 = new H.ListIterator(C.List_yrN, 12, 0, null); t2.moveNext$0();)
          t1.$indexSet(0, t2.__internal$_current, W._Html5NodeValidator__uriAttributeValidator$closure());
      }
    },
    static: {"": "_Html5NodeValidator__allowedElements,_Html5NodeValidator__standardAttributes,_Html5NodeValidator__uriAttributes,_Html5NodeValidator__attributeValidators", _Html5NodeValidator$: function(uriPolicy) {
        var e, t1;
        e = document.createElement("a", null);
        t1 = new W._SameOriginUriPolicy(e, C.Window_methods.get$location(window));
        t1 = new W._Html5NodeValidator(t1);
        t1._Html5NodeValidator$1$uriPolicy(uriPolicy);
        return t1;
      }, _Html5NodeValidator__standardAttributeValidator: [function(element, attributeName, value, context) {
        return true;
      }, "call$4", "_Html5NodeValidator__standardAttributeValidator$closure", 8, 0, 9], _Html5NodeValidator__uriAttributeValidator: [function(element, attributeName, value, context) {
        var t1, t2, t3, t4, t5, t6;
        t1 = context.get$uriPolicy();
        t2 = t1._hiddenAnchor;
        t3 = J.getInterceptor$x(t2);
        t3.set$href(t2, value);
        t4 = t3.get$hostname(t2);
        t1 = t1._loc;
        t5 = J.getInterceptor$x(t1);
        t6 = t5.get$hostname(t1);
        if (t4 == null ? t6 == null : t4 === t6) {
          t4 = t3.get$port(t2);
          t6 = t5.get$port(t1);
          if (t4 == null ? t6 == null : t4 === t6) {
            t4 = t3.get$protocol(t2);
            t1 = t5.get$protocol(t1);
            t1 = t4 == null ? t1 == null : t4 === t1;
          } else
            t1 = false;
        } else
          t1 = false;
        if (!t1)
          t1 = t3.get$hostname(t2) === "" && t3.get$port(t2) === "" && t3.get$protocol(t2) === ":";
        else
          t1 = true;
        return t1;
      }, "call$4", "_Html5NodeValidator__uriAttributeValidator$closure", 8, 0, 9]}
  },
  ImmutableListMixin: {
    "": "Object;",
    get$iterator: function(receiver) {
      return new W.FixedSizeListIterator(receiver, this.get$length(receiver), -1, null);
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  },
  NodeValidatorBuilder: {
    "": "Object;_validators",
    allowsElement$1: function(element) {
      return H.IterableMixinWorkaround_any(this._validators, new W.NodeValidatorBuilder_allowsElement_closure(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      return H.IterableMixinWorkaround_any(this._validators, new W.NodeValidatorBuilder_allowsAttribute_closure(element, attributeName, value));
    }
  },
  NodeValidatorBuilder_allowsElement_closure: {
    "": "Closure:13;element_0",
    call$1: function(v) {
      return v.allowsElement$1(this.element_0);
    }
  },
  NodeValidatorBuilder_allowsAttribute_closure: {
    "": "Closure:13;element_0,attributeName_1,value_2",
    call$1: function(v) {
      return v.allowsAttribute$3(this.element_0, this.attributeName_1, this.value_2);
    }
  },
  _SimpleNodeValidator: {
    "": "Object;uriPolicy<",
    allowsElement$1: function(element) {
      return this.allowedElements.contains$1(0, element.tagName);
    },
    allowsAttribute$3: function(element, attributeName, value) {
      var tagName, t1;
      tagName = element.tagName;
      t1 = this.allowedUriAttributes;
      if (t1.contains$1(0, tagName + "::" + attributeName))
        return this.uriPolicy.allowsUri$1(value);
      else if (t1.contains$1(0, "*::" + attributeName))
        return this.uriPolicy.allowsUri$1(value);
      else {
        t1 = this.allowedAttributes;
        if (t1.contains$1(0, tagName + "::" + attributeName))
          return true;
        else if (t1.contains$1(0, "*::" + attributeName))
          return true;
        else if (t1.contains$1(0, tagName + "::*"))
          return true;
        else if (t1.contains$1(0, "*::*"))
          return true;
      }
      return false;
    }
  },
  _TemplatingNodeValidator: {
    "": "_SimpleNodeValidator;_templateAttrs,allowedElements,allowedAttributes,allowedUriAttributes,uriPolicy",
    allowsAttribute$3: function(element, attributeName, value) {
      if (W._SimpleNodeValidator.prototype.allowsAttribute$3.call(this, element, attributeName, value))
        return true;
      if (attributeName === "template" && value === "")
        return true;
      if (element.getAttribute("template") === "")
        return this._templateAttrs.contains$1(0, attributeName);
      return false;
    },
    static: {"": "_TemplatingNodeValidator__TEMPLATE_ATTRS", _TemplatingNodeValidator$: function() {
        var t1, t2, t3, t4;
        t1 = H.setRuntimeTypeInfo(new H.MappedListIterable(C.List_wSV, new W._TemplatingNodeValidator_closure()), [null, null]);
        t2 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
        t2.addAll$1(0, ["TEMPLATE"]);
        t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
        t3.addAll$1(0, t1);
        t1 = t3;
        t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
        t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString);
        t4.addAll$1(0, C.List_wSV);
        return new W._TemplatingNodeValidator(t4, t2, t1, t3, null);
      }}
  },
  _TemplatingNodeValidator_closure: {
    "": "Closure:13;",
    call$1: function(attr) {
      return "TEMPLATE::" + H.S(attr);
    }
  },
  _SvgNodeValidator: {
    "": "Object;",
    allowsElement$1: function(element) {
      var t1 = J.getInterceptor(element);
      if (!!t1.$isScriptElement)
        return false;
      if (!!t1.$isSvgElement)
        return true;
      return false;
    },
    allowsAttribute$3: function(element, attributeName, value) {
      if (attributeName === "is" || C.JSString_methods.startsWith$1(attributeName, "on"))
        return false;
      return this.allowsElement$1(element);
    }
  },
  FixedSizeListIterator: {
    "": "Object;_array,_html$_length,_html$_position,_html$_current",
    moveNext$0: function() {
      var nextPosition, t1;
      nextPosition = this._html$_position + 1;
      t1 = this._html$_length;
      if (nextPosition < t1) {
        this._html$_current = J.$index$asx(this._array, nextPosition);
        this._html$_position = nextPosition;
        return true;
      }
      this._html$_current = null;
      this._html$_position = t1;
      return false;
    },
    get$current: function() {
      return this._html$_current;
    }
  },
  _LocationWrapper: {
    "": "Object;_ptr",
    get$hostname: function(_) {
      return this._ptr.hostname;
    },
    get$port: function(_) {
      return this._ptr.port;
    },
    get$protocol: function(_) {
      return this._ptr.protocol;
    },
    toString$0: function(_) {
      return this._ptr.toString();
    },
    $isLocation: true
  },
  NodeValidator: {
    "": "Object;"
  },
  _SameOriginUriPolicy: {
    "": "Object;_hiddenAnchor,_loc"
  },
  _ValidatingTreeSanitizer: {
    "": "Object;validator",
    sanitizeTree$1: function(node) {
      new W._ValidatingTreeSanitizer_sanitizeTree_walk(this).call$1(node);
    },
    sanitizeNode$1: function(node) {
      var t1, attrs, t2, t3, isAttr, keys, i, $name, t4;
      switch (node.nodeType) {
        case 1:
          t1 = J.getInterceptor$x(node);
          attrs = t1.get$attributes(node);
          if (!this.validator.allowsElement$1(node)) {
            window;
            t2 = $.get$Console__safeConsole();
            t3 = "Removing disallowed element <" + node.tagName + ">";
            t2.toString;
            if (typeof console != "undefined")
              console.warn(t3);
            t1.remove$0(node);
            break;
          }
          t2 = attrs._element;
          isAttr = t2.getAttribute("is");
          if (isAttr != null)
            if (!this.validator.allowsAttribute$3(node, "is", isAttr)) {
              window;
              t2 = $.get$Console__safeConsole();
              t3 = "Removing disallowed type extension <" + node.tagName + " is=\"" + isAttr + "\">";
              t2.toString;
              if (typeof console != "undefined")
                console.warn(t3);
              t1.remove$0(node);
              break;
            }
          keys = C.JSArray_methods.toList$0(attrs.get$keys());
          for (i = attrs.get$keys().length - 1; i >= 0; --i) {
            if (i >= keys.length)
              return H.ioore(keys, i);
            $name = keys[i];
            if (!this.validator.allowsAttribute$3(node, J.toLowerCase$0$s($name), t2.getAttribute($name))) {
              window;
              t3 = $.get$Console__safeConsole();
              t4 = "Removing disallowed attribute <" + node.tagName + " " + $name + "=\"" + t2.getAttribute($name) + "\">";
              t3.toString;
              if (typeof console != "undefined")
                console.warn(t4);
              t2.getAttribute($name);
              t2.removeAttribute($name);
            }
          }
          if (typeof node === "object" && node !== null && !!t1.$isTemplateElement)
            this.sanitizeTree$1(node.content);
          break;
        case 8:
        case 11:
        case 3:
        case 4:
          break;
        default:
          J.remove$0$ax(node);
      }
    }
  },
  _ValidatingTreeSanitizer_sanitizeTree_walk: {
    "": "Closure:22;this_0",
    call$1: function(node) {
      var child, nextChild;
      this.this_0.sanitizeNode$1(node);
      child = node.lastChild;
      for (; child != null; child = nextChild) {
        nextChild = child.previousSibling;
        this.call$1(child);
      }
    }
  }
}],
["dart.dom.svg", "dart:svg", , P, {
  "": "",
  FEBlendElement: {
    "": "SvgElement;x=,y=",
    "%": "SVGFEBlendElement"
  },
  FEColorMatrixElement: {
    "": "SvgElement;x=,y=",
    "%": "SVGFEColorMatrixElement"
  },
  FEComponentTransferElement: {
    "": "SvgElement;x=,y=",
    "%": "SVGFEComponentTransferElement"
  },
  FECompositeElement: {
    "": "SvgElement;x=,y=",
    "%": "SVGFECompositeElement"
  },
  FEConvolveMatrixElement: {
    "": "SvgElement;x=,y=",
    "%": "SVGFEConvolveMatrixElement"
  },
  FEDiffuseLightingElement: {
    "": "SvgElement;x=,y=",
    "%": "SVGFEDiffuseLightingElement"
  },
  FEDisplacementMapElement: {
    "": "SvgElement;x=,y=",
    "%": "SVGFEDisplacementMapElement"
  },
  FEFloodElement: {
    "": "SvgElement;x=,y=",
    "%": "SVGFEFloodElement"
  },
  FEGaussianBlurElement: {
    "": "SvgElement;x=,y=",
    "%": "SVGFEGaussianBlurElement"
  },
  FEImageElement: {
    "": "SvgElement;x=,y=",
    "%": "SVGFEImageElement"
  },
  FEMergeElement: {
    "": "SvgElement;x=,y=",
    "%": "SVGFEMergeElement"
  },
  FEMorphologyElement: {
    "": "SvgElement;x=,y=",
    "%": "SVGFEMorphologyElement"
  },
  FEOffsetElement: {
    "": "SvgElement;x=,y=",
    "%": "SVGFEOffsetElement"
  },
  FEPointLightElement: {
    "": "SvgElement;x=,y=",
    "%": "SVGFEPointLightElement"
  },
  FESpecularLightingElement: {
    "": "SvgElement;x=,y=",
    "%": "SVGFESpecularLightingElement"
  },
  FESpotLightElement: {
    "": "SvgElement;x=,y=",
    "%": "SVGFESpotLightElement"
  },
  FETileElement: {
    "": "SvgElement;x=,y=",
    "%": "SVGFETileElement"
  },
  FETurbulenceElement: {
    "": "SvgElement;x=,y=",
    "%": "SVGFETurbulenceElement"
  },
  FilterElement: {
    "": "SvgElement;x=,y=",
    "%": "SVGFilterElement"
  },
  ForeignObjectElement: {
    "": "GraphicsElement;x=,y=",
    "%": "SVGForeignObjectElement"
  },
  GraphicsElement: {
    "": "SvgElement;",
    "%": "SVGAElement|SVGCircleElement|SVGClipPathElement|SVGDefsElement|SVGEllipseElement|SVGGElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement|SVGSwitchElement;SVGGraphicsElement"
  },
  ImageElement0: {
    "": "GraphicsElement;x=,y=",
    "%": "SVGImageElement"
  },
  MaskElement: {
    "": "SvgElement;x=,y=",
    "%": "SVGMaskElement"
  },
  PatternElement: {
    "": "SvgElement;x=,y=",
    "%": "SVGPatternElement"
  },
  Rect: {
    "": "Interceptor;x%,y%",
    "%": "SVGRect"
  },
  RectElement: {
    "": "GraphicsElement;x=,y=",
    "%": "SVGRectElement"
  },
  ScriptElement: {
    "": "SvgElement;",
    $isScriptElement: true,
    "%": "SVGScriptElement"
  },
  SvgElement: {
    "": "Element;",
    set$innerHtml: function(receiver, value) {
      receiver.textContent = null;
      receiver.appendChild(this.createFragment$3$treeSanitizer$validator(receiver, value, null, null));
    },
    createFragment$3$treeSanitizer$validator: function(receiver, svg, treeSanitizer, validator) {
      var t1, html, fragment, svgFragment, root;
      t1 = H.setRuntimeTypeInfo([], [W.NodeValidator]);
      validator = new W.NodeValidatorBuilder(t1);
      t1.push(W._Html5NodeValidator$(null));
      t1.push(W._TemplatingNodeValidator$());
      t1.push(new W._SvgNodeValidator());
      treeSanitizer = new W._ValidatingTreeSanitizer(validator);
      html = "<svg version=\"1.1\">" + svg + "</svg>";
      fragment = J.createFragment$2$treeSanitizer$x(document.body, html, treeSanitizer);
      svgFragment = document.createDocumentFragment();
      fragment.toString;
      t1 = new W._ChildNodeListLazy(fragment);
      root = t1.get$single(t1);
      for (; t1 = root.firstChild, t1 != null;)
        svgFragment.appendChild(t1);
      return svgFragment;
    },
    $isSvgElement: true,
    "%": "SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGComponentTransferFunctionElement|SVGCursorElement|SVGDescElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGGlyphRefElement|SVGGradientElement|SVGHKernElement|SVGLinearGradientElement|SVGMPathElement|SVGMarkerElement|SVGMetadataElement|SVGMissingGlyphElement|SVGRadialGradientElement|SVGSetElement|SVGStopElement|SVGStyleElement|SVGSymbolElement|SVGTitleElement|SVGVKernElement|SVGViewElement;SVGElement"
  },
  SvgSvgElement: {
    "": "GraphicsElement;x=,y=",
    "%": "SVGSVGElement"
  },
  TextContentElement: {
    "": "GraphicsElement;",
    "%": "SVGTextPathElement;SVGTextContentElement"
  },
  TextPositioningElement: {
    "": "TextContentElement;x=,y=",
    "%": "SVGAltGlyphElement|SVGTSpanElement|SVGTextElement|SVGTextPositioningElement"
  },
  UseElement: {
    "": "GraphicsElement;x=,y=",
    "%": "SVGUseElement"
  }
}],
["dart.math", "dart:math", , P, {
  "": "",
  min: function(a, b) {
    var t1;
    if (a > b)
      return b;
    if (a < b)
      return a;
    if (typeof b === "number") {
      if (typeof a === "number")
        if (a === 0)
          return (a + b) * a * b;
      if (a === 0)
        t1 = b === 0 ? 1 / b < 0 : b < 0;
      else
        t1 = false;
      if (t1 || isNaN(b))
        return b;
      return a;
    }
    return a;
  },
  max: function(a, b) {
    var t1;
    if (typeof a !== "number")
      throw H.wrapException(new P.ArgumentError(a));
    if (typeof b !== "number")
      throw H.wrapException(new P.ArgumentError(b));
    if (a > b)
      return a;
    if (a < b)
      return b;
    if (typeof b === "number") {
      if (typeof a === "number")
        if (a === 0)
          return a + b;
      if (isNaN(b))
        return b;
      return a;
    }
    if (b === 0)
      t1 = a === 0 ? 1 / a < 0 : a < 0;
    else
      t1 = false;
    if (t1)
      return b;
    return a;
  },
  _JSRandom: {
    "": "Object;"
  }
}],
["dart.typed_data.implementation", "dart:_native_typed_data", , H, {
  "": "",
  NativeTypedData: {
    "": "Interceptor;",
    _invalidIndex$2: function(receiver, index, $length) {
      var t1 = J.getInterceptor$n(index);
      if (t1.$lt(index, 0) || t1.$ge(index, $length))
        throw H.wrapException(P.RangeError$range(index, 0, $length));
      else
        throw H.wrapException(P.ArgumentError$("Invalid list index " + H.S(index)));
    },
    "%": "DataView;ArrayBufferView;NativeTypedArray|NativeTypedArray_ListMixin|NativeTypedArray_ListMixin_FixedLengthListMixin|NativeTypedArrayOfDouble|NativeTypedArray_ListMixin0|NativeTypedArray_ListMixin_FixedLengthListMixin0|NativeTypedArrayOfInt"
  },
  NativeFloat32List: {
    "": "NativeTypedArrayOfDouble;",
    $index: function(receiver, index) {
      var t1, t2;
      t1 = receiver.length;
      if (!(index >>> 0 != index)) {
        if (typeof index !== "number")
          return index.$ge();
        t2 = index >= t1;
      } else
        t2 = true;
      if (t2)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 != index || J.$ge$n(index, t1))
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    $isList: true,
    $asList: function() {
      return [J.JSDouble];
    },
    $isEfficientLength: true,
    "%": "Float32Array"
  },
  NativeFloat64List: {
    "": "NativeTypedArrayOfDouble;",
    $index: function(receiver, index) {
      var t1, t2;
      t1 = receiver.length;
      if (!(index >>> 0 != index)) {
        if (typeof index !== "number")
          return index.$ge();
        t2 = index >= t1;
      } else
        t2 = true;
      if (t2)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 != index || J.$ge$n(index, t1))
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    $isList: true,
    $asList: function() {
      return [J.JSDouble];
    },
    $isEfficientLength: true,
    "%": "Float64Array"
  },
  NativeInt16List: {
    "": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1, t2;
      t1 = receiver.length;
      if (!(index >>> 0 != index)) {
        if (typeof index !== "number")
          return index.$ge();
        t2 = index >= t1;
      } else
        t2 = true;
      if (t2)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 != index || J.$ge$n(index, t1))
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    "%": "Int16Array"
  },
  NativeInt32List: {
    "": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1, t2;
      t1 = receiver.length;
      if (!(index >>> 0 != index)) {
        if (typeof index !== "number")
          return index.$ge();
        t2 = index >= t1;
      } else
        t2 = true;
      if (t2)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 != index || J.$ge$n(index, t1))
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    "%": "Int32Array"
  },
  NativeInt8List: {
    "": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1, t2;
      t1 = receiver.length;
      if (!(index >>> 0 != index)) {
        if (typeof index !== "number")
          return index.$ge();
        t2 = index >= t1;
      } else
        t2 = true;
      if (t2)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 != index || J.$ge$n(index, t1))
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    "%": "Int8Array"
  },
  NativeUint16List: {
    "": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1, t2;
      t1 = receiver.length;
      if (!(index >>> 0 != index)) {
        if (typeof index !== "number")
          return index.$ge();
        t2 = index >= t1;
      } else
        t2 = true;
      if (t2)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 != index || J.$ge$n(index, t1))
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    "%": "Uint16Array"
  },
  NativeUint32List: {
    "": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1, t2;
      t1 = receiver.length;
      if (!(index >>> 0 != index)) {
        if (typeof index !== "number")
          return index.$ge();
        t2 = index >= t1;
      } else
        t2 = true;
      if (t2)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 != index || J.$ge$n(index, t1))
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    "%": "Uint32Array"
  },
  NativeUint8ClampedList: {
    "": "NativeTypedArrayOfInt;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1, t2;
      t1 = receiver.length;
      if (!(index >>> 0 != index)) {
        if (typeof index !== "number")
          return index.$ge();
        t2 = index >= t1;
      } else
        t2 = true;
      if (t2)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 != index || J.$ge$n(index, t1))
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    "%": "CanvasPixelArray|Uint8ClampedArray"
  },
  NativeUint8List: {
    "": "NativeTypedArrayOfInt;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1, t2;
      t1 = receiver.length;
      if (!(index >>> 0 != index)) {
        if (typeof index !== "number")
          return index.$ge();
        t2 = index >= t1;
      } else
        t2 = true;
      if (t2)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 != index || J.$ge$n(index, t1))
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true,
    "%": ";Uint8Array"
  },
  NativeTypedArray: {
    "": "NativeTypedData;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $isJavaScriptIndexingBehavior: true
  },
  NativeTypedArrayOfDouble: {
    "": "NativeTypedArray_ListMixin_FixedLengthListMixin;",
    $isList: true,
    $asList: function() {
      return [J.JSDouble];
    },
    $isEfficientLength: true
  },
  NativeTypedArray_ListMixin: {
    "": "NativeTypedArray+ListMixin;",
    $isList: true,
    $asList: function() {
      return [J.JSDouble];
    },
    $isEfficientLength: true
  },
  NativeTypedArray_ListMixin_FixedLengthListMixin: {
    "": "NativeTypedArray_ListMixin+FixedLengthListMixin;"
  },
  NativeTypedArrayOfInt: {
    "": "NativeTypedArray_ListMixin_FixedLengthListMixin0;",
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true
  },
  NativeTypedArray_ListMixin0: {
    "": "NativeTypedArray+ListMixin;",
    $isList: true,
    $asList: function() {
      return [J.JSInt];
    },
    $isEfficientLength: true
  },
  NativeTypedArray_ListMixin_FixedLengthListMixin0: {
    "": "NativeTypedArray_ListMixin0+FixedLengthListMixin;"
  }
}],
["dart2js._js_primitives", "dart:_js_primitives", , H, {
  "": "",
  printString: function(string) {
    if (typeof dartPrint == "function") {
      dartPrint(string);
      return;
    }
    if (typeof console == "object" && typeof console.log == "function") {
      console.log(string);
      return;
    }
    if (typeof window == "object")
      return;
    if (typeof print == "function") {
      print(string);
      return;
    }
    throw "Unable to print message: " + String(string);
  }
}],
["demo", "file:///Users/kevmoo/source/github/dart_ab/web/demo.dart", , Q, {
  "": "",
  Demo: {
    "": "Object;",
    step$1: [function(_, timestamp) {
      var t1, t2, t3;
      t1 = this._stopwatch;
      t1.reset$0(0);
      t2 = this.world;
      t3 = t2._flags;
      if ((t3 & 1) === 1) {
        t3 = t2._contactManager;
        t3.broadPhase.updatePairs$1(t3.get$_addPair());
        t3 = t2._flags & 4294967294;
        t2._flags = t3;
      }
      t2._flags = t3 | 2;
      t3 = t2.timestep;
      t3.dt = 0.016666666666666666;
      t3.velocityIterations = 10;
      t3.positionIterations = 10;
      t3.inv_dt = 60;
      t3.dtRatio = t2._inverseTimestep * 0.016666666666666666;
      t3.warmStarting = t2._warmStarting;
      t2._contactManager.collide$0();
      if (t3.dt > 0) {
        t2.solve$1(t3);
        if (t2._continuousPhysics)
          t2.solveTimeOfImpact$0();
        t2._inverseTimestep = t3.inv_dt;
      }
      if ((t2._flags & 4) === 4)
        t2.clearForces$0();
      t2._flags = t2._flags & 4294967293;
      this.elapsedUs = C.JSNumber_methods._tdivFast$1(t1.get$elapsedTicks() * 1000000, 1000000);
      J.clearRect$4$x(this.ctx, 0, 0, 600, 600);
      t2.drawDebugData$0();
      t1 = this.frameCount;
      if (typeof t1 !== "number")
        return t1.$add();
      this.frameCount = t1 + 1;
      t1 = window;
      t2 = this.get$step(this);
      C.Window_methods._ensureRequestAnimationFrame$0(t1);
      C.Window_methods._requestAnimationFrame$1(t1, W._wrapZone(t2));
    }, "call$1", "get$step", 2, 0, 10],
    initializeAnimation$0: function() {
      var t1, extents, t2, t3;
      t1 = H.interceptedTypeCast(W._ElementFactoryProvider_createElement_tag("canvas", null), "$isCanvasElement");
      t1.width = 600;
      t1.height = 600;
      this.canvas = t1;
      document.body.appendChild(t1);
      this.ctx = J.getContext$1$x(this.canvas, "2d");
      t1 = new Float32Array(2);
      extents = new T.Vector2(t1);
      t1[0] = 300;
      t1[1] = 300;
      t1 = new T.Vector2(new Float32Array(2));
      t1.setFrom$1(extents);
      t2 = new T.Vector2(new Float32Array(2));
      t2.setFrom$1(extents);
      t2 = new Y.CanvasViewportTransform(null, t1, 20, t2);
      t2.yFlip = true;
      t2.scale = this._viewportScale;
      this.viewport = t2;
      t1 = this.ctx;
      t3 = new Y.CanvasDraw(t1, 1, t2);
      t3.CanvasDraw$2(t2, t1);
      this.debugDraw = t3;
      this.world._debugDraw = t3;
      this.frameCount = 0;
      this.fpsCounter = document.querySelector("#fps-counter");
      this.worldStepTime = document.querySelector("#world-step-time");
      P.Timer_Timer$periodic(P.Duration$(0, 0, 0, 0, 0, 1), new Q.Demo_initializeAnimation_closure(this));
      P.Timer_Timer$periodic(P.Duration$(0, 0, 0, 200, 0, 0), new Q.Demo_initializeAnimation_closure0(this));
    }
  },
  Demo_initializeAnimation_closure: {
    "": "Closure:23;this_0",
    call$1: function(t) {
      var t1 = this.this_0;
      J.set$innerHtml$x(t1.fpsCounter, J.toString$0(t1.frameCount));
      t1.frameCount = 0;
    }
  },
  Demo_initializeAnimation_closure0: {
    "": "Closure:23;this_1",
    call$1: function(t) {
      var t1, t2;
      t1 = this.this_1;
      t2 = t1.elapsedUs;
      if (t2 == null)
        return;
      t1 = t1.worldStepTime;
      if (typeof t2 !== "number")
        return t2.$div();
      J.set$innerHtml$x(t1, H.S(t2 / 1000) + " ms");
    }
  }
}],
["vector_math", "package:vector_math/vector_math.dart", , T, {
  "": "",
  Matrix2: {
    "": "Object;storage<",
    setValues$4: function(arg0, arg1, arg2, arg3) {
      var t1 = this.storage;
      t1[3] = arg3;
      t1[2] = arg2;
      t1[1] = arg1;
      t1[0] = arg0;
      return this;
    },
    setFrom$1: function(arg) {
      var t1, t2;
      t1 = this.storage;
      t2 = arg.get$storage();
      if (3 >= t2.length)
        return H.ioore(t2, 3);
      t1[3] = t2[3];
      t1[2] = t2[2];
      t1[1] = t2[1];
      t1[0] = t2[0];
      return this;
    },
    toString$0: function(_) {
      return "[0] " + H.S(this.getRow$1(0)) + "\n[1] " + H.S(this.getRow$1(1)) + "\n";
    },
    $index: function(_, i) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 4)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, v) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 4)
        return H.ioore(t1, i);
      t1[i] = v;
    },
    getRow$1: function(row) {
      var t1, t2, t3;
      t1 = new Float32Array(2);
      t2 = this.storage;
      t3 = 0 + row;
      if (t3 >= 4)
        return H.ioore(t2, t3);
      t1[0] = t2[t3];
      t3 = 2 + row;
      if (t3 >= 4)
        return H.ioore(t2, t3);
      t1[1] = t2[t3];
      return new T.Vector2(t1);
    },
    $mul: function(_, arg) {
      var t1, t2, t3, t4, t5, t6;
      if (typeof arg === "number") {
        t1 = new Float32Array(4);
        t2 = this.storage;
        t1[3] = t2[3] * arg;
        t1[2] = t2[2] * arg;
        t1[1] = t2[1] * arg;
        t1[0] = t2[0] * arg;
        return new T.Matrix2(t1);
      }
      t1 = J.getInterceptor(arg);
      if (typeof arg === "object" && arg !== null && !!t1.$isVector2) {
        t1 = new Float32Array(2);
        t2 = this.storage;
        t3 = t2[1];
        t4 = arg.get$storage();
        t5 = t4.$index(0, 0);
        t3 = C.JSNumber_methods.$mul(t3, t5);
        t6 = t2[3];
        t4 = t4.$index(0, 1);
        t1[1] = t3 + C.JSNumber_methods.$mul(t6, t4);
        t1[0] = C.JSNumber_methods.$mul(t2[0], t5) + C.JSNumber_methods.$mul(t2[2], t4);
        return new T.Vector2(t1);
      }
      arg.get$dimension();
      throw H.wrapException(new P.ArgumentError(arg));
    },
    $add: function(_, arg) {
      var t1, t2, t3, t4, t5;
      t1 = new Float32Array(4);
      t2 = this.storage;
      t3 = t2[0];
      t4 = arg.get$storage();
      t5 = t4.length;
      if (0 >= t5)
        return H.ioore(t4, 0);
      t1[0] = t3 + t4[0];
      t3 = t2[1];
      if (1 >= t5)
        return H.ioore(t4, 1);
      t1[1] = t3 + t4[1];
      t3 = t2[2];
      if (2 >= t5)
        return H.ioore(t4, 2);
      t1[2] = t3 + t4[2];
      t2 = t2[3];
      if (3 >= t5)
        return H.ioore(t4, 3);
      t1[3] = t2 + t4[3];
      return new T.Matrix2(t1);
    },
    $sub: function(_, arg) {
      var t1, t2, t3, t4, t5;
      t1 = new Float32Array(4);
      t2 = this.storage;
      t3 = t2[0];
      t4 = arg.get$storage();
      t5 = t4.length;
      if (0 >= t5)
        return H.ioore(t4, 0);
      t1[0] = t3 - t4[0];
      t3 = t2[1];
      if (1 >= t5)
        return H.ioore(t4, 1);
      t1[1] = t3 - t4[1];
      t3 = t2[2];
      if (2 >= t5)
        return H.ioore(t4, 2);
      t1[2] = t3 - t4[2];
      t2 = t2[3];
      if (3 >= t5)
        return H.ioore(t4, 3);
      t1[3] = t2 - t4[3];
      return new T.Matrix2(t1);
    },
    $negate: function(_) {
      var t1, t2;
      t1 = new Float32Array(4);
      t2 = this.storage;
      t1[0] = -t2[0];
      t1[1] = -t2[1];
      return new T.Matrix2(t1);
    },
    transposed$0: function() {
      var t1, t2;
      t1 = new Float32Array(4);
      t2 = this.storage;
      t1[0] = t2[0];
      t1[1] = t2[2];
      t1[2] = t2[1];
      t1[3] = t2[3];
      return new T.Matrix2(t1);
    },
    invert$0: function() {
      var t1, t2, t3, t4, t5, det, invDet;
      t1 = this.storage;
      t2 = t1[0];
      t3 = t1[3];
      t4 = t1[1];
      t5 = t1[2];
      det = t2 * t3 - t4 * t5;
      if (det === 0)
        return 0;
      invDet = 1 / det;
      t1[0] = t3 * invDet;
      t1[1] = -t4 * invDet;
      t1[2] = -t5 * invDet;
      t1[3] = t2 * invDet;
      return det;
    },
    setRotation$1: function(radians) {
      var c, s, t1;
      c = Math.cos(radians);
      s = Math.sin(radians);
      t1 = this.storage;
      t1[0] = c;
      t1[1] = s;
      t1[2] = -s;
      t1[3] = c;
    },
    add$1: function(_, o) {
      var t1, t2;
      t1 = this.storage;
      t2 = o.storage;
      t1[0] = t1[0] + t2[0];
      t1[1] = t1[1] + t2[1];
      t1[2] = t1[2] + t2[2];
      t1[3] = t1[3] + t2[3];
      return this;
    },
    sub$1: function(o) {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = o.storage;
      t1[0] = t1[0] - t2[0];
      t1[1] = t1[1] - t2[1];
      t3 = t1[2];
      if (2 >= 2)
        return H.ioore(t2, 2);
      t1[2] = t3 - t2[2];
      t3 = t1[3];
      return H.ioore(t2, 3);
      t1[3] = t3 - t2[3];
      return this;
    },
    transformed$2: function(arg, out) {
      var t1, t2, t3, t4, t5, t6, t7;
      if (out == null) {
        out = new T.Vector2(new Float32Array(2));
        out.setFrom$1(arg);
      } else
        out.setFrom$1(arg);
      t1 = this.storage;
      t2 = t1[0];
      t3 = out.storage;
      t4 = t3[0];
      t5 = t1[2];
      t6 = t3[1];
      t7 = t1[1];
      t1 = t1[3];
      t3[0] = t2 * t4 + t5 * t6;
      t3[1] = t7 * t4 + t1 * t6;
      return out;
    }
  },
  Matrix3: {
    "": "Object;storage<",
    setFrom$1: function(arg) {
      var t1, t2;
      t1 = this.storage;
      t2 = arg.get$storage();
      if (8 >= t2.length)
        return H.ioore(t2, 8);
      t1[8] = t2[8];
      t1[7] = t2[7];
      t1[6] = t2[6];
      t1[5] = t2[5];
      t1[4] = t2[4];
      t1[3] = t2[3];
      t1[2] = t2[2];
      t1[1] = t2[1];
      t1[0] = t2[0];
      return this;
    },
    toString$0: function(_) {
      return "[0] " + H.S(this.getRow$1(0)) + "\n[1] " + H.S(this.getRow$1(1)) + "\n[2] " + H.S(this.getRow$1(2)) + "\n";
    },
    $index: function(_, i) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 9)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, v) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 9)
        return H.ioore(t1, i);
      t1[i] = v;
    },
    getRow$1: function(row) {
      var t1, t2, t3;
      t1 = new Float32Array(3);
      t2 = this.storage;
      t3 = 0 + row;
      if (t3 >= 9)
        return H.ioore(t2, t3);
      t1[0] = t2[t3];
      t3 = 3 + row;
      if (t3 >= 9)
        return H.ioore(t2, t3);
      t1[1] = t2[t3];
      t3 = 6 + row;
      if (t3 >= 9)
        return H.ioore(t2, t3);
      t1[2] = t2[t3];
      return new T.Vector3(t1);
    },
    getColumn$1: function(column) {
      var t1, entry, t2, t3;
      t1 = new Float32Array(3);
      entry = column * 3;
      t2 = this.storage;
      t3 = entry + 2;
      if (t3 >= 9)
        return H.ioore(t2, t3);
      t1[2] = t2[t3];
      t3 = entry + 1;
      if (t3 >= 9)
        return H.ioore(t2, t3);
      t1[1] = t2[t3];
      t3 = entry + 0;
      if (t3 >= 9)
        return H.ioore(t2, t3);
      t1[0] = t2[t3];
      return new T.Vector3(t1);
    },
    $mul: function(_, arg) {
      var t1, t2, t3, t4, t5, t6, t7, t8;
      if (typeof arg === "number") {
        t1 = new Float32Array(9);
        t2 = this.storage;
        t1[8] = t2[8] * arg;
        t1[7] = t2[7] * arg;
        t1[6] = t2[6] * arg;
        t1[5] = t2[5] * arg;
        t1[4] = t2[4] * arg;
        t1[3] = t2[3] * arg;
        t1[2] = t2[2] * arg;
        t1[1] = t2[1] * arg;
        t1[0] = t2[0] * arg;
        return new T.Matrix3(t1);
      }
      t1 = J.getInterceptor(arg);
      if (typeof arg === "object" && arg !== null && !!t1.$isVector3) {
        t1 = new Float32Array(3);
        t2 = this.storage;
        t3 = t2[2];
        t4 = arg.get$storage();
        t5 = t4.$index(0, 0);
        t3 = C.JSNumber_methods.$mul(t3, t5);
        t6 = t2[5];
        t7 = t4.$index(0, 1);
        t6 = C.JSNumber_methods.$mul(t6, t7);
        t8 = t2[8];
        t4 = t4.$index(0, 2);
        t1[2] = t3 + t6 + C.JSNumber_methods.$mul(t8, t4);
        t1[1] = C.JSNumber_methods.$mul(t2[1], t5) + C.JSNumber_methods.$mul(t2[4], t7) + C.JSNumber_methods.$mul(t2[7], t4);
        t1[0] = C.JSNumber_methods.$mul(t2[0], t5) + C.JSNumber_methods.$mul(t2[3], t7) + C.JSNumber_methods.$mul(t2[6], t4);
        return new T.Vector3(t1);
      }
      arg.get$dimension();
      throw H.wrapException(new P.ArgumentError(arg));
    },
    $add: function(_, arg) {
      var t1, t2, t3, t4, t5;
      t1 = new Float32Array(9);
      t2 = this.storage;
      t3 = t2[0];
      t4 = arg.get$storage();
      t5 = t4.length;
      if (0 >= t5)
        return H.ioore(t4, 0);
      t1[0] = t3 + t4[0];
      t3 = t2[1];
      if (1 >= t5)
        return H.ioore(t4, 1);
      t1[1] = t3 + t4[1];
      t3 = t2[2];
      if (2 >= t5)
        return H.ioore(t4, 2);
      t1[2] = t3 + t4[2];
      t3 = t2[3];
      if (3 >= t5)
        return H.ioore(t4, 3);
      t1[3] = t3 + t4[3];
      t3 = t2[4];
      if (4 >= t5)
        return H.ioore(t4, 4);
      t1[4] = t3 + t4[4];
      t3 = t2[5];
      if (5 >= t5)
        return H.ioore(t4, 5);
      t1[5] = t3 + t4[5];
      t3 = t2[6];
      if (6 >= t5)
        return H.ioore(t4, 6);
      t1[6] = t3 + t4[6];
      t3 = t2[7];
      if (7 >= t5)
        return H.ioore(t4, 7);
      t1[7] = t3 + t4[7];
      t2 = t2[8];
      if (8 >= t5)
        return H.ioore(t4, 8);
      t1[8] = t2 + t4[8];
      return new T.Matrix3(t1);
    },
    $sub: function(_, arg) {
      var t1, t2, t3, t4, t5;
      t1 = new Float32Array(9);
      t2 = this.storage;
      t3 = t2[0];
      t4 = arg.get$storage();
      t5 = t4.length;
      if (0 >= t5)
        return H.ioore(t4, 0);
      t1[0] = t3 - t4[0];
      t3 = t2[1];
      if (1 >= t5)
        return H.ioore(t4, 1);
      t1[1] = t3 - t4[1];
      t3 = t2[2];
      if (2 >= t5)
        return H.ioore(t4, 2);
      t1[2] = t3 - t4[2];
      t3 = t2[3];
      if (3 >= t5)
        return H.ioore(t4, 3);
      t1[3] = t3 - t4[3];
      t3 = t2[4];
      if (4 >= t5)
        return H.ioore(t4, 4);
      t1[4] = t3 - t4[4];
      t3 = t2[5];
      if (5 >= t5)
        return H.ioore(t4, 5);
      t1[5] = t3 - t4[5];
      t3 = t2[6];
      if (6 >= t5)
        return H.ioore(t4, 6);
      t1[6] = t3 - t4[6];
      t3 = t2[7];
      if (7 >= t5)
        return H.ioore(t4, 7);
      t1[7] = t3 - t4[7];
      t2 = t2[8];
      if (8 >= t5)
        return H.ioore(t4, 8);
      t1[8] = t2 - t4[8];
      return new T.Matrix3(t1);
    },
    $negate: function(_) {
      var t1, t2;
      t1 = new Float32Array(9);
      t2 = this.storage;
      t1[0] = -t2[0];
      t1[1] = -t2[1];
      t1[2] = -t2[2];
      return new T.Matrix3(t1);
    },
    sub$1: function(o) {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = o.storage;
      t1[0] = t1[0] - t2[0];
      t1[1] = t1[1] - t2[1];
      t3 = t1[2];
      if (2 >= 2)
        return H.ioore(t2, 2);
      t1[2] = t3 - t2[2];
      t3 = t1[3];
      return H.ioore(t2, 3);
      t1[3] = t3 - t2[3];
      t3 = t1[4];
      return H.ioore(t2, 4);
      t1[4] = t3 - t2[4];
      t3 = t1[5];
      return H.ioore(t2, 5);
      t1[5] = t3 - t2[5];
      t3 = t1[6];
      return H.ioore(t2, 6);
      t1[6] = t3 - t2[6];
      t3 = t1[7];
      return H.ioore(t2, 7);
      t1[7] = t3 - t2[7];
      t3 = t1[8];
      return H.ioore(t2, 8);
      t1[8] = t3 - t2[8];
      return this;
    }
  },
  Vector2: {
    "": "Object;storage<",
    setValues$2: function(x_, y_) {
      var t1 = this.storage;
      t1[0] = x_;
      t1[1] = y_;
      return this;
    },
    setZero$0: function() {
      var t1 = this.storage;
      t1[0] = 0;
      t1[1] = 0;
      return this;
    },
    setFrom$1: function(other) {
      var t1, t2;
      t1 = this.storage;
      t2 = other.get$storage();
      if (1 >= t2.length)
        return H.ioore(t2, 1);
      t1[1] = t2[1];
      t1[0] = t2[0];
      return this;
    },
    toString$0: function(_) {
      var t1 = this.storage;
      return "[" + H.S(t1[0]) + "," + H.S(t1[1]) + "]";
    },
    $negate: function(_) {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = t1[0];
      t1 = t1[1];
      t3 = new Float32Array(2);
      t3[0] = -t2;
      t3[1] = -t1;
      return new T.Vector2(t3);
    },
    $sub: function(_, other) {
      var t1, t2, t3, t4, t5;
      t1 = this.storage;
      t2 = t1[0];
      t3 = other.get$storage();
      t4 = t3.length;
      if (0 >= t4)
        return H.ioore(t3, 0);
      t5 = t3[0];
      t1 = t1[1];
      if (1 >= t4)
        return H.ioore(t3, 1);
      t3 = t3[1];
      t4 = new Float32Array(2);
      t4[0] = t2 - t5;
      t4[1] = t1 - t3;
      return new T.Vector2(t4);
    },
    $add: function(_, other) {
      var t1, t2, t3, t4, t5;
      t1 = this.storage;
      t2 = t1[0];
      t3 = other.get$storage();
      t4 = t3.length;
      if (0 >= t4)
        return H.ioore(t3, 0);
      t5 = t3[0];
      t1 = t1[1];
      if (1 >= t4)
        return H.ioore(t3, 1);
      t3 = t3[1];
      t4 = new Float32Array(2);
      t4[0] = t2 + t5;
      t4[1] = t1 + t3;
      return new T.Vector2(t4);
    },
    $mul: function(_, scale) {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = t1[0];
      t1 = t1[1];
      t3 = new Float32Array(2);
      t3[0] = t2 * scale;
      t3[1] = t1 * scale;
      return new T.Vector2(t3);
    },
    $index: function(_, i) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 2)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, v) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 2)
        return H.ioore(t1, i);
      t1[i] = v;
    },
    get$length: function(_) {
      var t1, t2;
      t1 = this.storage;
      t2 = t1[0];
      t1 = t1[1];
      return Math.sqrt(t2 * t2 + t1 * t1);
    },
    get$length2: function() {
      var t1, t2;
      t1 = this.storage;
      t2 = t1[0];
      t1 = t1[1];
      return t2 * t2 + t1 * t1;
    },
    normalize$0: function() {
      var l, t1;
      l = this.get$length(this);
      if (l === 0)
        return this;
      l = 1 / l;
      t1 = this.storage;
      t1[0] = t1[0] * l;
      t1[1] = t1[1] * l;
      return this;
    },
    normalizeLength$0: function() {
      var l, t1;
      l = this.get$length(this);
      if (l === 0)
        return 0;
      l = 1 / l;
      t1 = this.storage;
      t1[0] = t1[0] * l;
      t1[1] = t1[1] * l;
      return l;
    },
    dot$1: function(other) {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = t1[0];
      t3 = other.storage;
      return t2 * t3[0] + t1[1] * t3[1];
    },
    cross$1: function(other) {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = t1[0];
      t3 = other.get$storage();
      if (1 >= t3.length)
        return H.ioore(t3, 1);
      return t2 * t3[1] - t1[1] * t3[0];
    },
    add$1: function(_, arg) {
      var t1, t2, t3, t4;
      t1 = this.storage;
      t2 = t1[0];
      t3 = arg.get$storage();
      t4 = t3.length;
      if (0 >= t4)
        return H.ioore(t3, 0);
      t1[0] = t2 + t3[0];
      t2 = t1[1];
      if (1 >= t4)
        return H.ioore(t3, 1);
      t1[1] = t2 + t3[1];
      return this;
    },
    sub$1: function(arg) {
      var t1, t2;
      t1 = this.storage;
      t2 = arg.storage;
      t1[0] = t1[0] - t2[0];
      t1[1] = t1[1] - t2[1];
      return this;
    },
    scale$1: function(_, arg) {
      var t1, t2;
      t1 = this.storage;
      t2 = t1[1];
      if (typeof arg !== "number")
        return H.iae(arg);
      t1[1] = t2 * arg;
      t1[0] = t1[0] * arg;
      return this;
    },
    negate$0: function() {
      var t1 = this.storage;
      t1[1] = -t1[1];
      t1[0] = -t1[0];
      return this;
    },
    set$x: function(_, arg) {
      this.storage[0] = arg;
      return arg;
    },
    set$y: function(_, arg) {
      this.storage[1] = arg;
      return arg;
    },
    get$x: function(_) {
      return this.storage[0];
    },
    get$y: function(_) {
      return this.storage[1];
    },
    $isVector2: true
  },
  Vector3: {
    "": "Object;storage<",
    setValues$3: function(x_, y_, z_) {
      var t1 = this.storage;
      t1[0] = x_;
      t1[1] = y_;
      t1[2] = z_;
      return this;
    },
    setFrom$1: function(other) {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = other.get$storage();
      t3 = t2.length;
      if (0 >= t3)
        return H.ioore(t2, 0);
      t1[0] = t2[0];
      if (1 >= t3)
        return H.ioore(t2, 1);
      t1[1] = t2[1];
      if (2 >= t3)
        return H.ioore(t2, 2);
      t1[2] = t2[2];
      return this;
    },
    toString$0: function(_) {
      var t1 = this.storage;
      return "[" + H.S(t1[0]) + "," + H.S(t1[1]) + "," + H.S(t1[2]) + "]";
    },
    $negate: function(_) {
      var t1, t2, t3, t4;
      t1 = this.storage;
      t2 = t1[0];
      t3 = t1[1];
      t1 = t1[2];
      t4 = new T.Vector3(new Float32Array(3));
      t4.setValues$3(-t2, -t3, -t1);
      return t4;
    },
    $sub: function(_, other) {
      var t1, t2, t3, t4, t5, t6, t7;
      t1 = this.storage;
      t2 = t1[0];
      t3 = other.get$storage();
      t4 = t3.length;
      if (0 >= t4)
        return H.ioore(t3, 0);
      t5 = t3[0];
      t6 = t1[1];
      if (1 >= t4)
        return H.ioore(t3, 1);
      t7 = t3[1];
      t1 = t1[2];
      if (2 >= t4)
        return H.ioore(t3, 2);
      t3 = t3[2];
      t4 = new T.Vector3(new Float32Array(3));
      t4.setValues$3(t2 - t5, t6 - t7, t1 - t3);
      return t4;
    },
    $add: function(_, other) {
      var t1, t2, t3, t4, t5, t6, t7;
      t1 = this.storage;
      t2 = t1[0];
      t3 = other.get$storage();
      t4 = t3.length;
      if (0 >= t4)
        return H.ioore(t3, 0);
      t5 = t3[0];
      t6 = t1[1];
      if (1 >= t4)
        return H.ioore(t3, 1);
      t7 = t3[1];
      t1 = t1[2];
      if (2 >= t4)
        return H.ioore(t3, 2);
      t3 = t3[2];
      t4 = new T.Vector3(new Float32Array(3));
      t4.setValues$3(t2 + t5, t6 + t7, t1 + t3);
      return t4;
    },
    $mul: function(_, scale) {
      var t1, t2, t3, t4;
      t1 = this.storage;
      t2 = t1[0];
      t3 = t1[1];
      t1 = t1[2];
      t4 = new T.Vector3(new Float32Array(3));
      t4.setValues$3(t2 * scale, t3 * scale, t1 * scale);
      return t4;
    },
    $index: function(_, i) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 3)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, v) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 3)
        return H.ioore(t1, i);
      t1[i] = v;
    },
    get$length: function(_) {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = t1[0];
      t3 = t1[1];
      t1 = t1[2];
      return Math.sqrt(t2 * t2 + t3 * t3 + t1 * t1);
    },
    get$length2: function() {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = t1[0];
      t3 = t1[1];
      t1 = t1[2];
      return t2 * t2 + t3 * t3 + t1 * t1;
    },
    dot$1: function(other) {
      var t1, t2;
      t1 = this.storage;
      t2 = other.storage;
      return t1[0] * t2[0] + t1[1] * t2[1] + t1[2] * t2[2];
    },
    crossInto$2: function(other, out) {
      var t1, _x, _y, _z, ox, oy, oz;
      t1 = this.storage;
      _x = t1[0];
      _y = t1[1];
      _z = t1[2];
      t1 = other.storage;
      ox = t1[0];
      oy = t1[1];
      oz = t1[2];
      t1 = out.storage;
      t1[0] = _y * oz - _z * oy;
      t1[1] = _z * ox - _x * oz;
      t1[2] = _x * oy - _y * ox;
      return out;
    },
    sub$1: function(arg) {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = arg.storage;
      t1[0] = t1[0] - t2[0];
      t1[1] = t1[1] - t2[1];
      t3 = t1[2];
      if (2 >= 2)
        return H.ioore(t2, 2);
      t1[2] = t3 - t2[2];
      return this;
    },
    set$x: function(_, arg) {
      this.storage[0] = arg;
      return arg;
    },
    set$y: function(_, arg) {
      this.storage[1] = arg;
      return arg;
    },
    get$x: function(_) {
      return this.storage[0];
    },
    get$y: function(_) {
      return this.storage[1];
    },
    $isVector3: true
  }
}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

// Runtime type support
J.JSDouble.$isdouble = true;
J.JSDouble.$isnum = true;
J.JSDouble.$isComparable = true;
J.JSDouble.$asComparable = [J.JSNumber];
J.JSDouble.$isComparable = true;
J.JSDouble.$asComparable = [J.JSNumber];
J.JSDouble.$isObject = true;
J.JSInt.$isint = true;
J.JSInt.$isnum = true;
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isObject = true;
W.Node.$isNode = true;
W.Node.$isObject = true;
J.JSNumber.$isnum = true;
J.JSNumber.$isComparable = true;
J.JSNumber.$asComparable = [J.JSNumber];
J.JSNumber.$isObject = true;
J.JSString.$isString = true;
J.JSString.$isComparable = true;
J.JSString.$asComparable = [J.JSString];
J.JSString.$isObject = true;
P.Duration.$isDuration = true;
P.Duration.$isComparable = true;
P.Duration.$asComparable = [P.Duration];
P.Duration.$isObject = true;
V.Body.$isObject = true;
T.Vector2.$isVector2 = true;
T.Vector2.$isObject = true;
V.Contact.$isObject = true;
W.NodeValidator.$isNodeValidator = true;
W.NodeValidator.$isObject = true;
V.DistanceJoint.$isObject = true;
J.JSArray.$isObject = true;
V.ContactRegister.$isObject = true;
V.PolygonContact.$isObject = true;
V.ManifoldPoint.$isObject = true;
V.PolygonAndCircleContact.$isObject = true;
V.CircleContact.$isObject = true;
V.DynamicTreeNode.$isObject = true;
V.Pair.$isComparable = true;
V.Pair.$asComparable = [null];
V.Pair.$isObject = true;
V.ContactConstraint.$isObject = true;
V.ContactConstraintPoint.$isObject = true;
V.Joint.$isObject = true;
V.Velocity.$isObject = true;
V.Position.$isObject = true;
V.TimeOfImpactConstraint.$isObject = true;
V.SimplexVertex.$isObject = true;
V.ClipVertex.$isObject = true;
H.RawReceivePortImpl.$isObject = true;
H._IsolateEvent.$isObject = true;
H._IsolateContext.$isObject = true;
P.Symbol.$isSymbol = true;
P.Symbol.$isObject = true;
P.Timer.$isTimer = true;
P.Timer.$isObject = true;
P.StackTrace.$isStackTrace = true;
P.StackTrace.$isObject = true;
P.Object.$isObject = true;
J.JSBool.$isbool = true;
J.JSBool.$isObject = true;
W.Element.$isElement = true;
W.Element.$isNode = true;
W.Element.$isObject = true;
W._Html5NodeValidator.$is_Html5NodeValidator = true;
W._Html5NodeValidator.$isNodeValidator = true;
W._Html5NodeValidator.$isObject = true;
P.Comparable.$isComparable = true;
P.Comparable.$isObject = true;
P._EventSink.$is_EventSink = true;
P._EventSink.$isObject = true;
P.Future.$isFuture = true;
P.Future.$isObject = true;
P._DelayedEvent.$is_DelayedEvent = true;
P._DelayedEvent.$isObject = true;
P.StreamSubscription.$isStreamSubscription = true;
P.StreamSubscription.$isObject = true;
T.Matrix2.$isMatrix2 = true;
T.Matrix2.$isObject = true;
P.DateTime.$isDateTime = true;
P.DateTime.$isComparable = true;
P.DateTime.$asComparable = [null];
P.DateTime.$isObject = true;
T.Vector3.$isVector3 = true;
T.Vector3.$isObject = true;
T.Matrix3.$isMatrix3 = true;
T.Matrix3.$isObject = true;
V.Fixture.$isFixture = true;
V.Fixture.$isObject = true;
V.TimeOfImpactOutput.$isTimeOfImpactOutput = true;
V.TimeOfImpactOutput.$isObject = true;
V.TimeOfImpactInput.$isTimeOfImpactInput = true;
V.TimeOfImpactInput.$isObject = true;
V.DistanceOutput.$isDistanceOutput = true;
V.DistanceOutput.$isObject = true;
V.SimplexCache.$isSimplexCache = true;
V.SimplexCache.$isObject = true;
V.DistanceInput.$isDistanceInput = true;
V.DistanceInput.$isObject = true;
$.$signature_args2 = {func: "args2", args: [null, null]};
$.$signature_args1 = {func: "args1", args: [null]};
// getInterceptor methods
J.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return J.JSNull.prototype;
  if (typeof receiver == "boolean")
    return J.JSBool.prototype;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return J.getInterceptor$ns(receiver).$add(receiver, a0);
};
J.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return J.getInterceptor(receiver).$eq(receiver, a0);
};
J.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return J.getInterceptor$n(receiver).$ge(receiver, a0);
};
J.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return J.getInterceptor$n(receiver).$gt(receiver, a0);
};
J.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return J.getInterceptor$asx(receiver).$index(receiver, a0);
};
J.$indexSet$ax = function(receiver, a0, a1) {
  if ((receiver.constructor == Array || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
J.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return J.getInterceptor$n(receiver).$lt(receiver, a0);
};
J.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return J.getInterceptor$n(receiver).$mul(receiver, a0);
};
J.$negate$n = function(receiver) {
  if (typeof receiver == "number")
    return -receiver;
  return J.getInterceptor$n(receiver).$negate(receiver);
};
J.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return J.getInterceptor$n(receiver).$sub(receiver, a0);
};
J.arc$6$x = function(receiver, a0, a1, a2, a3, a4, a5) {
  return J.getInterceptor$x(receiver).arc$6(receiver, a0, a1, a2, a3, a4, a5);
};
J.beginPath$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).beginPath$0(receiver);
};
J.clearRect$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).clearRect$4(receiver, a0, a1, a2, a3);
};
J.closePath$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).closePath$0(receiver);
};
J.compareTo$1$ns = function(receiver, a0) {
  return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
J.createFragment$2$treeSanitizer$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).createFragment$2$treeSanitizer(receiver, a0, a1);
};
J.createFragment$3$treeSanitizer$validator$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).createFragment$3$treeSanitizer$validator(receiver, a0, a1, a2);
};
J.elementAt$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
J.fill$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).fill$0(receiver);
};
J.fillText$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).fillText$3(receiver, a0, a1, a2);
};
J.forEach$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
J.get$body$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$body(receiver);
};
J.get$error$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$error(receiver);
};
J.get$hashCode$ = function(receiver) {
  return J.getInterceptor(receiver).get$hashCode(receiver);
};
J.get$iterator$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$iterator(receiver);
};
J.get$length$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$length(receiver);
};
J.get$name$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$name(receiver);
};
J.get$nodes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$nodes(receiver);
};
J.get$position$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$position(receiver);
};
J.get$value$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$value(receiver);
};
J.get$x$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$x(receiver);
};
J.get$y$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$y(receiver);
};
J.getContext$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getContext$1(receiver, a0);
};
J.lineTo$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).lineTo$2(receiver, a0, a1);
};
J.moveTo$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).moveTo$2(receiver, a0, a1);
};
J.remove$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).remove$0(receiver);
};
J.send$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).send$1(receiver, a0);
};
J.set$fillStyle$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$fillStyle(receiver, value);
};
J.set$font$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$font(receiver, value);
};
J.set$href$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$href(receiver, value);
};
J.set$innerHtml$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$innerHtml(receiver, value);
};
J.set$parent$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$parent(receiver, value);
};
J.set$textAlign$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$textAlign(receiver, value);
};
J.set$x$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$x(receiver, value);
};
J.set$y$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$y(receiver, value);
};
J.setFillColorRgb$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).setFillColorRgb$4(receiver, a0, a1, a2, a3);
};
J.setStrokeColorRgb$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).setStrokeColorRgb$4(receiver, a0, a1, a2, a3);
};
J.stroke$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).stroke$0(receiver);
};
J.toList$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).toList$0(receiver);
};
J.toLowerCase$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
};
J.toString$0 = function(receiver) {
  return J.getInterceptor(receiver).toString$0(receiver);
};
C.C_DynamicRuntimeType = new H.DynamicRuntimeType();
C.C__DelayedDone = new P._DelayedDone();
C.C__JSRandom = new P._JSRandom();
C.C__RootZone = new P._RootZone();
C.Duration_0 = new P.Duration(0);
C.JSArray_methods = J.JSArray.prototype;
C.JSInt_methods = J.JSInt.prototype;
C.JSNumber_methods = J.JSNumber.prototype;
C.JSString_methods = J.JSString.prototype;
C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
C.JS_CONST_IX5 = function getTagFallback(o) {
  var constructor = o.constructor;
  if (typeof constructor == "function") {
    var name = constructor.name;
    if (typeof name == "string"
        && name !== ""
        && name !== "Object"
        && name !== "Function.prototype") {
      return name;
    }
  }
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
C.JS_CONST_QJm = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
C.JS_CONST_U4w = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
C.JS_CONST_aQP = function() {
  function typeNameInChrome(o) {
    var name = o.constructor.name;
    if (name) return name;
    var s = Object.prototype.toString.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = Object.prototype.toString.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: typeNameInChrome,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
C.JS_CONST_gkc = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
C.JS_CONST_rr7 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
Isolate.makeConstantList = function(list) {
  list.immutable$list = init;
  list.fixed$length = init;
  return list;
};
C.List_1GN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["*::class", "*::dir", "*::draggable", "*::hidden", "*::id", "*::inert", "*::itemprop", "*::itemref", "*::itemscope", "*::lang", "*::spellcheck", "*::title", "*::translate", "A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "AREA::accesskey", "AREA::alt", "AREA::coords", "AREA::nohref", "AREA::shape", "AREA::tabindex", "AREA::target", "AUDIO::controls", "AUDIO::loop", "AUDIO::mediagroup", "AUDIO::muted", "AUDIO::preload", "BDO::dir", "BODY::alink", "BODY::bgcolor", "BODY::link", "BODY::text", "BODY::vlink", "BR::clear", "BUTTON::accesskey", "BUTTON::disabled", "BUTTON::name", "BUTTON::tabindex", "BUTTON::type", "BUTTON::value", "CANVAS::height", "CANVAS::width", "CAPTION::align", "COL::align", "COL::char", "COL::charoff", "COL::span", "COL::valign", "COL::width", "COLGROUP::align", "COLGROUP::char", "COLGROUP::charoff", "COLGROUP::span", "COLGROUP::valign", "COLGROUP::width", "COMMAND::checked", "COMMAND::command", "COMMAND::disabled", "COMMAND::label", "COMMAND::radiogroup", "COMMAND::type", "DATA::value", "DEL::datetime", "DETAILS::open", "DIR::compact", "DIV::align", "DL::compact", "FIELDSET::disabled", "FONT::color", "FONT::face", "FONT::size", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target", "FRAME::name", "H1::align", "H2::align", "H3::align", "H4::align", "H5::align", "H6::align", "HR::align", "HR::noshade", "HR::size", "HR::width", "HTML::version", "IFRAME::align", "IFRAME::frameborder", "IFRAME::height", "IFRAME::marginheight", "IFRAME::marginwidth", "IFRAME::width", "IMG::align", "IMG::alt", "IMG::border", "IMG::height", "IMG::hspace", "IMG::ismap", "IMG::name", "IMG::usemap", "IMG::vspace", "IMG::width", "INPUT::accept", "INPUT::accesskey", "INPUT::align", "INPUT::alt", "INPUT::autocomplete", "INPUT::checked", "INPUT::disabled", "INPUT::inputmode", "INPUT::ismap", "INPUT::list", "INPUT::max", "INPUT::maxlength", "INPUT::min", "INPUT::multiple", "INPUT::name", "INPUT::placeholder", "INPUT::readonly", "INPUT::required", "INPUT::size", "INPUT::step", "INPUT::tabindex", "INPUT::type", "INPUT::usemap", "INPUT::value", "INS::datetime", "KEYGEN::disabled", "KEYGEN::keytype", "KEYGEN::name", "LABEL::accesskey", "LABEL::for", "LEGEND::accesskey", "LEGEND::align", "LI::type", "LI::value", "LINK::sizes", "MAP::name", "MENU::compact", "MENU::label", "MENU::type", "METER::high", "METER::low", "METER::max", "METER::min", "METER::value", "OBJECT::typemustmatch", "OL::compact", "OL::reversed", "OL::start", "OL::type", "OPTGROUP::disabled", "OPTGROUP::label", "OPTION::disabled", "OPTION::label", "OPTION::selected", "OPTION::value", "OUTPUT::for", "OUTPUT::name", "P::align", "PRE::width", "PROGRESS::max", "PROGRESS::min", "PROGRESS::value", "SELECT::autocomplete", "SELECT::disabled", "SELECT::multiple", "SELECT::name", "SELECT::required", "SELECT::size", "SELECT::tabindex", "SOURCE::type", "TABLE::align", "TABLE::bgcolor", "TABLE::border", "TABLE::cellpadding", "TABLE::cellspacing", "TABLE::frame", "TABLE::rules", "TABLE::summary", "TABLE::width", "TBODY::align", "TBODY::char", "TBODY::charoff", "TBODY::valign", "TD::abbr", "TD::align", "TD::axis", "TD::bgcolor", "TD::char", "TD::charoff", "TD::colspan", "TD::headers", "TD::height", "TD::nowrap", "TD::rowspan", "TD::scope", "TD::valign", "TD::width", "TEXTAREA::accesskey", "TEXTAREA::autocomplete", "TEXTAREA::cols", "TEXTAREA::disabled", "TEXTAREA::inputmode", "TEXTAREA::name", "TEXTAREA::placeholder", "TEXTAREA::readonly", "TEXTAREA::required", "TEXTAREA::rows", "TEXTAREA::tabindex", "TEXTAREA::wrap", "TFOOT::align", "TFOOT::char", "TFOOT::charoff", "TFOOT::valign", "TH::abbr", "TH::align", "TH::axis", "TH::bgcolor", "TH::char", "TH::charoff", "TH::colspan", "TH::headers", "TH::height", "TH::nowrap", "TH::rowspan", "TH::scope", "TH::valign", "TH::width", "THEAD::align", "THEAD::char", "THEAD::charoff", "THEAD::valign", "TR::align", "TR::bgcolor", "TR::char", "TR::charoff", "TR::valign", "TRACK::default", "TRACK::kind", "TRACK::label", "TRACK::srclang", "UL::compact", "UL::type", "VIDEO::controls", "VIDEO::height", "VIDEO::loop", "VIDEO::mediagroup", "VIDEO::muted", "VIDEO::preload", "VIDEO::width"]), [J.JSString]);
C.List_wSV = H.setRuntimeTypeInfo(Isolate.makeConstantList(["bind", "if", "ref", "repeat", "syntax"]), [J.JSString]);
C.List_yrN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["A::href", "AREA::href", "BLOCKQUOTE::cite", "BODY::background", "COMMAND::icon", "DEL::cite", "FORM::action", "IMG::src", "INPUT::src", "INS::cite", "Q::cite", "VIDEO::poster"]), [J.JSString]);
C.NodeList_methods = W.NodeList.prototype;
C.Type_AHF = H.createRuntimeType('NativeTypedArray');
C.Type_EQs = H.createRuntimeType('GlobalEventHandlers');
C.Type_NlB = H.createRuntimeType('NativeTypedArrayOfDouble');
C.Type_QyU = H.createRuntimeType('WindowEventHandlers');
C.Type_wOW = H.createRuntimeType('NativeTypedArrayOfInt');
C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
C.Window_methods = W.Window.prototype;
$.libraries_to_load = {};
$.controlPort = null;
$.RawReceivePortImpl__nextFreeId = 1;
$.Primitives_mirrorFunctionCacheName = "$cachedFunction";
$.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
$.Closure_functionCounter = 0;
$.BoundClosure_selfFieldNameCache = null;
$.BoundClosure_receiverFieldNameCache = null;
$.RuntimeFunctionType_inAssert = false;
$.getTagFunction = null;
$.alternateTagFunction = null;
$.prototypeForTagFunction = null;
$.dispatchRecordsForInstanceTags = null;
$.interceptorsForUncacheableTags = null;
$.initNativeDispatchFlag = null;
$.TimeOfImpact_toiCalls = null;
$.TimeOfImpact_toiIters = null;
$.TimeOfImpact_toiMaxIters = null;
$.TimeOfImpact_toiRootIters = null;
$.TimeOfImpact_toiMaxRootIters = null;
$.printToZone = null;
$._callbacksAreEnqueued = false;
$.Zone__current = C.C__RootZone;
$.Expando__keyCount = 0;
$.Element__parseDocument = null;
$.Element__parseRange = null;
$.Element__defaultValidator = null;
$.Element__defaultSanitizer = null;
$.Device__isOpera = null;
$.Device__isWebKit = null;
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return function() { return this; }();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return H.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  return new P.Expando(null);
});
Isolate.$lazy($, "noSuchMethodPattern", "TypeErrorDecoder_noSuchMethodPattern", "get$TypeErrorDecoder_noSuchMethodPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "notClosurePattern", "TypeErrorDecoder_notClosurePattern", "get$TypeErrorDecoder_notClosurePattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ $method$: null, toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "nullCallPattern", "TypeErrorDecoder_nullCallPattern", "get$TypeErrorDecoder_nullCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
});
Isolate.$lazy($, "nullLiteralCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "get$TypeErrorDecoder_nullLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    null.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}());
});
Isolate.$lazy($, "undefinedCallPattern", "TypeErrorDecoder_undefinedCallPattern", "get$TypeErrorDecoder_undefinedCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    (void 0).$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}());
});
Isolate.$lazy($, "nullPropertyPattern", "TypeErrorDecoder_nullPropertyPattern", "get$TypeErrorDecoder_nullPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
});
Isolate.$lazy($, "nullLiteralPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
  try {
    null.$method$;
  } catch (e) {
    return e.message;
  }
}());
});
Isolate.$lazy($, "undefinedPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "get$TypeErrorDecoder_undefinedPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
  try {
    (void 0).$method$;
  } catch (e) {
    return e.message;
  }
}());
});
Isolate.$lazy($, "_toStringList", "IterableMixinWorkaround__toStringList", "get$IterableMixinWorkaround__toStringList", function() {
  return [];
});
Isolate.$lazy($, "_asyncCallbacks", "_asyncCallbacks", "get$_asyncCallbacks", function() {
  var t1, t2;
  t1 = {func: "void_", void: true};
  t2 = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [t1]);
  t2.ListQueue$1(null, t1);
  return t2;
});
Isolate.$lazy($, "_toStringVisiting", "_toStringVisiting", "get$_toStringVisiting", function() {
  return P.HashSet_HashSet$identity(null);
});
Isolate.$lazy($, "_toStringList", "Maps__toStringList", "get$Maps__toStringList", function() {
  return [];
});
Isolate.$lazy($, "_safeConsole", "Console__safeConsole", "get$Console__safeConsole", function() {
  return new W.Console();
});
Isolate.$lazy($, "_allowedElements", "_Html5NodeValidator__allowedElements", "get$_Html5NodeValidator__allowedElements", function() {
  var t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t1.addAll$1(0, ["A", "ABBR", "ACRONYM", "ADDRESS", "AREA", "ARTICLE", "ASIDE", "AUDIO", "B", "BDI", "BDO", "BIG", "BLOCKQUOTE", "BR", "BUTTON", "CANVAS", "CAPTION", "CENTER", "CITE", "CODE", "COL", "COLGROUP", "COMMAND", "DATA", "DATALIST", "DD", "DEL", "DETAILS", "DFN", "DIR", "DIV", "DL", "DT", "EM", "FIELDSET", "FIGCAPTION", "FIGURE", "FONT", "FOOTER", "FORM", "H1", "H2", "H3", "H4", "H5", "H6", "HEADER", "HGROUP", "HR", "I", "IFRAME", "IMG", "INPUT", "INS", "KBD", "LABEL", "LEGEND", "LI", "MAP", "MARK", "MENU", "METER", "NAV", "NOBR", "OL", "OPTGROUP", "OPTION", "OUTPUT", "P", "PRE", "PROGRESS", "Q", "S", "SAMP", "SECTION", "SELECT", "SMALL", "SOURCE", "SPAN", "STRIKE", "STRONG", "SUB", "SUMMARY", "SUP", "TABLE", "TBODY", "TD", "TEXTAREA", "TFOOT", "TH", "THEAD", "TIME", "TR", "TRACK", "TT", "U", "UL", "VAR", "VIDEO", "WBR"]);
  return t1;
});
Isolate.$lazy($, "_attributeValidators", "_Html5NodeValidator__attributeValidators", "get$_Html5NodeValidator__attributeValidators", function() {
  return H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
});
// Native classes

init.functionAliases = {};
;
init.metadata = [{func: "void_", void: true},
{func: "void__dynamic", void: true, args: [null]},
{func: "void__dynamic__StackTrace", void: true, args: [null], opt: [P.StackTrace]},
,
{func: "bool__dynamic_dynamic", ret: J.JSBool, args: [null, null]},
{func: "int__dynamic", ret: J.JSInt, args: [null]},
{func: "int__Comparable_Comparable", ret: J.JSInt, args: [P.Comparable, P.Comparable]},
{func: "bool__Object_Object", ret: J.JSBool, args: [P.Object, P.Object]},
{func: "int__Object", ret: J.JSInt, args: [P.Object]},
{func: "bool__Element_String_String__Html5NodeValidator", ret: J.JSBool, args: [W.Element, J.JSString, J.JSString, W._Html5NodeValidator]},
{func: "void__num", void: true, args: [J.JSNumber]},
{func: "args0"},
{func: "args2", args: [null, null]},
{func: "args1", args: [null]},
{func: "dynamic__dynamic_String", args: [null, J.JSString]},
{func: "dynamic__String", args: [J.JSString]},
{func: "void__Fixture_Fixture", void: true, args: [V.Fixture, V.Fixture]},
{func: "dynamic__dynamic__dynamic", args: [null], opt: [null]},
{func: "dynamic__dynamic_StackTrace", args: [null, P.StackTrace]},
{func: "dynamic__Symbol_dynamic", args: [P.Symbol, null]},
{func: "String__int", ret: J.JSString, args: [J.JSInt]},
{func: "void__Object", void: true, args: [P.Object]},
{func: "void__Node", void: true, args: [W.Node]},
{func: "dynamic__Timer", args: [P.Timer]},
];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
function convertToFastObject(properties) {
  function MyClass() {};
  MyClass.prototype = properties;
  new MyClass();
  return properties;
}
A = convertToFastObject(A);
B = convertToFastObject(B);
C = convertToFastObject(C);
D = convertToFastObject(D);
E = convertToFastObject(E);
F = convertToFastObject(F);
G = convertToFastObject(G);
H = convertToFastObject(H);
J = convertToFastObject(J);
K = convertToFastObject(K);
L = convertToFastObject(L);
M = convertToFastObject(M);
N = convertToFastObject(N);
O = convertToFastObject(O);
P = convertToFastObject(P);
Q = convertToFastObject(Q);
R = convertToFastObject(R);
S = convertToFastObject(S);
T = convertToFastObject(T);
U = convertToFastObject(U);
V = convertToFastObject(V);
W = convertToFastObject(W);
X = convertToFastObject(X);
Y = convertToFastObject(Y);
Z = convertToFastObject(Z);
!function() {
  var objectProto = Object.prototype;
  for (var i = 0;; i++) {
    var property = "___dart_dispatch_record_ZxYxX_0_";
    if (i > 0)
      property = rootProperty + "_" + i;
    if (!(property in objectProto))
      return init.dispatchPropertyName = property;
  }
}();
// BEGIN invoke [main].
;(function (callback) {
  if (typeof document === "undefined") {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }

  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].removeEventListener("load", onLoad, false);
    }
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i) {
    scripts[i].addEventListener("load", onLoad, false);
  }
})(function(currentScript) {
  init.currentScript = currentScript;

  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { H.startRootIsolate(A.main$closure()); });
  } else {
    H.startRootIsolate(A.main$closure());
  }
});
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(fieldDescriptor, accessors, cls) {
    var fieldInformation = fieldDescriptor.split("-");
    var field = fieldInformation[0];
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    var reflectable;
    if (fieldInformation.length > 1)
      reflectable = true;
    else
      reflectable = false;
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        var property = cls + ".prototype.get$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        var property = cls + ".prototype.set$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields) {
    var accessors = [];
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0)
        str += ", ";
      var field = generateAccessor(fields[i], accessors, cls);
      var parameter = "parameter_" + field;
      str += parameter;
      body += "this." + field + " = " + parameter + ";\n";
    }
    str += ") {\n" + body + "}\n";
    str += cls + ".builtin$cls=\"" + name + "\";\n";
    str += "$desc=$collectedClasses." + cls + ";\n";
    str += "if($desc instanceof Array) $desc = $desc[1];\n";
    str += cls + ".prototype = $desc;\n";
    if (typeof defineClass.name != "string") {
      str += cls + ".name=\"" + cls + "\";\n";
    }
    str += accessors.join("");
    return str;
  }
  var inheritFrom = function() {
    function tmp() {
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    return function(constructor, superConstructor) {
      tmp.prototype = superConstructor.prototype;
      var object = new tmp();
      var properties = constructor.prototype;
      for (var member in properties)
        if (hasOwnProperty.call(properties, member))
          object[member] = properties[member];
      object.constructor = constructor;
      constructor.prototype = object;
      return object;
    };
  }();
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    if (!init.allClasses)
      init.allClasses = {};
    var allClasses = init.allClasses;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (typeof dart_precompiled == "function") {
      var constructors = dart_precompiled(collectedClasses);
    } else {
      var combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
      var constructorsList = [];
    }
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        if (desc instanceof Array)
          desc = desc[1];
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        var s = fields.split(";");
        fields = s[1] == "" ? [] : s[1].split(",");
        supr = s[0];
        split = supr.split(":");
        if (split.length == 2) {
          supr = split[0];
          var functionSignature = split[1];
          if (functionSignature)
            desc.$signature = function(s) {
              return function() {
                return init.metadata[s];
              };
            }(functionSignature);
        }
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          if (mixin instanceof Array)
            mixin = mixin[1];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        if (typeof dart_precompiled != "function") {
          combinedConstructorFunction += defineClass(name, cls, fields);
          constructorsList.push(cls);
        }
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    if (typeof dart_precompiled != "function") {
      combinedConstructorFunction += "return [\n  " + constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", combinedConstructorFunction)(collectedClasses);
      combinedConstructorFunction = null;
    }
    for (var i = 0; i < constructors.length; i++) {
      var constructor = constructors[i];
      var cls = constructor.name;
      var desc = collectedClasses[cls];
      var globalObject = isolateProperties;
      if (desc instanceof Array) {
        globalObject = desc[0] || isolateProperties;
        desc = desc[1];
      }
      allClasses[cls] = constructor;
      globalObject[cls] = constructor;
    }
    constructors = null;
    var finishedClasses = {};
    init.interceptorsByTag = Object.create(null);
    init.leafTags = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = allClasses[cls];
      var superConstructor = allClasses[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = inheritFrom(constructor, superConstructor);
      if (hasOwnProperty.call(prototype, "%")) {
        var nativeSpec = prototype["%"].split(";");
        if (nativeSpec[0]) {
          var tags = nativeSpec[0].split("|");
          for (var i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = true;
          }
        }
        if (nativeSpec[1]) {
          tags = nativeSpec[1].split("|");
          if (nativeSpec[2]) {
            var subclasses = nativeSpec[2].split("|");
            for (var i = 0; i < subclasses.length; i++) {
              var subclass = allClasses[subclasses[i]];
              subclass.$nativeSuperclassTag = tags[0];
            }
          }
          for (i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = false;
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            H.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = function() {
          return this[fieldName];
        };
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    function Isolate() {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var staticName in isolateProperties)
        if (hasOwnProperty.call(isolateProperties, staticName))
          this[staticName] = isolateProperties[staticName];
      function ForceEfficientMap() {
      }
      ForceEfficientMap.prototype = this;
      new ForceEfficientMap();
    }
    Isolate.prototype = oldIsolate.prototype;
    Isolate.prototype.constructor = Isolate;
    Isolate.$isolateProperties = isolateProperties;
    Isolate.$finishClasses = oldIsolate.$finishClasses;
    Isolate.makeConstantList = oldIsolate.makeConstantList;
    return Isolate;
  };
}
})()
